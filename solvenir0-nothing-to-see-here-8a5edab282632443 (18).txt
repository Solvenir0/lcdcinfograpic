Directory structure:
└── solvenir0-nothing-to-see-here/
    ├── data.js
    ├── index.html
    ├── package.json
    ├── script.js
    ├── server.js
    ├── style.css
    ├── TECHNICAL_DOCUMENTATION.md
    └── uploads/
        ├── blade-lineage-mentor-meursault.webp
        ├── blade-lineage-salsu-don-quixote.webp
        ├── blade-lineage-salsu-faust.webp
        ├── blade-lineage-salsu-outis.webp
        ├── blade-lineage-salsu-sinclair.webp
        ├── blade-lineage-salsu-yi-sang.webp
        ├── cinq-association-east-section-3-don-quixote.webp
        ├── cinq-association-south-section-4-director-sinclair.webp
        ├── cinq-association-south-section-4-outis.webp
        ├── cinq-association-south-section-5-director-don-quixote.webp
        ├── cinq-association-west-section-3-meursault.webp
        ├── cropped-limbus_logo_feather.webp
        ├── dawn-office-fixer-sinclair.webp
        ├── dead-rabbits-boss-meursault.webp
        ├── devyat-association-north-section-3-rodion.webp
        ├── devyat-association-north-section-3-sinclair.webp
        ├── dieci-association-south-section-4-director-meursault.webp
        ├── dieci-association-south-section-4-hong-lu.webp
        ├── dieci-association-south-section-4-rodion.webp
        ├── dieci-association-south-section-4-yi-sang.webp
        ├── district-20-yurodivy-hong-lu.webp
        ├── district-20-yurodivy-ryshu.webp
        ├── edgar-family-butler-ishmael.webp
        ├── edgar-family-chief-butler-ryshu.webp
        ├── edgar-family-heir-gregor.webp
        ├── effloresced-ego-spicebush-yi-sang.webp
        ├── family-hierarch-candidate-ishmael.webp
        ├── fanghunt-office-fixer-hong-lu.webp
        ├── firefist-office-survivor-gregor.webp
        ├── full-stop-office-fixer-heathcliff.webp
        ├── full-stop-office-rep-hong-lu.webp
        ├── g-corp-head-manager-outis.webp
        ├── g-corp-manager-corporal-gregor.webp
        ├── heishou-pack-mao-branch-adept-faust.webp
        ├── heishou-pack-mao-branch-outis.webp
        ├── heishou-pack-mao-branch-ryshu.webp
        ├── heishou-pack-si-branch-gregor.webp
        ├── heishou-pack-si-branch-rodion.webp
        ├── heishou-pack-wu-branch-adept-yi-sang.webp
        ├── heishou-pack-you-branch-sinclair.webp
        ├── hook-office-fixer-hong-lu.webp
        ├── k-corp-class-3-excision-staff-hong-lu.webp
        ├── kurokumo-clan-captain-gregor.webp
        ├── kurokumo-clan-captain-ishmael.webp
        ├── kurokumo-clan-wakashu-heathcliff.webp
        ├── kurokumo-clan-wakashu-hong-lu.webp
        ├── kurokumo-clan-wakashu-rodion.webp
        ├── kurokumo-clan-wakashu-ryshu.webp
        ├── lcb-sinner-don-quixote.webp
        ├── lcb-sinner-faust.webp
        ├── lcb-sinner-gregor.webp
        ├── lcb-sinner-heathcliff.webp
        ├── lcb-sinner-hong-lu.webp
        ├── lcb-sinner-ishmael.webp
        ├── lcb-sinner-meursault.webp
        ├── lcb-sinner-outis.webp
        ├── lcb-sinner-rodion.webp
        ├── lcb-sinner-ryshu.webp
        ├── lcb-sinner-sinclair.webp
        ├── lcb-sinner-yi-sang.webp
        ├── lccb-assistant-manager-ishmael.webp
        ├── lccb-assistant-manager-rodion.webp
        ├── lccb-assistant-manager-ryshu.webp
        ├── lce-ego-ardor-blossom-star-faust.webp
        ├── lce-ego-lantern-yi-sang.webp
        ├── liu-association-south-section-3-yi-sang.webp
        ├── liu-association-south-section-4-director-rodion.webp
        ├── liu-association-south-section-4-ishmael.webp
        ├── liu-association-south-section-4-ryshu.webp
        ├── liu-association-south-section-5-hong-lu.webp
        ├── liu-association-south-section-6-gregor.webp
        ├── liu-association-south-section-6-meursault.webp
        ├── lobotomy-corp-remnant-faust.webp
        ├── lobotomy-ego-in-the-name-of-love-and-hate-don-quixote.webp
        ├── lobotomy-ego-lantern-don-quixote.webp
        ├── lobotomy-ego-magic-bullet-outis.webp
        ├── lobotomy-ego-red-eyes-penitence-ryshu.webp
        ├── lobotomy-ego-red-sheet-sinclair.webp
        ├── lobotomy-ego-regret-faust.webp
        ├── lobotomy-ego-sloshing-ishmael.webp
        ├── lobotomy-ego-solemn-lament-yi-sang.webp
        ├── lobotomy-ego-sunshower-heathcliff.webp
        ├── lobotomy-ego-the-sword-sharpened-with-tears-rodion.webp
        ├── los-mariachis-jefe-sinclair.webp
        ├── molar-boatworks-fixer-ishmael.webp
        ├── molar-boatworks-fixer-sinclair.webp
        ├── molar-office-fixer-outis.webp
        ├── molar-office-fixer-yi-sang.webp
        ├── multicrack-office-fixer-heathcliff.webp
        ├── multicrack-office-rep-faust.webp
        ├── n-corp-ego-fell-bullet-yi-sang.webp
        ├── n-corp-grohammer-meursault.webp
        ├── n-corp-kleinhammer-heathcliff.webp
        ├── n-corp-mittelhammer-don-quixote.webp
        ├── n-corp-mittelhammer-rodion.webp
        ├── r-corp-4th-pack-rabbit-heathcliff.webp
        ├── r-corp-4th-pack-reindeer-hong-lu.webp
        ├── r-corp-4th-pack-reindeer-ishmael.webp
        ├── r-corp-4th-pack-rhino-meursault.webp
        ├── rb-chef-de-cuisine-ryshu.webp
        ├── rb-sous-chef-gregor.webp
        ├── rosespanner-workshop-fixer-gregor.webp
        ├── rosespanner-workshop-fixer-meursault.webp
        ├── rosespanner-workshop-rep-rodion.webp
        ├── seven-association-south-section-4-faust.webp
        ├── seven-association-south-section-4-heathcliff.webp
        ├── seven-association-south-section-6-director-outis.webp
        ├── seven-association-south-section-6-ryshu.webp
        ├── seven-association-south-section-6-yi-sang.webp
        ├── shi-association-south-section-5-director-don-quixote.webp
        ├── shi-association-south-section-5-heathcliff.webp
        ├── shi-association-south-section-5-ishmael.webp
        ├── t-corp-class-2-collection-staff-rodion.webp
        ├── t-corp-class-3-collection-staff-don-quixote.webp
        ├── t-corp-class-3-vdcu-staff-outis.webp
        ├── the-barber-of-la-manchaland-outis.webp
        ├── the-lord-of-hongyuan-hong-lu.webp
        ├── the-manager-of-la-manchaland-don-quixote.webp
        ├── the-middle-little-brother-meursault.webp
        ├── the-middle-little-brother-sinclair.webp
        ├── the-middle-little-sister-don-quixote.webp
        ├── the-one-who-grips-faust.webp
        ├── the-one-who-shall-grip-sinclair.webp
        ├── the-pequod-captain-ishmael.webp
        ├── the-pequod-first-mate-yi-sang.webp
        ├── the-pequod-harpooneer-heathcliff.webp
        ├── the-priest-of-la-manchaland-gregor.webp
        ├── the-princess-of-la-manchaland-rodion.webp
        ├── the-ring-pointillist-student-outis.webp
        ├── the-ring-pointillist-student-yi-sang.webp
        ├── the-thumb-east-capo-iiii-meursault.webp
        ├── the-thumb-east-soldato-ii-sinclair.webp
        ├── tingtang-gang-gangleader-hong-lu.webp
        ├── twinhook-pirates-first-mate-gregor.webp
        ├── ufi-association-south-section-3-heathcliff.webp
        ├── w-corp-l2-cleanup-agent-faust.webp
        ├── w-corp-l2-cleanup-agent-hong-lu.webp
        ├── w-corp-l2-cleanup-agent-meursault.webp
        ├── w-corp-l3-cleanup-agent-don-quixote.webp
        ├── w-corp-l3-cleanup-agent-ryshu.webp
        ├── w-corp-l3-cleanup-agent-yi-sang.webp
        ├── w-corp-l3-cleanup-captain-outis.webp
        ├── wild-hunt-heathcliff.webp
        ├── wuthering-heights-butler-faust.webp
        ├── wuthering-heights-chief-butler-outis.webp
        ├── zwei-association-south-section-4-faust.webp
        ├── zwei-association-south-section-4-gregor.webp
        ├── zwei-association-south-section-5-rodion.webp
        ├── zwei-association-south-section-6-sinclair.webp
        ├── zwei-association-west-section-3-ishmael.webp
        └── zwei-association-west-section-3-sinclair.webp

================================================
FILE: data.js
================================================
// Korean EGO Name Mappings
// Instructions: Add Korean translations for EGO names here
// Format: "English EGO Name": "Korean EGO Name"
// Only the EGO name part will be translated - sinner names and rarities remain unchanged
// Example: "Magic Bullet (Outis)" will become "마탄의 사수 (Outis)" when Korean mode is enabled
const koreanEgoNames = {
    // ==========================================
    // COMPLETE EGO LIST - Ready for Korean Names
    // Just replace the "" with Korean translations
    // ==========================================
    
    // Yi Sang EGOs
    "Crow's Eye View": "오감도",
    "Bygone Days": "지난 날",
    "4th Match Flame": "4번째 성냥불",
    "Wishing Cairn": "소망석",
    "Dimension Shredder": "차원찢개",
    "Fell Bullet": "흉탄",
    "Sunshower": "여우비",
    
    // Faust EGOs
    "Representation Emitter": "표상 방출기",
    "Hex Nail": "저주못",
    "9:2": "9장 2절",
    "Lasso": "올가미",
    "Fluid Sac": "물주머니",
    "Telepole": "전봇대",
    "Thoracalgia": "흉통",
    "Everlasting": "영속",
    
    // Don Quixote EGOs
    "La Sangre de Sancho": "라 샹그레 데 산쵸",
    "Lifetime Stew": "평생 스튜",
    "Electric Screaming": "전기울음",
    "Red Sheet": "홍적",
    "Yearning-Mircalla": "갈망 - 미르칼라",
    "In the Name of Love and Hate": "사랑과 증오의 이름으로",
    
    // Ryōshū EGOs
    "Forest for the Flames": "삼라염상",
    "Soda": "소다",
    "Red Eyes": "적안",
    "Blind Obsession": "맹목",
    "Red Eyes (Open)": "적안(開)",
    "Contempt, Awe": "경멸, 경외",
    
    // Meursault EGOs
    "Chains of Others": "타인의 사슬",
    "Screwloose Wallop": "나사빠진 일격",
    "Regret": "후회",
    "Pursuance": "집행",
    "Capote": "카포테",
    "Crushbound Past": "분쇄될 과거",
    
    // Hong Lu EGOs
    "Land of Illusion": "허환경",
    "Roseate Desire": "분홍욕망",
    "Cavernous Wailing": "낮은울음",
    "Effervescent Corrosion": "들끓는 부식",
    "Tears of the Tarnished Blood [汚血泣淚]": "오혈읍루 [汚血泣淚]",
    
    // Heathcliff EGOs
    "Bodysack": "시체자루",
    "Holiday": "홀리데이",
    "AEDD": "AEDD",
    "Ya Śūnyatā Tad Rūpam": "공즉시색",
    "Asymmetrical Inertia": "쏠린 관성",
    "Binds": "구속",
    
    // Ishmael EGOs
    "Snagharpoon": "작살박이",
    "Hundred-Footed Death Maggot [蝍蛆殺]": "즉저살 [蝍蛆殺]",
    "Ardor Blossom Star": "홍염살",
    "Wingbeat": "날갯짓",
    "Christmas Nightmare": "크리스마스 악몽",
    
    // Rodion EGOs
    "What is Cast": "던져지는 것",
    "Rime Shank": "얼음다리",
    "Sanguine Desire": "핏빛욕망",
    "Indicant's Trial": "지정 재판",
    
    // Sinclair EGOs
    "Branch of Knowledge": "지식나무의 가지",
    "Impending Day": "다가올날",
    "Lantern": "초롱",
    
    // Outis EGOs
    "To Páthos Máthos": "토 파토스 마토스",
    "Ebony Stem": "검은줄기",
    "Magic Bullet": "마탄",
    
    // Gregor EGOs
    "Suddenly, One Day": "어느날 갑자기",
    "Legerdemain": "눈속임",
    "Solemn Lament": "엄숙한 애도",
    "Garden of Thorns": "가시 화원",
    
};

// ==========================================
// KOREAN SINNER NAMES
// Add Korean translations for sinner names here
// Format: "English Name": "Korean Name"
// ==========================================
const koreanSinnerNames = {
    // Add Korean sinner name translations here:
    // "Yi Sang": "",
    // "Faust": "",
    // "Don Quixote": "",
    // "Ryōshū": "",
    // "Meursault": "",
    // "Hong Lu": "",
    // "Heathcliff": "",
    // "Ishmael": "",
    // "Rodion": "",
    // "Sinclair": "",
    // "Outis": "",
    // "Gregor": "",
};

const idCsvData = `Name,Keywords,SinAffinities,Rarity
"Seven Association South Section 6 Yi Sang","Rupture","Gloom,Gluttony,Sloth","00"
"Molar Office Fixer Yi Sang","Discard,Tremor","Lust,Sloth,Wrath","00"
"The Pequod First Mate Yi Sang","Bleed,Poise","Pride,Envy,Gluttony","00"
"Dieci Association South Section 4 Yi Sang","Aggro,Discard,Sinking","Gluttony,Lust,Sloth","00"
"LCE E.G.O::Lantern Yi Sang","Aggro,Rupture","Sloth,Envy,Gluttony","00"
"Blade Lineage Salsu Yi Sang","Poise","Pride,Envy,Sloth","000"
"Effloresced E.G.O::Spicebush Yi Sang","Sinking,Tremor","Gluttony,Sloth,Pride","000"
"W Corp. L3 Cleanup Agent Yi Sang","Charge,Rupture","Sloth,Gluttony,Gloom","000"
"The Ring Pointillist Student Yi Sang","Bleed,Random","Gloom,Lust,Sloth","000"
"Lobotomy E.G.O::Solemn Lament Yi Sang","Ammo,Sinking","Pride,Gloom,Sloth","000"
"Liu Association South Section 3 Yi Sang","Burn","Sloth,Wrath,Envy","000"
"N Corp. E.G.O::Fell Bullet Yi Sang","Bleed,Poise","Wrath,Lust,Pride","000"
"Heishou Pack - Wu Branch Adept Yi Sang","Aggro,Rupture,Tremor","Sloth,Envy,Gluttony","000"
"W Corp. L2 Cleanup Agent Faust","Charge","Envy,Gloom,Wrath","00"
"Lobotomy Corp. Remnant Faust","Poise,Rupture","Sloth,Gloom,Envy","000"
"Zwei Association South Section 4 Faust","Aggro","Envy,Gloom,Lust","00"
"Wuthering Heights Butler Faust","Sinking","Gloom,Lust,Wrath","00"
"The One Who Grips Faust","Bleed","Envy,Lust,Pride","000"
"Seven Association South Section 4 Faust","Rupture","Envy,Gloom,Gluttony","000"
"Lobotomy E.G.O::Regret Faust","Tremor","Sloth,Pride,Wrath","000"
"Blade Lineage Salsu Faust","Bleed,Poise","Sloth,Pride,Gloom","000"
"MultiCrack Office Rep Faust","Charge","Lust,Envy,Gluttony","000"
"LCE E.G.O::Ardor Blossom Star Faust","Burn","Sloth,Pride,Wrath","000"
"Heishou Pack - Mao Branch Adept Faust","Rupture","Sloth,Pride,Gluttony","000"
"Shi Association South Section 5 Director Don Quixote","Poise","Wrath,Envy,Lust","00"
"N Corp. Mittelhammer Don Quixote","Bleed,Tremor","Lust,Gluttony,Wrath","00"
"Lobotomy E.G.O::Lantern Don Quixote","Aggro,Rupture","Gluttony,Lust,Gloom","00"
"Blade Lineage Salsu Don Quixote","Poise","Pride,Envy,Sloth","00"
"W Corp. L3 Cleanup Agent Don Quixote","Charge,Rupture","Sloth,Gloom,Envy","000"
"Cinq Association South Section 5 Director Don Quixote","","Lust,Gloom,Pride","000"
"The Middle Little Sister Don Quixote","Bleed","Wrath,Envy,Pride","000"
"T Corp. Class 3 Collection Staff Don Quixote","Aggro,Tremor","Gluttony,Pride,Sloth","000"
"The Manager of La Manchaland Don Quixote","Bleed","Sloth,Wrath,Lust","000"
"Cinq Association East Section 3 Don Quixote","Burn,Poise","Gluttony,Wrath,Pride","000"
"Lobotomy E.G.O::In the Name of Love and Hate Don Quixote","Rupture,Sinking","Wrath,Envy,Envy","000"
"Seven Association South Section 6 Ryōshū","Rupture","Sloth,Pride,Gluttony","00"
"LCCB Assistant Manager Ryōshū","Ammo,Poise,Rupture,Tremor","Lust,Gluttony,Pride","00"
"Liu Association South Section 4 Ryōshū","Burn","Gluttony,Wrath,Lust","00"
"District 20 Yurodivy Ryōshū","Tremor","Lust,Sloth,Gluttony","00"
"Kurokumo Clan Wakashu Ryōshū","Bleed","Gluttony,Pride,Lust","000"
"R.B. Chef de Cuisine Ryōshū","Bleed","Wrath,Envy,Lust","000"
"W Corp. L3 Cleanup Agent Ryōshū","Charge","Lust,Pride,Envy","000"
"Edgar Family Chief Butler Ryōshū","Poise","Lust,Pride,Wrath","000"
"Lobotomy E.G.O::Red Eyes & Penitence Ryōshū","Bleed","Envy,Gloom,Lust","000"
"Heishou Pack - Mao Branch Ryōshū","Rupture","Lust,Gluttony,Pride","00"
"Liu Association South Section 6 Meursault","Burn","Lust,Sloth,Wrath","00"
"Rosespanner Workshop Fixer Meursault","Charge,Tremor","Gloom,Pride,Sloth","00"
"The Middle Little Brother Meursault","Bleed","Sloth,Envy,Wrath","00"
"Dead Rabbits Boss Meursault","Rupture","Lust,Wrath,Gluttony","00"
"W Corp. L2 Cleanup Agent Meursault","Charge,Rupture","Envy,Gluttony,Pride","000"
"N Corp. Großhammer Meursault","Aggro,Bleed","Sloth,Wrath,Pride","000"
"R Corp. 4th Pack Rhino Meursault","Bleed,Charge","Envy,Gloom,Lust","000"
"Blade Lineage Mentor Meursault","Poise","Pride,Pride,Wrath","000"
"Dieci Association South Section 4 Director Meursault","Discard,Sinking","Gluttony,Sloth,Gloom","000"
"Cinq Association West Section 3 Meursault","Poise,Rupture","Pride,Gluttony,Gloom","000"
"The Thumb East Capo IIII Meursault","Ammo,Burn,Tremor","Sloth,Lust,Wrath","000"
"Kurokumo Clan Wakashu Hong Lu","Bleed","Lust,Pride,Sloth","00"
"Liu Association South Section 5 Hong Lu","Burn","Gloom,Lust,Wrath","00"
"W Corp. L2 Cleanup Agent Hong Lu","Charge,Rupture","Pride,Wrath,Gluttony","00"
"Hook Office Fixer Hong Lu","Bleed","Wrath,Lust,Pride","00"
"Fanghunt Office Fixer Hong Lu","Rupture","Gluttony,Pride,Wrath","00"
"Tingtang Gang Gangleader Hong Lu","Bleed","Envy,Lust,Gluttony","000"
"K Corp. Class 3 Excision Staff Hong Lu","Aggro,Rupture","Pride,Gluttony,Sloth","000"
"Dieci Association South Section 4 Hong Lu","Discard,Sinking","Wrath,Gloom,Sloth","000"
"District 20 Yurodivy Hong Lu","Tremor","Gloom,Sloth,Gluttony","000"
"Full-Stop Office Rep Hong Lu","Ammo,Poise","Sloth,Gloom,Pride","000"
"R Corp. 4th Pack Reindeer Hong Lu","Charge,Sinking","Gluttony,Envy,Wrath","000"
"The Lord of Hongyuan Hong Lu","Poise,Rupture","Gloom,Gluttony,Pride","000"
"Shi Association South Section 5 Heathcliff","Poise","Lust,Wrath,Envy","00"
"N Corp. Kleinhammer Heathcliff","Bleed","Envy,Gloom,Lust","00"
"Seven Association South Section 4 Heathcliff","Rupture","Wrath,Envy,Gluttony","00"
"MultiCrack Office Fixer Heathcliff","Charge","Wrath,Envy,Gloom","00"
"R Corp. 4th Pack Rabbit Heathcliff","Ammo,Bleed,Rupture","Wrath,Gluttony,Envy","000"
"Lobotomy E.G.O::Sunshower Heathcliff","Rupture,Sinking,Tremor","Envy,Gloom,Sloth","000"
"The Pequod Harpooneer Heathcliff","Aggro,Bleed,Poise","Pride,Envy,Envy","000"
"Öufi Association South Section 3 Heathcliff","Tremor","Envy,Gloom,Pride","000"
"Wild Hunt Heathcliff","Sinking","Wrath,Envy,Gloom","000"
"Full-Stop Office Fixer Heathcliff","Ammo,Poise","Gloom,Envy,Pride","000"
"Kurokumo Clan Wakashu Heathcliff","Bleed","Wrath,Pride,Lust","000"
"Shi Association South Section 5 Ishmael","Poise","Envy,Lust,Wrath","00"
"LCCB Assistant Manager Ishmael","Aggro,Rupture,Tremor","Gluttony,Gloom,Pride","00"
"Lobotomy E.G.O::Sloshing Ishmael","Aggro,Rupture,Tremor","Gloom,Wrath,Gluttony","00"
"Edgar Family Butler Ishmael","Poise,Sinking","Sloth,Gluttony,Gloom","00"
"R Corp. 4th Pack Reindeer Ishmael","Charge,Sinking","Gloom,Envy,Wrath","000"
"Liu Association South Section 4 Ishmael","Burn","Lust,Wrath,Envy","000"
"Molar Boatworks Fixer Ishmael","Sinking,Tremor","Pride,Sloth,Gloom","000"
"The Pequod Captain Ishmael","Aggro,Bleed,Burn","Envy,Pride,Wrath","000"
"Zwei Association West Section 3 Ishmael","Aggro,Tremor","Pride,Envy,Gluttony","000"
"Kurokumo Clan Captain Ishmael","Bleed","Envy,Pride,Lust","000"
"Family Hierarch Candidate Ishmael","Poise,Rupture","Gloom,Gluttony,Envy","000"
"LCCB Assistant Manager Rodion","","Pride,Gluttony,Envy","00"
"N Corp. Mittelhammer Rodion","Bleed","Pride,Lust,Wrath","00"
"Zwei Association South Section 5 Rodion","Aggro,Poise","Wrath,Sloth,Gloom","00"
"T Corp. Class 2 Collection Staff Rodion","Tremor","Envy,Wrath,Sloth","00"
"Kurokumo Clan Wakashu Rodion","Bleed,Poise","Gluttony,Lust,Pride","000"
"Rosespanner Workshop Rep Rodion","Charge,Tremor","Pride,Gloom,Envy","000"
"Dieci Association South Section 4 Rodion","Aggro,Discard,Sinking","Gloom,Envy,Sloth","000"
"Liu Association South Section 4 Director Rodion","Burn","Pride,Wrath,Lust","000"
"Devyat' Association North Section 3 Rodion","Rupture","Lust,Wrath,Gluttony","000"
"The Princess of La Manchaland Rodion","Bleed,Rupture","Pride,Envy,Lust","000"
"Heishou Pack - Si Branch Rodion","Poise,Rupture","Envy,Gluttony,Gloom","000"
"Lobotomy E.G.O::The Sword Sharpened with Tears Rodion","Sinking","Gloom,Envy,Pride","000"
"Zwei Association South Section 6 Sinclair","Aggro,Tremor","Gloom,Wrath,Sloth","00"
"Los Mariachis Jefe Sinclair","Poise,Sinking","Sloth,Envy,Gloom","00"
"Lobotomy E.G.O::Red Sheet Sinclair","Rupture","Gluttony,Pride,Lust","00"
"Molar Boatworks Fixer Sinclair","Tremor","Gloom,Envy,Gluttony","00"
"Zwei Association West Section 3 Sinclair","Aggro,Tremor","Lust,Gloom,Sloth","00"
"Blade Lineage Salsu Sinclair","Bleed,Poise","Gluttony,Wrath,Pride","000"
"The One Who Shall Grip Sinclair","Bleed,Burn","Gloom,Lust,Wrath","000"
"Cinq Association South Section 4 Director Sinclair","Poise","Gluttony,Pride,Lust","000"
"Dawn Office Fixer Sinclair","Bleed","Gloom,Envy,Wrath","000"
"Devyat' Association North Section 3 Sinclair","Rupture","Lust,Gluttony,Wrath","000"
"The Middle Little Brother Sinclair","Aggro,Bleed","Lust,Gluttony,Wrath","000"
"The Thumb East Soldato II Sinclair","Ammo,Burn,Tremor","Lust,Sloth,Wrath","000"
"Heishou Pack - You Branch Sinclair","Burn,Rupture","Lust,Gluttony,Wrath","000"
"Blade Lineage Salsu Outis","Poise","Wrath,Lust,Pride","00"
"G Corp. Head Manager Outis","Sinking","Sloth,Gluttony,Gloom","00"
"Cinq Association South Section 4 Outis","Aggro,Poise","Pride,Gloom,Lust","00"
"The Ring Pointillist Student Outis","Bleed,Random","Lust,Wrath,Gluttony","00"
"Seven Association South Section 6 Director Outis","Rupture","Gluttony,Sloth,Lust","000"
"Molar Office Fixer Outis","Discard,Tremor","Wrath,Lust,Sloth","000"
"Lobotomy E.G.O::Magic Bullet Outis","Burn","Wrath,Pride,Pride","000"
"Wuthering Heights Chief Butler Outis","Sinking","Pride,Gloom,Lust","000"
"W Corp. L3 Cleanup Captain Outis","Charge,Rupture","Pride,Envy,Gloom","000"
"The Barber of La Manchaland Outis","Bleed","Gluttony,Lust,Wrath","000"
"Heishou Pack - Mao Branch Outis","Rupture","Sloth,Gluttony,Gloom","000"
"T Corp. Class 3 VDCU Staff Outis","Tremor","Pride,Sloth,Gluttony","000"
"Liu Association South Section 6 Gregor","Burn","Wrath,Lust,Sloth","00"
"R.B. Sous-chef Gregor","Bleed","Lust,Gluttony,Envy","00"
"Rosespanner Workshop Fixer Gregor","Rupture,Tremor","Gluttony,Envy,Gloom","00"
"Kurokumo Clan Captain Gregor","Bleed","Sloth,Lust,Gloom","00"
"G Corp. Manager Corporal Gregor","Rupture","Gluttony,Sloth,Lust","000"
"Zwei Association South Section 4 Gregor","Aggro","Sloth,Gluttony,Gloom","000"
"Twinhook Pirates First Mate Gregor","Ammo,Bleed,Poise","Sloth,Pride,Gloom","000"
"Edgar Family Heir Gregor","Sinking","Envy,Pride,Lust","000"
"The Priest of La Manchaland Gregor","Aggro,Bleed,Rupture","Gluttony,Pride,Lust","000"
"Firefist Office Survivor Gregor","Burn","Lust,Wrath,Wrath","000"
"Heishou Pack - Si Branch Gregor","Poise,Rupture","Pride,Gluttony,Envy","000"
`;

const egoData = `Crow's Eye View Yi Sang - ZAYIN - Sloth - Yellow
Bygone Days Yi Sang - ZAYIN - Gloom - Blue
4th Match Flame Yi Sang - TETH - Wrath - Red
Wishing Cairn Yi Sang - TETH - Sloth - Yellow
Dimension Shredder Yi Sang - HE - Pride - Indigo
Fell Bullet Yi Sang - HE - Pride - Indigo
Sunshower Yi Sang - WAW - Sloth - Yellow
Representation Emitter Faust - ZAYIN - Pride - Indigo
Hex Nail Faust - TETH - Envy - Purple
9:2 Faust - TETH - Lust - Orange
Lasso Faust - TETH - Gluttony - Green
Fluid Sac Faust - HE - Gloom - Blue
Telepole Faust - HE - Envy - Purple
Thoracalgia Faust - HE - Pride - Indigo
Everlasting Faust - WAW - Sloth - Yellow
La Sangre de Sancho Don Quixote - ZAYIN - Lust - Orange
Lifetime Stew Don Quixote - TETH - Lust - Orange
Wishing Cairn Don Quixote - TETH - Sloth - Yellow
Electric Screaming Don Quixote - TETH - Envy - Purple
Fluid Sac Don Quixote - HE - Gloom - Blue
Telepole Don Quixote - HE - Envy - Purple
Red Sheet Don Quixote - HE - Gluttony - Green
Yearning-Mircalla Don Quixote - WAW - Lust - Orange
In the Name of Love and Hate Don Quixote - WAW - Envy - Purple
Forest for the Flames Ryōshū - ZAYIN - Lust - Orange
Soda Ryōshū - ZAYIN - Gloom - Blue
Red Eyes Ryōshū - TETH - Lust - Orange
Blind Obsession Ryōshū - TETH - Pride - Indigo
4th Match Flame Ryōshū - HE - Wrath - Red
Red Eyes (Open) Ryōshū - HE - Envy - Purple
Thoracalgia Ryōshū - HE - Pride - Indigo
Contempt, Awe Ryōshū - WAW - Lust - Orange
Chains of Others Meursault - ZAYIN - Pride - Indigo
Screwloose Wallop Meursault - TETH - Envy - Purple
Regret Meursault - TETH - Wrath - Red
Electric Screaming Meursault - TETH - Envy - Purple
Pursuance Meursault - HE - Sloth - Yellow
Capote Meursault - HE - Wrath - Red
Yearning-Mircalla Meursault - WAW - Lust - Orange
Crushbound Past Meursault - WAW - Sloth - Yellow
Land of Illusion Hong Lu - ZAYIN - Gloom - Blue
Roseate Desire Hong Lu - TETH - Lust - Orange
Soda Hong Lu - TETH - Gloom - Blue
Cavernous Wailing Hong Lu - TETH - Sloth - Yellow
Lasso Hong Lu - TETH - Gluttony - Green
Dimension Shredder Hong Lu - HE - Pride - Indigo
Effervescent Corrosion Hong Lu - HE - Gluttony - Green
Tears of the Tarnished Blood [汚血泣淚] Hong Lu - WAW - Gluttony - Green
Bodysack Heathcliff - ZAYIN - Envy - Purple
Holiday Heathcliff - ZAYIN - Gluttony - Green
AEDD Heathcliff - TETH - Gloom - Blue
Fell Bullet Heathcliff - TETH - Pride - Indigo
Telepole Heathcliff - HE - Envy - Purple
Ya Śūnyatā Tad Rūpam Heathcliff - HE - Lust - Orange
Asymmetrical Inertia Heathcliff - HE - Sloth - Yellow
Binds Heathcliff - WAW - Gloom - Blue
Snagharpoon Ishmael - ZAYIN - Gloom - Blue
Hundred-Footed Death Maggot [蝍蛆殺] Ishmael - ZAYIN - Gloom - Blue
Roseate Desire Ishmael - TETH - Lust - Orange
Capote Ishmael - TETH - Wrath - Red
Bygone Days Ishmael - TETH - Gloom - Blue
Ardor Blossom Star Ishmael - HE - Wrath - Red
Wingbeat Ishmael - HE - Gluttony - Green
Christmas Nightmare Ishmael - HE - Gluttony - Green
Blind Obsession Ishmael - WAW - Pride - Indigo
What is Cast Rodion - ZAYIN - Pride - Indigo
Rime Shank Rodion - TETH - Gloom - Blue
Effervescent Corrosion Rodion - TETH - Gluttony - Green
4th Match Flame Rodion - HE - Wrath - Red
Pursuance Rodion - HE - Sloth - Yellow
Hex Nail Rodion - HE - Envy - Purple
Sanguine Desire Rodion - WAW - Lust - Orange
Indicant's Trial Rodion - WAW - Wrath - Red
Branch of Knowledge Sinclair - ZAYIN - Gluttony - Green
Cavernous Wailing Sinclair - ZAYIN - Gloom - Blue
Impending Day Sinclair - TETH - Wrath - Red
Lifetime Stew Sinclair - TETH - Lust - Orange
Hex Nail Sinclair - TETH - Envy - Purple
Lantern Sinclair - HE - Gluttony - Green
9:2 Sinclair - HE - Lust - Orange
Tears of the Tarnished Blood [汚血泣淚] Sinclair - WAW - Gluttony - Green
To Páthos Máthos Outis - ZAYIN - Pride - Indigo
Ya Śūnyatā Tad Rūpam Outis - WAW - Lust - Orange
Sunshower Outis - TETH - Gluttony - Green
Ebony Stem Outis - HE - Gluttony - Green
Holiday Outis - HE - Wrath - Red
Dimension Shredder Outis - HE - Envy - Purple
Magic Bullet Outis - HE - Pride - Indigo
Binds Outis - WAW - Pride - Indigo
Suddenly, One Day Gregor - ZAYIN - Sloth - Yellow
Legerdemain Gregor - ZAYIN - Gluttony - Green
Lantern Gregor - TETH - Gluttony - Green
Bygone Days Gregor - TETH - Gloom - Blue
AEDD Gregor - HE - Gloom - Blue
Solemn Lament Gregor - HE - Gloom - Blue
Christmas Nightmare Gregor - HE - Sloth - Yellow
Garden of Thorns Gregor - WAW - Lust - Orange
`;



================================================
FILE: index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Limbus Company Draft Hub - Multiplayer</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="style.css">
    <style>
        .site-disclaimers {
            font-family: 'Courier New', Courier, monospace;
            font-size: 0.9rem;
            color: #aaa;
            border-top: 1px dashed #444;
            padding-top: 15px;
            margin-top: 20px;
        }
        .site-disclaimers h4 {
            font-family: 'Inter', sans-serif; /* Revert heading font */
            color: #ccc;
            font-size: 1.1rem;
        }
        .site-disclaimers ul {
            list-style-position: inside;
        }
    </style>
</head>
<body>
    <div id="rejoin-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 9999; color: white; display: none; flex-direction: column; align-items: center; justify-content: center; font-size: 2rem; gap: 20px;">
        <i class="fas fa-sync fa-spin"></i>
        <p>Attempting to rejoin lobby...</p>
        <button class="btn btn-secondary" id="cancel-rejoin-btn" style="margin-top: 20px;">Cancel</button>
    </div>

    <div class="connection-status" id="connection-status">
        <i class="fas fa-plug"></i>
        <span>Connecting...</span>
    </div>

    <div class="notification" id="notification">Player joined the lobby!</div>

    <!-- Modals -->
    <div id="coin-flip-modal" class="modal-overlay hidden">
        <div class="modal-content">
            <h2>Coin Flip</h2>
            <div class="coin" id="coin-icon"><div class="coin-inner"></div></div>
            <p id="coin-flip-status">Referee is starting the coin flip...</p>
            <div id="turn-choice-buttons" class="hidden">
                <button class="btn btn-primary" id="go-first-btn">Go First</button>
                <button class="btn btn-secondary" id="go-second-btn">Go Second</button>
            </div>
        </div>
    </div>
    <div id="rules-modal" class="modal-overlay hidden">
        <div class="modal-content">
            <button id="close-rules-btn" class="close-modal-btn">&times;</button>
            <h2>Tournament Rules</h2>
            <div class="rules-content">
                <p style="font-size: 1.2rem; text-align: center;">
                    Please find the complete tournament rules at the following link:
                </p>
                <p style="text-align: center; margin-top: 20px;">
                    <a href="https://docs.google.com/document/d/1tiU7iuQqtZEnlWsJmg0YupPDrWpbUDzusxTULt91wfU/edit?usp=sharing" target="_blank" class="btn btn-primary">View Tournament Rules</a>
                </p>
                
                <div class="site-disclaimers" style="margin-top: 40px;">
                    <h4>Site Disclaimers & Fair Play</h4>
                    <ul>
                        <li><strong>Service Stability:</strong> This tool is hosted on a free service. Lobbies may be automatically cleared after a period of inactivity (approximately 15 minutes). Please try to complete drafts in one session to avoid disruption.</li>
                        <li><strong>Data Privacy:</strong> No personal information is stored permanently. Player names and roster selections are temporary and exist only for the duration of an active lobby.</li>
                        <li><strong>Use "As-Is":</strong> This tool is provided for community use without any warranties. The organizer is not responsible for any technical issues that may arise.</li>
                        <li><strong>Fair Play:</strong> Please be respectful to all participants. Any form of harassment or malicious behavior will not be tolerated.</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div id="role-selection-modal" class="modal-overlay hidden">
        <div class="modal-content">
            <button id="close-role-modal-btn" class="close-modal-btn">&times;</button>
            <h3>Select Your Role for Lobby <span id="role-modal-lobby-code"></span></h3>
            <div class="role-options" id="modal-role-options">
                <!-- Role options will be dynamically enabled/disabled -->
            </div>
            <button class="btn btn-primary btn-large" id="confirm-join-btn" style="margin-top: 20px;" disabled>Join Lobby</button>
        </div>
    </div>


    <div class="container">
        <button class="btn back-button hidden" id="global-back-to-main" style="position: absolute; top: 20px; left: 20px; z-index: 10;">
            <i class="fas fa-arrow-left"></i> Main Menu
        </button>
        <div id="main-page">
            <div class="top-left-controls">
                <button id="show-rules-btn" class="btn btn-secondary btn-small"><i class="fas fa-book-open"></i> Rules</button>
                <div class="korean-toggle-container">
                    <label for="korean-display-toggle" class="korean-toggle-label">
                        <input type="checkbox" id="korean-display-toggle" class="korean-toggle-checkbox"> 
                        <span class="korean-toggle-text">한국어 (Korean)</span>
                    </label>
                </div>
            </div>

            <header>
                 <h1><img src="/uploads/cropped-limbus_logo_feather.webp" alt="Limbus Logo" class="header-logo"> Limbus Company Draft Hub</h1>
                <p>Organize and participate in competitive drafting sessions</p>
            </header>

            <div class="logo">
                <img src="/uploads/cropped-limbus_logo_feather.webp" alt="Limbus Company Logo">
            </div>
          
            <div class="welcome-text">
                <p>Welcome to the official Limbus Company Draft Hub. Here you can create or join lobbies to organize competitive matches with other players, or use the Roster Builder to prepare your teams in advance.</p>
            </div>
            
            <div class="form-group" style="max-width: 400px; margin: 30px auto; text-align: left;">
                <label for="player-name">Your Display Name</label>
                 <input type="text" id="player-name" placeholder="Enter your name" maxlength="50" required>
            </div>

            <!-- REPLACE the entire <div class="action-container">...</div> with this new layout -->
            <div class="lobby-access-card">
                <div class="action-card">
                    <div class="action-icon"><i class="fas fa-plus-circle"></i></div>
                    <h3 class="action-title">Create or Join a Lobby</h3>
                    <p class="action-description">Start a new drafting session or join an existing one using a lobby code.</p>
                    <div class="lobby-controls">
                        <button class="btn btn-primary" id="create-lobby-main"><i class="fas fa-plus"></i> Create</button>
                        <input type="text" id="lobby-code-input-main" placeholder="Enter Code" maxlength="6">
                        <button class="btn" id="join-lobby-main"><i class="fas fa-sign-in-alt"></i> Join</button>
                    </div>
                    <!-- Collapsible section for advanced lobby options -->
                    <details class="advanced-lobby-options">
                        <summary>Advanced Options</summary>
                        <div class="lobby-options">
                            <div class="form-group">
                                <label for="match-type-select">Match Type</label>
                                <select id="match-type-select">
                                    <option value="section1" selected>Section 1 Only</option>
                                    <option value="allSections">All Sections</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="draft-logic-select">Draft Logic</label>
                                <select id="draft-logic-select">
                                    <option value="2-3-2" selected>Alternate (2-3-2)</option>
                                    <option value="1-2-2">Standard (1-2-2)</option>
                                    <option value="2-3-2-less-bans">2-3-2 less bans</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="roster-size-select">Roster Size</label>
                                <select id="roster-size-select">
                                    <option value="42" selected>42 IDs</option>
                                    <option value="52">52 IDs</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="timer-toggle">Enable Timer</label>
                                <select id="timer-toggle">
                                    <option value="false" selected>Off</option>
                                    <option value="true">On</option>
                                </select>
                            </div>
                        </div>
                    </details>
                </div>
            </div>
            
            <div class="main-menu-split">
                <!-- Top Half: Roster Builder -->
                <div class="action-card">
                    <div class="action-icon"><i class="fas fa-users-cog"></i></div>
                    <h3 class="action-title">Roster Builder</h3>
                    <p class="action-description" id="builder-roster-description">Create a 42 or 52-ID roster and generate a shareable code for quick loading.</p>
                    <button class="btn btn-secondary btn-large" id="go-to-builder"><i class="fas fa-wrench"></i> Open Builder</button>
                </div>
            
                <!-- Bottom Half: New Draft Analyzer -->
                <div class="action-card">
                    <div class="action-icon"><i class="fas fa-chart-bar"></i></div>
                    <h3 class="action-title">Draft Analyzer</h3>
                    <p class="action-description">Import a completed draft using an export code to review the timeline, rosters, and all picks/bans.</p>
                    <button class="btn btn-secondary btn-large" id="go-to-analyzer"><i class="fas fa-search"></i> Open Analyzer</button>
                </div>
            </div>
            

             
                    
            
        </div>
        
        
        <div id="lobby-view" class="hidden">
            <header>
                <h1><img src="/uploads/cropped-limbus_logo_feather.webp" alt="Limbus Logo" class="header-logo"> Limbus Company Draft Hub</h1>
                <p>Drafting session in progress</p>
            </header>
            
            <div class="card">
                <div class="lobby-info">
                    <div>
                        <h3>LOBBY CODE</h3>
                         <div class="code-display-wrapper">
                            <div class="code-display" id="lobby-code-display"></div>
                            <button id="toggle-code-visibility" class="btn btn-small btn-secondary"><i class="fas fa-eye"></i></button>
                        </div>
                         <p>Share this code with other participants</p>
                    </div>
                    <div>
                        <h3>PARTICIPANTS</h3>
                         <div class="participants" id="participants-list"></div>
                    </div>
                </div>
                
                <!-- Roster Selection Phase -->
                 <div id="roster-phase" class="phase-section">
                    <h2 id="roster-phase-title">Roster Selection Phase</h2>
                    <div class="filter-bar" id="global-filter-bar-roster">
                        <!-- Filters are now globally defined and rendered by JS -->
                    </div>
                     <div class="player-area">
                        <div class="player-panel" id="p1-panel">
                            <div class="player-header">
                                <div class="player-name" id="p1-name-display">Player 1</div>
                                 <div class="player-status status-waiting" id="p1-status">Selecting</div>
                            </div>
                            <div class="counter"><i class="fas fa-users"></i> Selected: <strong id="p1-counter">0</strong> / <span id="p1-roster-size">42</span> IDs</div>
                             <div class="roster-load-form">
                                <input type="text" id="p1-roster-code-input" placeholder="Paste Roster Code...">
                                <button class="btn btn-secondary" id="p1-roster-load"><i class="fas fa-upload"></i> Load</button>
                            </div>
                            <div class="roster-selection" id="p1-roster"></div>
                            <div class="controls">
                                 <button class="btn" id="p1-random"><i class="fas fa-random"></i> Randomize</button>
                                <button class="btn" id="p1-clear"><i class="fas fa-trash"></i> Clear</button>
                                <button class="btn" id="p1-ready"><i class="fas fa-check"></i> Ready</button>
                             </div>
                        </div>
                        <div class="player-panel" id="p2-panel">
                             <div class="player-header">
                                <div class="player-name" id="p2-name-display">Player 2</div>
                                <div class="player-status status-waiting" id="p2-status">Selecting</div>
                             </div>
                             <div class="counter"><i class="fas fa-users"></i> Selected: <strong id="p2-counter">0</strong> / <span id="p2-roster-size">42</span> IDs</div>
                            <div class="roster-load-form">
                                 <input type="text" id="p2-roster-code-input" placeholder="Paste Roster Code...">
                                <button class="btn btn-secondary" id="p2-roster-load"><i class="fas fa-upload"></i> Load</button>
                            </div>
                            <div class="roster-selection" id="p2-roster"></div>
                            <div class="controls">
                                 <button class="btn" id="p2-random"><i class="fas fa-random"></i> Randomize</button>
                                <button class="btn" id="p2-clear"><i class="fas fa-trash"></i> Clear</button>
                                <button class="btn" id="p2-ready"><i class="fas fa-check"></i> Ready</button>
                            </div>
                        </div>
                    </div>
                     <div class="ref-actions" style="text-align: center; margin-top: 20px;">
                        <button class="btn btn-primary btn-large" id="start-coin-flip" disabled><i class="fas fa-coins"></i> Start Coin Flip</button>
                    </div>
                </div>

                <!-- EGO Ban Phase -->
                <div id="ego-ban-phase" class="phase-section hidden">
                    <h2 id="ego-ban-title">EGO Ban Phase</h2>
                    <div id="p1-ego-bans-preview" class="banned-egos-display hidden">
                        <h3>Player 1's Bans</h3>
                        <div class="banned-egos-list"></div>
                    </div>
                    <div class="ego-ban-layout">
                        <div id="ego-ban-main-panel">
                            <h3>Available EGOs</h3>
                            <div class="filter-bar">
                                <div class="filter-group" style="flex-grow: 2;">
                                    <label class="filter-label" for="ego-search-input">Search EGOs:</label>
                                    <input type="text" id="ego-search-input" placeholder="Search by name or sinner...">
                                </div>
                                <button class="btn btn-primary" id="confirm-selection-ego" disabled><i class="fas fa-check"></i> Confirm Ban</button>
                            </div>
                            <div class="ego-ban-container" id="ego-ban-container"></div>
                        </div>
                        <div id="ego-ban-side-panel">
                            <div id="ego-ban-player-bans-section">
                                <h3>Your Bans (<span id="ego-ban-counter">0</span>/5)</h3>
                                <div id="current-player-ego-bans"></div>
                                <div class="controls" style="margin-top: 20px;">
                                    <button class="btn btn-primary hidden" id="confirm-ego-bans" disabled><i class="fas fa-check-double"></i> Confirm All Bans</button>
                                </div>
                            </div>
                            <div id="opponent-roster-display">
                                <h3 id="opponent-roster-title">Opponent's Roster</h3>
                                <div class="sinner-grouped-roster" id="opponent-roster-list"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- ID Draft Phase -->
                <div id="id-draft-phase" class="phase-section hidden">
                    <div class="banned-egos-display" id="draft-banned-egos">
                        <h3><i class="fas fa-ban"></i> Banned EGOs</h3>
                        <div class="banned-egos-list" id="draft-banned-egos-list"></div>
                    </div>
                
                    <div class="triptych-layout">
                        <!-- Left Column: Player 1 Info -->
                        <div class="draft-player-column" id="p1-draft-column">
                            <div class="player-header">
                                <div class="player-name" id="p1-draft-name">Player 1</div>
                                <div class="player-status status-waiting" id="p1-draft-status">Waiting</div>
                            </div>
                            <div class="reserve-timer-display">
                                Reserve: <span id="p1-reserve-time">02:00</span>
                            </div>
                            <h4>Picked IDs</h4>
                            <div class="compact-id-list" id="p1-picks"></div>
                            <div id="p1-s2-picks-container" class="hidden">
                                <h4>Picked IDs (Extended)</h4>
                                <div class="compact-id-list section2-picks" id="p1-s2-picks"></div>
                            </div>
                            <h4>Banned IDs</h4>
                            <div class="compact-id-list" id="p1-id-bans"></div>
                        </div>
                
                        <!-- Center Column: Interaction Hub -->
                        <div class="draft-interaction-hub" id="draft-interaction-hub">
                            <div class="filter-bar" id="global-filter-bar-draft">
                                <!-- Filters for draft phase rendered here by JS -->
                            </div>
                            <div class="draft-pool-container" id="draft-pool-container">
                                <!-- Draft pool will be rendered here by JS -->
                            </div>
                             <div class="draft-controls">
                                <button class="btn btn-primary btn-large" id="confirm-selection-id" disabled><i class="fas fa-check"></i> Confirm Selection</button>
                                <button class="btn hidden" id="next-phase" disabled><i class="fas fa-step-forward"></i> Next Phase</button>
                                <button class="btn hidden" id="complete-draft" disabled><i class="fas fa-flag-checkered"></i> Complete Draft</button>
                            </div>
                        </div>
                
                        <!-- Right Column: Player 2 Info -->
                        <div class="draft-player-column" id="p2-draft-column">
                            <div class="player-header">
                                <div class="player-name" id="p2-draft-name">Player 2</div>
                                <div class="player-status status-waiting" id="p2-draft-status">Waiting</div>
                            </div>
                            <div class="reserve-timer-display">
                                Reserve: <span id="p2-reserve-time">02:00</span>
                            </div>
                            <h4>Picked IDs</h4>
                            <div class="compact-id-list" id="p2-picks"></div>
                             <div id="p2-s2-picks-container" class="hidden">
                                <h4>Picked IDs (Sec 2/3)</h4>
                                <div class="compact-id-list section2-picks" id="p2-s2-picks"></div>
                            </div>
                            <h4>Banned IDs</h4>
                            <div class="compact-id-list" id="p2-id-bans"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Roster Builder Page -->
        <div id="roster-builder-page" class="hidden">
            <header>
                <h1><i class="fas fa-users-cog"></i> Roster Builder</h1>
                <p>Create a roster and generate a shareable code.</p>
            </header>
            <div class="card">
                <div class="builder-sinner-nav" id="builder-sinner-nav">
                    <!-- Sinner buttons will be rendered here -->
                </div>
                <div class="builder-content-wrapper">
                    <div class="builder-main-panel">
                        <h3>Available Identities</h3>
                         <div class="filter-bar" id="global-filter-bar-builder"></div>
                         <div class="builder-id-pool" id="builder-id-pool">
                             <!-- Sinner IDs will be rendered here -->
                         </div>
                    </div>
                    <div class="builder-side-panel">
                        <div class="builder-roster-size-selector" id="builder-roster-size-selector">
                            <button class="btn btn-small active" data-size="42">42-ID Roster</button>
                            <button class="btn btn-small" data-size="72">72-ID Roster</button>
                        </div>
                        <h3>Your Roster (<span id="builder-counter">0</span>/<span id="builder-roster-size">42</span>)</h3>
                        <div class="sinner-grouped-roster" id="builder-selected-roster"></div>
                        <div class="controls" style="margin-top: 10px;">
                            <button class="btn" id="builder-random"><i class="fas fa-random"></i> Simple Random</button>
                            <button class="btn" id="builder-clear"><i class="fas fa-trash"></i> Clear</button>
                        </div>
                        <div class="advanced-random-container">
                            <button class="btn btn-secondary" id="toggle-advanced-random" style="width: 100%; margin-top: 10px;">
                                <i class="fas fa-sliders-h"></i> Advanced Random
                            </button>
                            <div id="advanced-random-options" class="hidden">
                                <h4>Sinner Count Constraints</h4>
                                <p>Set the min/max number of IDs for each sinner. The total must be <span class="advanced-random-roster-size">42</span>.</p>
                                <div id="sinner-sliders-container">
                                    <!-- Sliders will be generated by JS -->
                                </div>
                                <div id="advanced-random-summary" class="advanced-random-summary">
                                    Total Min: <span id="total-min-display">0</span> / <span class="advanced-random-roster-size">42</span>
                                    <br>
                                    Total Max: <span id="total-max-display">0</span> / <span class="advanced-random-roster-size">42</span>
                                </div>
                                <button class="btn btn-primary" id="builder-advanced-random" style="width: 100%; margin-top: 15px;">
                                    <i class="fas fa-cogs"></i> Generate Roster
                                </button>
                            </div>
                        </div>
                        <h3 style="margin-top: 20px;">Roster Code</h3>
                        <p>Use this code to quickly load your roster here or in a match lobby.</p>
                        <div id="builder-roster-code-display" style="background: #111; padding: 10px; border-radius: 5px; font-family: monospace; min-height: 50px; margin-top: 10px; word-wrap: break-word;">
                            Select 42 IDs to generate a code.
                        </div>
                        <button class="btn btn-primary" id="builder-copy-code" style="width: 100%; margin-top: 10px;" disabled><i class="fas fa-copy"></i> Copy Code</button>
                        
                        <h3 style="margin-top: 20px;">Load from Code</h3>
                        <div class="roster-code-actions">
                            <input type="text" id="builder-load-code-input" placeholder="Paste code here...">
                            <button class="btn" id="builder-load-code"><i class="fas fa-upload"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Completed Draft View -->
        <div id="completed-view" class="hidden">
            <header>
                <h1><i class="fas fa-flag-checkered"></i> Draft Complete</h1>
                <div class="view-toggle">
                    <label class="switch">
                        <input type="checkbox" id="view-toggle-switch">
                        <span class="slider round"></span>
                    </label>
                    <span id="view-toggle-label">View Timeline</span>
                </div>
            </header>
            <div class="banned-egos-display" id="final-banned-egos">
                <h3><i class="fas fa-ban"></i> Banned EGOs</h3>
                <div class="banned-egos-list" id="final-banned-egos-list"></div>
            </div>
            <div id="final-rosters-view">
                <div class="final-rosters-container">
                    <div class="final-player-panel">
                        <h2 id="final-p1-name">Player 1's Roster</h2>
                        <h4>Picked IDs</h4>
                        <div class="final-picks" id="final-p1-picks"></div>
                        <div id="final-p1-s2-picks-container" class="hidden">
                            <h4>Picked IDs (Sections 2 & 3)</h4>
                            <div class="final-picks section2-picks" id="final-p1-s2-picks"></div>
                        </div>
                        <h3>Banned IDs</h3>
                        <div class="final-bans" id="final-p1-bans"></div>
                    </div>
                    <div class="final-player-panel">
                        <h2 id="final-p2-name">Player 2's Roster</h2>
                        <h4>Picked IDs</h4>
                        <div class="final-picks" id="final-p2-picks"></div>
                        <div id="final-p2-s2-picks-container" class="hidden">
                            <h4>Picked IDs (Sections 2 & 3)</h4>
                            <div class="final-picks section2-picks" id="final-p2-s2-picks"></div>
                        </div>
                        <h3>Banned IDs</h3>
                        <div class="final-bans" id="final-p2-bans"></div>
                    </div>
                </div>
            </div>
            <div id="timeline-wrapper" class="hidden">
                <div id="timeline-roster-p1" class="timeline-roster-panel">
                    <h4 id="timeline-roster-p1-name">Player 1's Roster</h4>
                    <div class="roster-grid-timeline" id="timeline-roster-p1-grid">
                        </div>
                </div>
            
                <div id="timeline-view">
                    </div>
            
                <div id="timeline-roster-p2" class="timeline-roster-panel">
                    <h4 id="timeline-roster-p2-name">Player 2's Roster</h4>
                    <div class="roster-grid-timeline" id="timeline-roster-p2-grid">
                        </div>
                </div>
            </div>
            <button class="btn btn-large btn-primary" id="restart-draft"><i class="fas fa-redo"></i> Start New Draft</button>
            <button class="btn btn-large" id="export-draft-btn" style="margin-left: 15px;"><i class="fas fa-upload"></i> Export Draft</button>
        </div>
        <!-- Add this new page structure right after the #completed-view div -->
        <div id="analyzer-page" class="hidden">
            <header>
                <h1><i class="fas fa-chart-bar"></i> Draft Analyzer</h1>
                <p>Paste a draft export code below to load and review a completed draft.</p>
            </header>
            <div class="card">
                <div class="analyzer-content">
                    <h3>Draft Export Code</h3>
                    <textarea id="draft-import-code" placeholder="Paste the long export code here..."></textarea>
                    <button class="btn btn-primary btn-large" id="analyze-draft-btn"><i class="fas fa-play-circle"></i> Analyze Draft</button>
                </div>
            </div>
        </div>
    </div>

    <div id="draft-status-panel" class="hidden">
        <div class="status-text">
            <h3 id="current-phase">Waiting for draft to start...</h3>
            <p id="draft-action-description"></p>
        </div>
        <div class="status-timer">
            <div class="timer-display" id="phase-timer">--:--</div>
            <button class="btn btn-secondary btn-small" id="ref-timer-control" style="margin-top: 5px;"><i class="fas fa-pause"></i></button>
        </div>
    </div>

    <script src="data.js"></script>
    <script src="script.js"></script>
</body>
</html>






================================================
FILE: package.json
================================================
{
  "name": "limbus-draft-app",
  "version": "1.3.0",
  "description": "A multiplayer draft tool for Limbus Company.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "author": "",
  "license": "ISC",
  "engines": {
    "node": "18.x || 20.x"
  },
  "dependencies": {
    "express": "^4.18.2",
    "ws": "^8.13.0"
  }
}



================================================
FILE: script.js
================================================
// CONSTANTS & CONFIG
// ======================
const SINNER_ORDER = ["Yi Sang", "Faust", "Don Quixote", "Ryōshū", "Meursault", "Hong Lu", "Heathcliff", "Ishmael", "Rodion", "Sinclair", "Outis", "Gregor"];
const zayinBanExceptions = [
    "Bygone Days (Yi Sang)",
    "Soda (Ryōshū)",
    "Holiday (Heathcliff)",
    "Hundred-Footed Death Maggot [蝍蛆殺] (Ishmael)",
    "Cavernous Wailing (Sinclair)",
    "Legerdemain (Gregor)"
];

// ======================
// CLIENT-SIDE SETTINGS
// ======================
function loadKoreanModeFromStorage() {
    try {
        const saved = localStorage.getItem('limbusKoreanMode');
        return saved === 'true';
    } catch (e) {
        return false; // Default to English if localStorage fails
    }
}

function saveKoreanModeToStorage(enabled) {
    try {
        localStorage.setItem('limbusKoreanMode', enabled.toString());
    } catch (e) {
        console.warn('Could not save Korean mode preference:', e);
    }
}

// Timing constants (in milliseconds)
const TIMING = {
    NOTIFICATION_HIDE_DELAY: 3000,
    CONNECTION_ERROR_DELAY: 5000,
    RECONNECT_ATTEMPT_DELAY: 10000,
    WEBSOCKET_RETRY_DELAY: 100,
    TOOLTIP_SHOW_DELAY: 500,
    TIMER_UPDATE_INTERVAL: 1000,
    KEEP_ALIVE_INTERVAL: 4 * 60 * 1000  // 4 minutes
};

// Game configuration constants
const GAME_CONFIG = {
    DEFAULT_RESERVE_TIME: 120,  // seconds
    SECTION1_ROSTER_SIZE: 42,
    ALL_SECTIONS_ROSTER_SIZE: 72,
    USER_ID_LENGTH: 9,
    USER_ID_START_POS: 2,
    MAX_GENERATION_ATTEMPTS: 1000
};
// ======================
// APPLICATION STATE
// ======================
const state = {
    currentView: "main",
    lobbyCode: "",
    userId: generateUserId(),
    userRole: "",
    rejoinToken: null,
    participants: {
        p1: { name: "Player 1", status: "disconnected", ready: false, reserveTime: GAME_CONFIG.DEFAULT_RESERVE_TIME },
        p2: { name: "Player 2", status: "disconnected", ready: false, reserveTime: GAME_CONFIG.DEFAULT_RESERVE_TIME },
        ref: { name: "Referee", status: "disconnected" }
    },
    roster: { p1: [], p2: [] },
    builderRoster: [],
    builderRosterSize: GAME_CONFIG.SECTION1_ROSTER_SIZE,
    masterIDList: [],
    builderMasterIDList: [],
    masterEGOList: [],
    idsBySinner: null,
    builderSelectedSinner: "Yi Sang",
    draft: {
        phase: "roster",
        step: 0,
        currentPlayer: "",
        action: "",
        actionCount: 0,
        available: { p1: [], p2: [] },
        idBans: { p1: [], p2: [] },
        egoBans: { p1: [], p2: [] },
        picks: { p1: [], p2: [] },
        picks_s2: { p1: [], p2: [] },
        history: [],
        hovered: { p1: null, p2: null },
        banPools: { p1: [], p2: [] },
        draftLogic: '1-2-2',
        matchType: 'section1',
        rosterSize: GAME_CONFIG.SECTION1_ROSTER_SIZE,
        egoBanSteps: 10,
        coinFlipWinner: null,
        turnOrderDecided: false,
        timer: {
            enabled: false,
            running: false,
            endTime: 0,
            isReserve: false
        }
    },
    filters: { sinner: "", sinAffinity: "", keyword: "", rosterSearch: "" },
    draftFilters: { sinner: "", sinAffinity: "", keyword: "", rosterSearch: "" },
    egoSearch: "",
    koreanMode: loadKoreanModeFromStorage(), // Korean language toggle for EGO names (client-side only)
    timerInterval: null,
    keepAliveInterval: null,
    lastCountdownSecond: null, // Track last played countdown second to prevent duplicates
    socket: null,
    joinTarget: {
        lobbyCode: null,
        role: null,
    }
};

let elements = {};

// ======================
// DOM ELEMENT MANAGEMENT
// ======================
/**
 * Helper function to get reserve time element for a specific role
 * @param {string} role - Player role (p1, p2)
 * @returns {HTMLElement|null} The reserve time element
 */
function getReserveTimeElement(role) {
    const elementKey = `${role}ReserveTime`;
    if (!elements[elementKey]) {
        elements[elementKey] = document.getElementById(`${role}-reserve-time`);
    }
    return elements[elementKey];
}

/**
 * Helper function to get slider elements for advanced random generation
 * @param {string} sinner - Sinner name
 * @returns {object} Object containing slider elements
 */
function getSliderElements(sinner) {
    const cacheKey = `sliders_${sinner.replace(/\s+/g, '_')}`;
    if (!elements[cacheKey]) {
        elements[cacheKey] = {
            minSlider: document.getElementById(`slider-${sinner}-min`),
            maxSlider: document.getElementById(`slider-${sinner}-max`),
            minVal: document.getElementById(`slider-val-${sinner}-min`),
            maxVal: document.getElementById(`slider-val-${sinner}-max`)
        };
    }
    return elements[cacheKey];
}

/**
 * Helper function to manage tooltip element
 * @returns {HTMLElement} The tooltip element
 */
function getTooltipElement() {
    if (!elements.idTooltip) {
        elements.idTooltip = document.getElementById('id-tooltip');
    }
    return elements.idTooltip;
}

/**
 * Clear cached dynamic elements when they're removed from DOM
 */
function clearDynamicElementCache() {
    elements.idTooltip = null;
    // Clear any slider caches if needed
    Object.keys(elements).forEach(key => {
        if (key.startsWith('sliders_')) {
            delete elements[key];
        }
    });
}

// ======================
// UTILITY & CORE
// ======================
function generateUserId() {
    return 'user-' + Math.random().toString(36).substr(GAME_CONFIG.USER_ID_START_POS, GAME_CONFIG.USER_ID_LENGTH);
}

function showNotification(text, isError = false) {
    elements.notification.textContent = text;
    elements.notification.style.background = isError ? 'var(--disconnected)' : 'var(--primary)';
    elements.notification.classList.add('show');
    setTimeout(() => { elements.notification.classList.remove('show'); }, TIMING.NOTIFICATION_HIDE_DELAY);
}

function showSideChangeNotification(oldRole, newRole) {
    const oldSide = oldRole === 'p1' ? 'LEFT' : 'RIGHT';
    const newSide = newRole === 'p1' ? 'LEFT' : 'RIGHT';
    const message = `Position Changed! You are now on the ${newSide} side (was ${oldSide})`;
    
    // Show special notification with different styling
    elements.notification.innerHTML = `<i class="fas fa-exchange-alt"></i> ${message}`;
    elements.notification.style.background = 'var(--warning)';
    elements.notification.style.fontWeight = 'bold';
    elements.notification.classList.add('show');
    
    // Keep it visible longer for side changes
    setTimeout(() => { 
        elements.notification.classList.remove('show'); 
        elements.notification.style.fontWeight = ''; // Reset
    }, TIMING.CONNECTION_ERROR_DELAY);
}

function createSlug(name) {
    if (!name) return '';
    let slug = name.toLowerCase();
    slug = slug.replace(/ryōshū/g, 'ryshu').replace(/öufi/g, 'ufi');
    slug = slug.replace(/e\.g\.o::/g, 'ego-');
    slug = slug.replace(/ & /g, ' ').replace(/[.'"]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-').replace(/[^\w-]+/g, '');
    return slug;
}

// ======================
// KEEP-ALIVE SYSTEM
// ======================
function startKeepAlive() {
    if (state.keepAliveInterval) return; // Already running
    
    console.log('Starting keep-alive system for active draft phases');
    
    // Send keep-alive every 4 minutes (Render free tier sleeps after ~15 min of inactivity)
    state.keepAliveInterval = setInterval(() => {
        if (shouldSendKeepAlive()) {
            console.log('Sending keep-alive message to prevent server sleep');
            sendMessage({ type: 'keepAlive', lobbyCode: state.lobbyCode });
        }
    }, TIMING.KEEP_ALIVE_INTERVAL);
}

function stopKeepAlive() {
    if (state.keepAliveInterval) {
        console.log('Stopping keep-alive system');
        clearInterval(state.keepAliveInterval);
        state.keepAliveInterval = null;
    }
}

function shouldSendKeepAlive() {
    // Only send keep-alive during active draft phases to prevent sleep
    if (!state.lobbyCode || !state.socket || state.socket.readyState !== WebSocket.OPEN) {
        return false;
    }
    
    // Active draft phases that need keep-alive
    const activeDraftPhases = ['coinFlip', 'egoBan', 'ban', 'pick', 'midBan', 'pick2', 'pick_s2'];
    return activeDraftPhases.includes(state.draft.phase);
}

// ======================
// INPUT VALIDATION HELPERS
// ======================
function validateAndTrimInput(input, fieldName) {
    const trimmed = input.trim();
    if (!trimmed) {
        showNotification(`Please enter a ${fieldName}.`, true);
        return null;
    }
    return trimmed;
}

function validateRosterSize(roster, requiredSize, action = 'proceed') {
    if (roster.length !== requiredSize) {
        showNotification(`Must select ${requiredSize} IDs to ${action}.`, true);
        return false;
    }
    return true;
}

function validateRosterCodeSize(rosterCode, requiredSize) {
    if (!rosterCode) {
        showNotification('Please enter a roster code.', true);
        return false;
    }
    
    const roster = loadRosterFromCode(rosterCode);
    if (!roster) {
        return false; // loadRosterFromCode already shows error notification
    }
    
    if (roster.length !== requiredSize) {
        showNotification(`Roster code is for ${roster.length} IDs, but lobby requires ${requiredSize}.`, true);
        return false;
    }
    
    return roster;
}

function validateUserPermission(userRole, targetRole) {
    return userRole === targetRole || userRole === 'ref';
}

// ======================
// DEBOUNCING UTILITY
// ======================
function createDebounceFunction(func, delay) {
    let timeoutId;
    return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
}

// ======================
// DATA HANDLING
// ======================
function parseIDCSV(csv) {
    const lines = csv.split('\n').filter(line => line.trim() !== '');
    if (lines.length < 2) return [];
    const regex = /(".*?"|[^",]+)(?=\s*,|\s*$)/g;
    const headers = lines[0].split(',').map(h => h.trim());
    const result = [];
    for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        const values = line.match(regex) || [];
        if (values.length !== headers.length) continue;
        const obj = {};
        headers.forEach((header, idx) => {
            let value = values[idx].trim();
            if (value.startsWith('"') && value.endsWith('"')) value = value.slice(1, -1);
            obj[header] = value;
        });

        const name = obj.Name;
        const sinnerMatch = name.match(/(Yi Sang|Faust|Don Quixote|Ryōshū|Meursault|Hong Lu|Heathcliff|Ishmael|Rodion|Sinclair|Outis|Gregor)/);
        
        result.push({
            id: createSlug(name), 
            name: name,
            keywords: obj.Keywords ? obj.Keywords.split(',').map(k => k.trim()) : [],
            sinAffinities: obj.SinAffinities ? obj.SinAffinities.split(',').map(s => s.trim()) : [],
            rarity: obj.Rarity,
            imageFile: `${createSlug(name)}.webp`, 
            sinner: sinnerMatch ? sinnerMatch[0] : "Unknown",
        });
    }
    return result;
}

function parseEGOData(data) {
    const lines = data.trim().split('\n');
    const egoList = [];
    const bgColorMap = { 
        'Yellow': 'var(--sin-sloth-bg)', 'Blue': 'var(--sin-gloom-bg)', 'Red': 'var(--sin-wrath-bg)',
        'Indigo': 'var(--sin-pride-bg)', 'Purple': 'var(--sin-envy-bg)', 'Orange': 'var(--sin-lust-bg)',
        'Green': 'var(--sin-gluttony-bg)'
    };
    
    lines.forEach(line => {
        if (!line.includes(' - ')) return;
        const parts = line.split(' - ');
        if (parts.length < 4) return;

        const nameAndSinner = parts[0];
        const rarity = parts[1].trim();
        const sin = parts[2].trim();
        const color = parts[3].trim();

        let sinner = "Unknown";
        let name = nameAndSinner;

        for (const s of SINNER_ORDER) {
            if (nameAndSinner.includes(s)) {
                sinner = s;
                name = nameAndSinner.replace(s, '').trim();
                break;
            }
        }
        
        egoList.push({
            id: createSlug(`${name} ${sinner}`),
            name: `${name} (${sinner})`, 
            egoName: name, // Store the EGO name without sinner for Korean translation
            sinner, rarity, sin, color,
            cssColor: bgColorMap[color] || 'rgba(128, 128, 128, 0.7)'
        });
    });
    return egoList;
}

// Helper function to get display name (English or Korean)
function getEgoDisplayName(egoData) {
    if (!state.koreanMode) {
        return egoData.name; // Return full English name with sinner
    }
    
    // Extract the EGO name without the sinner part
    const fullName = egoData.name;
    const sinnerMatch = fullName.match(/^(.+?)\s*\(([^)]+)\)$/);
    
    if (sinnerMatch) {
        const egoNameOnly = sinnerMatch[1].trim();
        const sinnerName = sinnerMatch[2];
        
        // Get Korean EGO name if available, otherwise use English
        const koreanEgoName = koreanEgoNames[egoNameOnly] || egoNameOnly;
        
        // Get Korean sinner name if available, otherwise use English
        const koreanSinnerName = koreanSinnerNames[sinnerName] || sinnerName;
        
        return `${koreanEgoName} (${koreanSinnerName})`;
    }
    
    // If no sinner name found, just return the name as is
    return egoData.name;
}

// ======================
// ROSTER CODE SYSTEM
// ======================
function generateRosterCode() {
    if (state.builderRoster.length !== state.builderRosterSize) return null;
    try {
        const indices = state.builderRoster.map(slug => {
            const index = state.masterIDList.findIndex(id => id.id === slug);
            return index > -1 ? index : 255; // Use 255 as an error/not found marker
        });
        const uint8Array = new Uint8Array(indices);
        const binaryString = String.fromCharCode.apply(null, uint8Array);
        return btoa(binaryString);
    } catch (e) {
        console.error("Error generating roster code:", e);
        return null;
    }
}

function loadRosterFromCode(code) {
    try {
        const binaryString = atob(code);
        const rosterSize = binaryString.length;

        if (rosterSize !== 42 && rosterSize !== 52) {
            showNotification(`Invalid roster code: unsupported size (${rosterSize}).`, true);
            return null;
        }

        const uint8Array = new Uint8Array(binaryString.split('').map(c => c.charCodeAt(0)));
        const rosterSlugs = Array.from(uint8Array).map(index => {
            return (index < state.masterIDList.length) ? state.masterIDList[index].id : null;
        }).filter(Boolean);

        if (rosterSlugs.length !== rosterSize) {
            showNotification("Invalid roster code: contains invalid ID data.", true);
            return null;
        }
        return rosterSlugs;
    } catch (e) {
        console.error("Error decoding roster code:", e);
        showNotification("Invalid roster code format.", true);
        return null;
    }
}

// ======================
// SOCKET COMMUNICATION
// ======================
let rejoinTimeout;

function connectWebSocket() {
    const loc = window.location;
    const wsProtocol = loc.protocol === 'https:' ? 'wss:' : 'ws:';
    const remoteUrl = `${wsProtocol}//${window.location.host}`;
    state.socket = new WebSocket(remoteUrl);

    elements.connectionStatus.className = 'connection-status connecting';
    elements.connectionStatus.innerHTML = '<i class="fas fa-plug"></i> <span>Connecting...</span>';

    state.socket.onopen = () => {
        elements.connectionStatus.className = 'connection-status connected';
        elements.connectionStatus.innerHTML = '<i class="fas fa-plug"></i> <span>Connected</span>';
        
        try {
            const session = JSON.parse(localStorage.getItem('limbusDraftSession'));
            if (session && session.lobbyCode && session.userRole && session.rejoinToken) {
                console.log('Found session, attempting to rejoin:', session);
                elements.rejoinOverlay.style.display = 'flex';
                sendMessage({ 
                    type: 'rejoinLobby', 
                    lobbyCode: session.lobbyCode,
                    role: session.userRole,
                    rejoinToken: session.rejoinToken
                });

                rejoinTimeout = setTimeout(() => {
                    if (elements.rejoinOverlay.style.display === 'flex') {
                        elements.rejoinOverlay.style.display = 'none';
                        try {
                            localStorage.removeItem('limbusDraftSession');
                        } catch (storageError) {
                            console.error('Failed to clear session storage:', storageError);
                        }
                        showNotification("Failed to rejoin lobby. Session cleared.", true);
                    }
                }, TIMING.RECONNECT_ATTEMPT_DELAY);
            }
        } catch (error) {
            console.error('Failed to parse session storage:', error);
            try {
                localStorage.removeItem('limbusDraftSession');
            } catch (storageError) {
                console.error('Failed to clear corrupted session storage:', storageError);
            }
        }
    };
    state.socket.onmessage = (event) => {
        try {
            const message = JSON.parse(event.data);
            handleServerMessage(message);
        } catch (error) {
            console.error('Failed to parse WebSocket message:', error, 'Raw data:', event.data);
            showNotification('Received invalid message from server', true);
        }
    };
    state.socket.onclose = () => {
        elements.connectionStatus.className = 'connection-status';
        elements.connectionStatus.innerHTML = '<i class="fas fa-plug"></i> <span>Disconnected</span>';
        if (state.timerInterval) clearInterval(state.timerInterval);
        state.lastCountdownSecond = null; // Reset countdown tracking on disconnect
        stopKeepAlive(); // Stop keep-alive when connection is lost
    };
    state.socket.onerror = (error) => console.error('WebSocket error:', error);
}

function sendMessage(message) {
    if (state.socket && state.socket.readyState === WebSocket.OPEN) {
        try {
            state.socket.send(JSON.stringify(message));
        } catch (error) {
            console.error('Failed to send WebSocket message:', error, 'Message:', message);
            showNotification('Failed to send message to server', true);
        }
    } else {
        console.warn('Cannot send message: WebSocket is not connected', message);
    }
}

function handleServerMessage(message) {
    console.log("Received from server:", message);
    switch (message.type) {
        case 'lobbyCreated': handleLobbyCreated(message); break;
        case 'lobbyJoined': handleLobbyJoined(message); break;
        case 'stateUpdate':
            if (message.newRole && message.newRole !== state.userRole) {
                console.log(`Role updated by server from ${state.userRole} to ${message.newRole}`);
                state.userRole = message.newRole;
                
                try {
                    const session = JSON.parse(localStorage.getItem('limbusDraftSession'));
                    if (session) {
                        session.userRole = message.newRole;
                        localStorage.setItem('limbusDraftSession', JSON.stringify(session));
                        console.log('Updated session storage with new role.');
                    }
                } catch (error) {
                    console.error('Failed to update session storage with new role:', error);
                }
            }
            handleStateUpdate(message);
            break;
        case 'lobbyInfo': showRoleSelectionModal(message.lobby); break;
        case 'notification': showNotification(message.text); break;
        case 'error':
            showNotification(`Error: ${message.message}`, true);
            if (message.message.includes('rejoin') || message.message.includes('Clearing session')) {
                try {
                    localStorage.removeItem('limbusDraftSession');
                } catch (storageError) {
                    console.error('Failed to clear session storage on error:', storageError);
                }
                elements.rejoinOverlay.style.display = 'none';
                if (rejoinTimeout) clearTimeout(rejoinTimeout);
            }
            break;
        case 'keepAliveAck':
            // Server acknowledged keep-alive, no action needed
            console.log('Keep-alive acknowledged by server');
            break;
    }
}

// ======================
// UI RENDERING & DOM MANIPULATION
// ======================
function sortIdsByMasterList(idList) {
    if (!Array.isArray(idList)) return [];
    return idList.slice().sort((a, b) => {
        const indexA = state.masterIDList.findIndex(item => item.id === a);
        const indexB = state.masterIDList.findIndex(item => item.id === b);
        return indexA - indexB;
    });
}

function createIdElement(idData, options = {}) {
    const { isSelected, isHovered, clickHandler, isNotInRoster, isShared } = options;
    const idElement = document.createElement('div');
    idElement.className = `id-item rarity-${idData.rarity}`;
    if (isSelected) idElement.classList.add('selected');
    if (isHovered) idElement.classList.add('hovered');

    idElement.dataset.id = idData.id;
    let html = `<img class="id-icon" src="/uploads/${idData.imageFile}" alt="${idData.name}"><div class="id-name">${idData.name}</div>`;
    if (isShared) {
        html += '<div class="shared-icon"><i class="fas fa-link"></i></div>';
    }
    idElement.innerHTML = html;
    
    if (clickHandler) {
        idElement.addEventListener('click', () => clickHandler(idData.id));
    }
    return idElement;
}

// ======================
// EGO DISPLAY FUNCTIONS
// ======================

function createEgoElement(egoData, options = {}) {
    const { clickHandler, isHovered } = options;
    const egoElement = document.createElement('div');
    const allBans = [...state.draft.egoBans.p1, ...state.draft.egoBans.p2];
    const isBanned = allBans.includes(egoData.id);
    
    egoElement.className = 'ego-item';
    if (isBanned) egoElement.classList.add('banned');
    if (isHovered) egoElement.classList.add('hovered');

    egoElement.dataset.id = egoData.id;
    egoElement.style.borderLeftColor = egoData.cssColor;

    const displayName = getEgoDisplayName(egoData);
    egoElement.innerHTML = `
        <div class="ego-header"><span class="ego-rarity">${egoData.rarity}</span></div>
        <div class="ego-name">${displayName}</div>`;
    
    if (clickHandler && !isBanned) {
        egoElement.addEventListener('click', () => clickHandler(egoData.id));
    }
    return egoElement;
}

function renderIDList(container, idObjectList, options = {}) {
    const { selectionSet, clickHandler, hoverId, notInRosterSet, sharedIdSet } = options;
    container.innerHTML = '';
    if (!container.classList.contains('compact-id-list')) {
        container.className = 'roster-selection';
    }
    if (!Array.isArray(idObjectList) || idObjectList.length === 0) {
        if(!container.classList.contains('compact-id-list')) {
           container.innerHTML = '<div class="empty-roster" style="padding: 10px; text-align: center;">No items to display</div>';
        }
        return;
    }
    
    const fragment = document.createDocumentFragment();
    idObjectList.forEach(idData => {
        if (!idData) return;
        const isSelected = selectionSet ? selectionSet.includes(idData.id) : false;
        const isHovered = hoverId ? hoverId === idData.id : false;
        const isNotInRoster = notInRosterSet ? !notInRosterSet.includes(idData.id) : false;
        const isShared = sharedIdSet ? sharedIdSet.includes(idData.id) : false;
        const element = createIdElement(idData, { 
            isSelected, 
            isHovered,
            isNotInRoster,
            isShared,
            clickHandler: clickHandler ? () => clickHandler(idData.id) : null 
        });
        fragment.appendChild(element);
    });
    container.appendChild(fragment);
}

function renderGroupedView(container, idObjectList, options = {}) {
    const { clickHandler, selectionSet, hoverId, notInRosterSet, sharedIdSet } = options;

    container.innerHTML = '';
    container.className = 'sinner-grouped-roster';

    if (!Array.isArray(idObjectList) || idObjectList.length === 0) {
        container.innerHTML = '<div class="empty-roster" style="padding: 10px; text-align: center;">No items to display.</div>';
        return;
    }

    const groupedBySinner = {};

    idObjectList.forEach(id => {
        if (!id) return;
        if (!groupedBySinner[id.sinner]) {
            groupedBySinner[id.sinner] = [];
        }
        groupedBySinner[id.sinner].push(id);
    });

    const fragment = document.createDocumentFragment();
    let isFirstRenderedGroup = true;

    SINNER_ORDER.forEach(sinnerName => {
        if (groupedBySinner[sinnerName] && groupedBySinner[sinnerName].length > 0) {
            const sinnerRow = document.createElement('div');
            sinnerRow.className = 'sinner-row';

            if (!isFirstRenderedGroup) {
                const sinnerHeader = document.createElement('div');
                sinnerHeader.className = 'sinner-header';
                sinnerRow.appendChild(sinnerHeader);
            }
            isFirstRenderedGroup = false;

            const idContainer = document.createElement('div');
            idContainer.className = 'sinner-id-container';

            const sortedIds = groupedBySinner[sinnerName].sort((a,b) => {
                const indexA = state.masterIDList.findIndex(item => item.id === a.id);
                const indexB = state.masterIDList.findIndex(item => item.id === b.id);
                return indexA - indexB;
            });

            sortedIds.forEach(idData => {
                const isSelected = selectionSet ? selectionSet.includes(idData.id) : false;
                const isHovered = hoverId ? hoverId === idData.id : false;
                const isNotInRoster = notInRosterSet ? !notInRosterSet.includes(idData.id) : false;
                const isShared = sharedIdSet ? sharedIdSet.includes(idData.id) : false;
                const idElement = createIdElement(idData, { isSelected, isHovered, isNotInRoster, isShared, clickHandler });
                idContainer.appendChild(idElement);
            });
            sinnerRow.appendChild(idContainer);
            fragment.appendChild(sinnerRow);
        }
    });

    container.appendChild(fragment);
}

function switchView(view) {
    console.log('Switching to view:', view);
    state.currentView = view;
    
    ['mainPage', 'lobbyView', 'completedView', 'rosterBuilderPage', 'analyzerPage', 'timelineWrapper'].forEach(pageId => {
        const el = elements[pageId];
        if (el) {
            el.classList.add('hidden');
            el.style.display = '';
        } else {
            console.warn('Element not found for hiding:', pageId);
        }
    });

    const targetEl = elements[view];
    if (targetEl) {
        targetEl.classList.remove('hidden');
        targetEl.style.display = 'block';
        console.log('Successfully switched to:', view);
    } else {
        console.error('Target view element not found for showing:', view);
    }

    elements.globalBackToMain.classList.toggle('hidden', view === 'mainPage');
}


function refreshInterfaceBasedOnGameState() {
    const { draft } = state;
    const { phase, rosterSize } = draft;

    if (phase === 'complete') {
        switchView('completedView');
        renderCompletedView();
        return;
    } else if (state.lobbyCode) {
        switchView('lobbyView');
    } else if (state.currentView !== 'rosterBuilderPage') {
        switchView('mainPage');
    }

    elements.rosterPhase.classList.toggle('hidden', phase !== 'roster');
    elements.egoBanPhase.classList.toggle('hidden', phase !== 'egoBan');
    elements.idDraftPhase.classList.toggle('hidden', !['ban', 'pick', 'midBan', 'pick2', 'pick_s2'].includes(phase));
    elements.coinFlipModal.classList.toggle('hidden', phase !== 'coinFlip');
    elements.draftStatusPanel.classList.toggle('hidden', phase === 'roster' || phase === 'complete');

    // Apply draft phase classes for dynamic border colors
    document.body.classList.remove('draft-ban-phase', 'draft-pick-phase');
    if (['ban', 'midBan', 'egoBan'].includes(phase)) {
        document.body.classList.add('draft-ban-phase');
        console.log('Applied draft-ban-phase class for phase:', phase);
    } else if (['pick', 'pick2', 'pick_s2'].includes(phase)) {
        document.body.classList.add('draft-pick-phase');
        console.log('Applied draft-pick-phase class for phase:', phase);
    }


    if (phase === 'coinFlip') {
        displayCoinFlipResultAndChoices();
    }

    elements.participantsList.innerHTML = '';
    ['p1', 'p2', 'ref'].forEach(role => {
        const p = state.participants[role];
        const displayName = state.userRole === role ? `${p.name} (You)` : p.name;
        const el = document.createElement('div');
        el.className = `participant ${state.userRole === role ? 'current-user' : ''}`;
        const icon = role === 'ref' ? 'fa-star' : 'fa-user';
        let statusIcon = '<i class="fas fa-times-circle" style="color:var(--disconnected);"></i>';
        if (p.status === 'connected') {
            statusIcon = (role !== 'ref' && p.ready) ? ` <i class="fas fa-check-circle" style="color:var(--ready);"></i>` : ` <i class="fas fa-dot-circle" style="color:var(--connected);"></i>`;
        }
        el.innerHTML = `<i class="fas ${icon}"></i> ${displayName} ${statusIcon}`;
        elements.participantsList.appendChild(el);

        if ((role === 'p1' || role === 'p2') && p.reserveTime !== undefined) {
            const reserveTimeEl = getReserveTimeElement(role);
            if (reserveTimeEl) {
                const minutes = Math.floor(p.reserveTime / 60);
                const seconds = p.reserveTime % 60;
                reserveTimeEl.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            }
        }
    });

    ['p1', 'p2'].forEach(player => {
        const isReady = state.participants[player].ready;
        elements[`${player}NameDisplay`].textContent = state.participants[player].name;
        elements[`${player}Counter`].textContent = state.roster[player].length;
        elements[`${player}RosterSize`].textContent = rosterSize;
        elements[`${player}Ready`].innerHTML = isReady ? '<i class="fas fa-times"></i> Unready' : `<i class="fas fa-check"></i> Ready`;
        elements[`${player}Ready`].classList.toggle('btn-ready', isReady);
        elements[`${player}Status`].textContent = isReady ? 'Ready' : 'Selecting';
        elements[`${player}Status`].className = `player-status ${isReady ? 'status-ready' : 'status-waiting'}`;
        elements[`${player}Panel`].classList.toggle('locked', isReady);

        // FIX: Disable/enable buttons based on ready state
        elements[`${player}Random`].disabled = isReady;
        elements[`${player}Clear`].disabled = isReady;
    });
    
    if (phase === 'roster') {
        elements.rosterPhaseTitle.textContent = `Roster Selection Phase (${rosterSize} IDs)`;
        filterAndRenderRosterSelection();
    } else if (phase === 'egoBan') {
        renderEgoBanPhase();
    } else if (['ban', 'pick', 'midBan', 'pick2', 'pick_s2'].includes(phase)) {
        updateDraftUI();
    }
    
    updateDraftInstructions();
    updateRosterPhaseReadyButtonState();
    updateTimerUI();
}


function filterAndRenderRosterSelection() {
    const filteredList = filterIDs(state.masterIDList, state.filters);
    
    ['p1', 'p2'].forEach(player => {
        const container = elements[`${player}Roster`];
        const scrollTop = container.scrollTop;
        renderIDList(container, filteredList, {
            selectionSet: state.roster[player], 
            clickHandler: (id) => toggleIDSelection(player, id)
        });
        container.scrollTop = scrollTop;
    });
}

function filterIDs(sourceList, filterObject, options = {}) {
    const { draftPhase = false, builderPhase = false } = options;
    const searchTerm = filterObject.rosterSearch.toLowerCase();

    return sourceList.filter(fullData => {
        if (!fullData) return false;
        
        const isLcb = fullData.name.toLowerCase().includes('lcb sinner');
        if (builderPhase && isLcb) return false;
        if (draftPhase && (fullData.rarity === '0' || isLcb)) return false;

        if (filterObject.sinner && fullData.sinner !== filterObject.sinner) return false;
        if (filterObject.sinAffinity && !fullData.sinAffinities.includes(filterObject.sinAffinity)) return false;
        if (filterObject.keyword && !fullData.keywords.includes(filterObject.keyword)) return false;
        if (searchTerm && !fullData.name.toLowerCase().includes(searchTerm)) return false;
        return true;
    });
}

function renderEgoBanPhase() {
    const { currentPlayer, hovered, egoBans, step } = state.draft;
    const opponent = currentPlayer === 'p1' ? 'p2' : 'p1';
    const totalEgoBansPerPlayer = (state.draft.egoBanSteps || 10) / 2;
    
    elements.egoBanTitle.textContent = `EGO Ban Phase - ${state.participants[currentPlayer].name}'s Turn (Ban ${Math.floor(step / 2) + 1} of ${totalEgoBansPerPlayer})`;

    const clickHandler = (state.userRole === currentPlayer || state.userRole === 'ref') ? hoverEgoToBan : null;
    
    const searchTerm = state.egoSearch.toLowerCase();
    const allBans = [...egoBans.p1, ...egoBans.p2];

    const availableEgos = state.masterEGOList.filter(ego => {
        if (allBans.includes(ego.id)) return false;
        const isZayin = ego.rarity === 'ZAYIN';
        const isException = zayinBanExceptions.includes(ego.name);
        return !isZayin || isException;
    });

    const filteredEgos = availableEgos.filter(ego => 
        ego.name.toLowerCase().includes(searchTerm) || 
        ego.sinner.toLowerCase().includes(searchTerm)
    );

    const container = elements.egoBanContainer;
    const scrollTop = container.scrollTop;
    container.innerHTML = '';
    const fragment = document.createDocumentFragment();
    filteredEgos.forEach(ego => {
        fragment.appendChild(createEgoElement(ego, { 
            clickHandler, 
            isHovered: hovered[currentPlayer] === ego.id 
        }));
    });
    container.appendChild(fragment);
    container.scrollTop = scrollTop;

    const currentPlayerBans = egoBans[currentPlayer] || [];
    const bansContainer = elements.currentPlayerEgoBans;
    bansContainer.innerHTML = '';
    const bannedEgoObjects = currentPlayerBans.map(id => state.masterEGOList.find(ego => ego.id === id)).filter(Boolean);
    
    bannedEgoObjects.forEach(ego => {
        const item = document.createElement('div');
        item.className = 'banned-ego-item';
        item.style.borderLeft = `3px solid ${ego.cssColor}`;
        const displayName = getEgoDisplayName(ego);
        item.innerHTML = `<span class="rarity">[${ego.rarity}]</span> <span class="name" style="text-decoration: none;">${displayName}</span>`;
        bansContainer.appendChild(item);
    });
    
    const yourBansHeader = elements.egoBanPlayerBansSection.querySelector('h3');
    if (yourBansHeader) {
        yourBansHeader.innerHTML = `Your Bans (<span id="ego-ban-counter">${currentPlayerBans.length}</span>/${totalEgoBansPerPlayer})`;
    }

    elements.opponentRosterTitle.textContent = `${state.participants[opponent].name}'s Roster`;
    const opponentRosterObjects = state.roster[opponent].map(id => state.masterIDList.find(item => item.id === id)).filter(Boolean);
    renderGroupedView(elements.opponentRosterList, opponentRosterObjects, {});

    elements.confirmEgoBans.classList.add('hidden');
    elements.confirmSelectionEgo.disabled = !hovered[currentPlayer];

    const allBansPreview = elements.p1EgoBansPreview; // This element is repurposed to show all bans

    if (allBans.length > 0) {
        allBansPreview.classList.remove('hidden');
        allBansPreview.querySelector('h3').textContent = 'Banned EGOs'; // Make the title generic
        const allBannedObjects = allBans.map(id => state.masterEGOList.find(e => e.id === id)).filter(Boolean);
        const listEl = allBansPreview.querySelector('.banned-egos-list');
        listEl.innerHTML = '';
        allBannedObjects.forEach(ego => {
            const item = document.createElement('div');
            item.className = 'banned-ego-item';
            item.style.backgroundColor = ego.cssColor;
            const displayName = getEgoDisplayName(ego);
            item.innerHTML = `<span class="rarity">[${ego.rarity}]</span> <span class="name">${displayName}</span>`;
            listEl.appendChild(item);
        });
    } else {
        allBansPreview.classList.add('hidden');
    }
}

function renderBannedEgosDisplay() {
    const allBans = [...state.draft.egoBans.p1, ...state.draft.egoBans.p2];
    const bannedEgoObjects = allBans.map(id => state.masterEGOList.find(ego => ego.id === id)).filter(Boolean);
    
    const renderList = (container) => {
        container.innerHTML = '';
        bannedEgoObjects.forEach(ego => {
            const item = document.createElement('div');
            item.className = 'banned-ego-item';
            item.style.backgroundColor = ego.cssColor;
            const displayName = getEgoDisplayName(ego);
            item.innerHTML = `<span class="rarity">[${ego.rarity}]</span> <span class="name">${displayName}</span>`;
            container.appendChild(item);
        });
    };

    renderList(elements.draftBannedEgosList);
    renderList(elements.finalBannedEgosList);
}

function updateDraftUI() {
    // Update player names with side indicators
    const userRole = state.userRole;
    const p1Name = state.participants.p1.name;
    const p2Name = state.participants.p2.name;
    
    if (userRole === 'p1') {
        elements.p1DraftName.innerHTML = `${p1Name} <i class="fas fa-star your-side-indicator" title="Your Side"></i>`;
        elements.p2DraftName.textContent = p2Name;
    } else if (userRole === 'p2') {
        elements.p1DraftName.textContent = p1Name;
        elements.p2DraftName.innerHTML = `${p2Name} <i class="fas fa-star your-side-indicator" title="Your Side"></i>`;
    } else {
        // Referee view - no side indicators
        elements.p1DraftName.textContent = p1Name;
        elements.p2DraftName.textContent = p2Name;
    }

    const renderCompactIdListChronological = (container, idList) => {
        const scrollTop = container.scrollTop;
        const idObjects = idList.map(id => state.masterIDList.find(item => item.id === id)).filter(Boolean);
        renderIDList(container, idObjects, {});
        container.scrollTop = scrollTop;
    };
    
    renderCompactIdListChronological(elements.p1IdBans, [...state.draft.idBans.p1].reverse());
    renderCompactIdListChronological(elements.p2IdBans, [...state.draft.idBans.p2].reverse());
    renderCompactIdListChronological(elements.p1Picks, [...state.draft.picks.p1].reverse());
    renderCompactIdListChronological(elements.p2Picks, [...state.draft.picks.p2].reverse());

    const isAllSections = state.draft.matchType === 'allSections';
    elements.p1S2PicksContainer.classList.toggle('hidden', !isAllSections);
    elements.p2S2PicksContainer.classList.toggle('hidden', !isAllSections);
    if (isAllSections) {
        // In the new logic, S2 picks are just part of the main picks.
        // This section might need adjustment based on how we want to display the 18 picks.
        // For now, let's assume they all go into the main pick list.
        elements.p1S2Picks.innerHTML = '';
        elements.p2S2Picks.innerHTML = '';
    } else {
        // Handle old logic for section1 only matches with a potential pick_s2 phase
        renderCompactIdListChronological(elements.p1S2Picks, [...state.draft.picks_s2.p1].reverse());
        renderCompactIdListChronological(elements.p2S2Picks, [...state.draft.picks_s2.p2].reverse());
    }
    
    const { currentPlayer } = state.draft;
    elements.p1DraftStatus.textContent = currentPlayer === "p1" ? "Drafting" : "Waiting";
    elements.p2DraftStatus.textContent = currentPlayer === "p2" ? "Drafting" : "Waiting";
    elements.p1DraftStatus.className = `player-status ${currentPlayer === "p1" ? "status-drafting" : "status-waiting"}`;
    elements.p2DraftStatus.className = `player-status ${currentPlayer === "p2" ? "status-drafting" : "status-waiting"}`;
    
    elements.p1DraftColumn.classList.toggle('draft-active', currentPlayer === 'p1');
    elements.p2DraftColumn.classList.toggle('draft-active', currentPlayer === 'p2');
    elements.draftInteractionHub.classList.toggle('draft-active', !!currentPlayer);


    renderBannedEgosDisplay();
}

let isUpdatingDraftInstructions = false;

// Track previous state for turn notifications
let previousPhase = null;
let previousCurrentPlayer = null;

function updateDraftInstructions() {
    // Prevent race conditions from multiple simultaneous updates
    if (isUpdatingDraftInstructions) {
        return;
    }
    isUpdatingDraftInstructions = true;
    
    try {
        let phaseText = "", actionDesc = "";
        const { phase, currentPlayer, action, actionCount, egoBans, hovered, matchType } = state.draft;
        
        // Check if this is a new turn for the current user and play notification sound
        const isPlayerTurn = (state.userRole === currentPlayer);
        const isActionPhase = ['egoBan', 'ban', 'pick', 'midBan', 'pick2', 'pick_s2'].includes(phase);
        const isTurnChange = (phase !== previousPhase) || (currentPlayer !== previousCurrentPlayer);
        
        if (isPlayerTurn && isActionPhase && isTurnChange && previousPhase !== null) {
            // It's now the user's turn to act - play notification sound
            playTurnNotificationSound(phase);
        }
        
        // Update tracking variables
        previousPhase = phase;
        previousCurrentPlayer = currentPlayer;
    
    const hub = elements.draftInteractionHub;
    const existingPool = hub.querySelector('.sinner-grouped-roster');
    const existingScrollTop = existingPool ? existingPool.scrollTop : 0;

    elements.draftPoolContainer.innerHTML = '';

    switch(phase) {
        case "roster": 
            phaseText = "Roster Selection";
            actionDesc = `Select ${state.draft.rosterSize} IDs for your roster, then ready up`;
            break;
        case "coinFlip":
            phaseText = "Coin Flip";
            actionDesc = "Winner chooses turn order";
            break;
        case "egoBan":
            const totalEgoBansPerPlayer = (state.draft.egoBanSteps || 10) / 2;
            const bansDoneByCurrentPlayer = egoBans[currentPlayer] ? egoBans[currentPlayer].length : 0;
            phaseText = `EGO Ban Phase - ${state.participants[currentPlayer].name}'s Turn`;
            actionDesc = `Ban 1 EGO (${bansDoneByCurrentPlayer}/${totalEgoBansPerPlayer} bans)`;
            break;
        case "ban":
            phaseText = `ID Ban Phase - ${state.participants[currentPlayer].name}'s Turn`;
            const totalBans = 6; // Standard ban count
            const currentBans = (state.draft.idBans[currentPlayer] || []).length;
            actionDesc = `Ban ${actionCount} IDs (${currentBans}/${totalBans} bans)`;
            break;
        case "pick":
            phaseText = `ID Pick Phase 1 - ${state.participants[currentPlayer].name}'s Turn`;
            const totalPicks1 = 6;
            const currentPicks1 = (state.draft.picks[currentPlayer] || []).length;
            actionDesc = `Pick ${actionCount} IDs (${currentPicks1}/${totalPicks1} picks)`;
            break;
        case "midBan":
            phaseText = `Mid-Draft Ban Phase - ${state.participants[currentPlayer].name}'s Turn`;
            const midBanCount = matchType === 'allSections' ? 4 : 3;
            const currentMidBans = (state.draft.idBans[currentPlayer] || []).length - 6; // Subtract initial bans
            actionDesc = `Ban ${actionCount} IDs (${Math.max(0, currentMidBans)}/${midBanCount} mid-bans)`;
            break;
        case "pick2":
            phaseText = `ID Pick Phase 2 - ${state.participants[currentPlayer].name}'s Turn`;
            const totalPicks2 = matchType === 'allSections' ? 12 : 6;
            const currentPicks2 = (state.draft.picks[currentPlayer] || []).length - 6; // Subtract phase 1 picks
            actionDesc = `Pick ${actionCount} IDs (${Math.max(0, currentPicks2)}/${totalPicks2} picks)`;
            break;
        case "pick_s2":
            phaseText = `Section 2/3 Pick Phase - ${state.participants[currentPlayer].name}'s Turn`;
            const totalS2Picks = 6;
            const currentS2Picks = (state.draft.picks_s2[currentPlayer] || []).length;
            actionDesc = `Pick ${actionCount} Section 2/3 IDs (${currentS2Picks}/${totalS2Picks} picks)`;
            break;
        case "complete":
            phaseText = "Draft Complete";
            actionDesc = "All selections finalized";
            break;
        default:
            phaseText = "Waiting for Draft to Start";
            actionDesc = "Waiting for referee to start";
    }

    if (['ban', 'pick', 'midBan', 'pick2', 'pick_s2'].includes(phase)) {
        const opponent = currentPlayer === 'p1' ? 'p2' : 'p1';
        const isBanAction = (phase === 'ban' || phase === 'midBan');

        let availableIdList;
        if (isBanAction) {
            // For ban phases: show the enemy roster (what the current player can ban from)
            const enemyPlayer = currentPlayer === 'p1' ? 'p2' : 'p1';
            const enemyRoster = state.roster[enemyPlayer] || [];
            
            // BUG FIX: Filter out already banned AND ALL picked IDs from both players
            const blocked = new Set([
                ...state.draft.idBans.p1,
                ...state.draft.idBans.p2,
                ...state.draft.picks.p1,
                ...state.draft.picks.p2,
                ...state.draft.picks_s2.p1,
                ...state.draft.picks_s2.p2
            ]);
            
            availableIdList = enemyRoster.filter(id => !blocked.has(id));
        } else {
            // For pick phases: show own available roster
            const available = state.draft.available || {};
            availableIdList = [...(available[currentPlayer] || [])];
        }

        if (!availableIdList) {
            console.error(`[Draft Render] ERROR: availableIdList for draft pool render`);
            return;
        }

        let availableObjects = availableIdList.map(id => state.masterIDList.find(item => item && item.id === id)).filter(Boolean);
        
        availableObjects = filterIDs(availableObjects, state.draftFilters, { draftPhase: true });
        
        const clickHandler = (state.userRole === currentPlayer || state.userRole === 'ref') ? (id) => hoverDraftID(id) : null;
        
        const poolEl = document.createElement('div');
        poolEl.className = 'sinner-grouped-roster';
        poolEl.style.maxHeight = '60vh';
        elements.draftPoolContainer.appendChild(poolEl);

        const sharedIds = state.roster.p1.filter(id => state.roster.p2.includes(id));
        renderGroupedView(poolEl, availableObjects, { 
            clickHandler, 
            hoverId: hovered[currentPlayer],
            selectionSet: hovered[currentPlayer] ? [hovered[currentPlayer]] : [], // Show selected border for clicked item
            sharedIdSet: sharedIds
        });

        poolEl.scrollTop = existingScrollTop;

        elements.confirmSelectionId.disabled = !hovered[currentPlayer] || state.draft.actionCount <= 0;
    }
    
    elements.currentPhase.textContent = phaseText;
    elements.draftActionDescription.textContent = actionDesc;
    elements.completeDraft.disabled = state.userRole !== 'ref' || phase === 'complete';
    } finally {
        isUpdatingDraftInstructions = false;
    }
}

function displayCoinFlipResultAndChoices() {
    const { coinFlipWinner } = state.draft;
    const winnerName = coinFlipWinner ? state.participants[coinFlipWinner].name : '';

    if (!coinFlipWinner) {
        elements.coinIcon.classList.add('flipping');
        elements.coinFlipStatus.textContent = 'Flipping coin...';
        elements.turnChoiceButtons.classList.add('hidden');
    } else {
        elements.coinIcon.classList.remove('flipping');
        elements.coinFlipStatus.textContent = `${winnerName} wins! Choose turn order`;
        
        const canChoose = state.userRole === coinFlipWinner || state.userRole === 'ref';

        if (canChoose) {
            elements.turnChoiceButtons.classList.remove('hidden');
            if (state.userRole === 'ref' && state.userRole !== coinFlipWinner) {
                 elements.coinFlipStatus.innerHTML = `${winnerName} wins! Choose turn order<br><small>Waiting for them to choose (or you can choose for them).</small>`;
            }
        } else {
            elements.turnChoiceButtons.classList.add('hidden');
            elements.coinFlipStatus.textContent = `${winnerName} wins! Waiting for choice...`;
        }
    }
}

function renderCompletedView() {
    const renderChronologicalIdList = (container, idList) => {
        container.innerHTML = '';
        const idObjects = idList.map(id => state.masterIDList.find(item => item.id === id)).filter(Boolean);
        const fragment = document.createDocumentFragment();
        idObjects.forEach(idData => {
            const element = createIdElement(idData, {});
            fragment.appendChild(element);
        });
        container.appendChild(fragment);
    };

    elements.finalP1Name.textContent = `${state.participants.p1.name}'s Roster`;
    elements.finalP2Name.textContent = `${state.participants.p2.name}'s Roster`;

    renderChronologicalIdList(elements.finalP1Picks, state.draft.picks.p1);
    renderChronologicalIdList(elements.finalP2Picks, state.draft.picks.p2);

    const isAllSections = state.draft.matchType === 'allSections';
    // The new logic puts all picks into the main `picks` array.
    // The S2 container is only for the old logic.
    const showS2Container = !isAllSections && (state.draft.picks_s2.p1.length > 0 || state.draft.picks_s2.p2.length > 0);

    elements.finalP1S2PicksContainer.classList.toggle('hidden', !showS2Container);
    elements.finalP2S2PicksContainer.classList.toggle('hidden', !showS2Container);
    if (showS2Container) {
        renderChronologicalIdList(elements.finalP1S2Picks, state.draft.picks_s2.p1);
        renderChronologicalIdList(elements.finalP2S2Picks, state.draft.picks_s2.p2);
    }

    renderChronologicalIdList(elements.finalP1Bans, state.draft.idBans.p1);
    renderChronologicalIdList(elements.finalP2Bans, state.draft.idBans.p2);
    
    renderBannedEgosDisplay();
    renderTimelineView();
}

function renderTimelineView() {
    // --- PART 1: RENDER THE STICKY ROSTER PANELS ON THE SIDES ---

    // Get the necessary data from the main state object.
    const { draft, participants, roster } = state;

    // Create a single, fast-lookup list of all IDs that were used (picked or banned) during the draft.
    // This will be used to determine which IDs to "gray out" in the roster panels.
    const unavailableIds = new Set([
        ...draft.idBans.p1, ...draft.idBans.p2,
        ...draft.picks.p1, ...draft.picks.p2,
        ...draft.picks_s2.p1, ...draft.picks_s2.p2
    ]);

    // Define a reusable helper function to draw a complete roster panel for one player.
    // This avoids writing the same code twice.
    const renderRoster = (player, container, nameEl) => {
        // Set the title of the panel, e.g., "Player 1's Roster".
        nameEl.textContent = `${participants[player].name}'s Roster`;
        // Clear any old content from the panel before drawing the new roster.
        container.innerHTML = '';
        // Use a document fragment for better performance when adding many elements.
        const fragment = document.createDocumentFragment();
        
        // Get the player's initial roster and sort it so IDs always appear in the same order.
        const sortedRoster = sortIdsByMasterList(roster[player]);
        // The roster is just a list of ID text (slugs), so we convert it into a list of full ID objects.
        const idObjects = sortedRoster.map(id => state.masterIDList.find(item => item.id === id)).filter(Boolean);

        // Loop through each ID in the player's initial roster.
        idObjects.forEach(idData => {
            // Create the HTML element for the ID's image.
            const element = createIdElement(idData, {});
            
            // Check if this ID is in our 'unavailableIds' list.
            if (unavailableIds.has(idData.id)) {
                // If it is, that means it was picked or banned, so we add a special CSS class.
                // The CSS will use this class to make the image look grayed out.
                element.classList.add('unavailable');
            }
            // Add the finished element to our fragment.
            fragment.appendChild(element);
        });
        // Add all the created elements to the webpage in one go.
        container.appendChild(fragment);
    };

    // Call the helper function for both players to draw their roster panels.
    renderRoster('p1', elements.timelineRosterP1, elements.timelineRosterP1Name);
    renderRoster('p2', elements.timelineRosterP2, elements.timelineRosterP2Name);

    // --- PART 2: RENDER THE CENTRAL, GROUPED TIMELINE ---

    // Get the container for the timeline itself.
    const container = elements.timelineView;
    // Clear any timeline content from a previous render.
    container.innerHTML = '';
    // Get the draft history, which contains every pick and ban event.
    const { history } = state.draft;

    if (!history || history.length === 0) {
        container.innerHTML = '<p>No draft history available.</p>';
        return;
    }

    // Logic to group consecutive actions by the same player.
    const groupedHistory = [];
    if (history.length > 0) {
        let currentGroup = {
            player: history[0].player,
            type: history[0].type,
            events: [history[0]]
        };
        for (let i = 1; i < history.length; i++) {
            const event = history[i];
            if (event.player === currentGroup.player && event.type === currentGroup.type) {
                currentGroup.events.push(event);
            } else {
                groupedHistory.push(currentGroup);
                currentGroup = {
                    player: event.player,
                    type: event.type,
                    events: [event]
                };
            }
        }
        groupedHistory.push(currentGroup);
    }

    // Create the main timeline container element with its center line.
    const timelineContainer = document.createElement('div');
    timelineContainer.className = 'timeline-container';

    // Loop over the new 'groupedHistory' array instead of the raw event history.
    groupedHistory.forEach(group => {
        const { player, type, events } = group;
        const isBan = type.includes('BAN');

        const eventElement = document.createElement('div');
        eventElement.className = `timeline-event ${player}`;

        const card = document.createElement('div');
        card.className = `event-card ${isBan ? 'ban' : 'pick'}`;

        const actionText = type.replace('_', ' ');
        const countText = events.length > 1 ? ` (x${events.length})` : '';

        const eventsContainer = document.createElement('div');
        eventsContainer.className = 'event-group-container';

        // Loop through all the events within this group.
        events.forEach(event => {
            const { targetId } = event;
            let targetData = isBan && type.includes('EGO')
                ? state.masterEGOList.find(e => e.id === targetId)
                : state.masterIDList.find(i => i.id === targetId);

            if (!targetData) return;

            const eventBody = document.createElement('div');
            eventBody.className = 'event-body';
            
            let imageHTML = isBan && type.includes('EGO')
                ? `<i class="fas fa-shield-alt fa-2x" style="width: 60px; text-align: center;"></i>`
                : `<img src="/uploads/${targetData.imageFile}" alt="${targetData.name}">`;

            eventBody.innerHTML = `
                ${imageHTML}
                <span class="target-name">${targetData.name}</span>
            `;
            eventsContainer.appendChild(eventBody);
        });

        // Build the final card with its header and the container of events.
        card.innerHTML = `
            <div class="event-header">
                <span class="player-name">${state.participants[player].name}</span>
                <span class="action-type">${actionText}${countText}</span>
            </div>
        `;
        card.appendChild(eventsContainer);
        eventElement.appendChild(card);
        timelineContainer.appendChild(eventElement);
    });

    // Add the finished timeline to the page.
    container.appendChild(timelineContainer);
}

function updateRosterPhaseReadyButtonState() {
    if (state.draft.phase === 'roster') {
        const { rosterSize } = state.draft;
        const p1Ready = state.participants.p1.ready && state.roster.p1.length === rosterSize;
        const p2Ready = state.participants.p2.ready && state.roster.p2.length === rosterSize;
        if (state.userRole === 'ref') {
            elements.startCoinFlip.disabled = !(p1Ready && p2Ready);
        }
    }
}

function renderRosterBuilder() {
    const sinnerNav = elements.builderSinnerNav;
    sinnerNav.innerHTML = '';
    
    SINNER_ORDER.forEach(sinnerName => {
        const btn = document.createElement('button');
        btn.className = 'btn sinner-nav-btn';
        btn.textContent = sinnerName;
        if (sinnerName === state.builderSelectedSinner) {
            btn.classList.add('selected');
        }
        btn.addEventListener('click', () => {
            state.builderSelectedSinner = sinnerName;
            renderRosterBuilder();
        });
        sinnerNav.appendChild(btn);
    });

    const sinnerIDs = state.idsBySinner[state.builderSelectedSinner];
    const filteredSinnerIDs = filterIDs(sinnerIDs, state.filters, { builderPhase: true });
    renderIDList(elements.builderIdPool, filteredSinnerIDs, {
        selectionSet: state.builderRoster, 
        clickHandler: toggleBuilderIdSelection
    });

    const sortedSelectedRoster = [...state.builderRoster].sort((a, b) => {
        const indexA = state.masterIDList.findIndex(item => item.id === a);
        const indexB = state.masterIDList.findIndex(item => item.id === b);
        return indexA - indexB;
    });
    const selectedObjects = sortedSelectedRoster.map(id => state.masterIDList.find(item => item.id === id)).filter(Boolean);
    
    renderGroupedView(elements.builderSelectedRoster, selectedObjects, { 
        selectionSet: state.builderRoster, 
        clickHandler: toggleBuilderIdSelection 
    });

    elements.builderCounter.textContent = state.builderRoster.length;
    elements.builderRosterSize.textContent = state.builderRosterSize;
    
    if(state.builderRoster.length === state.builderRosterSize) {
        const code = generateRosterCode();
        elements.builderRosterCodeDisplay.textContent = code || "Error generating code.";
        elements.builderCopyCode.disabled = !code;
    } else {
        elements.builderRosterCodeDisplay.textContent = `Select ${state.builderRosterSize - state.builderRoster.length} more IDs to generate a code.`;
        elements.builderCopyCode.disabled = true;
    }
}

function updateTimerUI() {
    const { timer, currentPlayer } = state.draft;
    elements.refTimerControl.classList.toggle('hidden', !timer.enabled || state.userRole !== 'ref');
    elements.phaseTimer.classList.toggle('hidden', !timer.enabled);

    elements.phaseTimer.classList.toggle('reserve-active', timer.isReserve);

    if (!timer.enabled || !timer.running) {
        elements.phaseTimer.textContent = "--:--";
        if(state.timerInterval) clearInterval(state.timerInterval);
        state.timerInterval = null;
        state.lastCountdownSecond = null; // Reset countdown tracking when timer stops
        return;
    }

    if (!state.timerInterval) {
        state.timerInterval = setInterval(updateTimerUI, TIMING.TIMER_UPDATE_INTERVAL);
    }

    const remaining = Math.max(0, Math.round((timer.endTime - Date.now()) / 1000)); // Calculate seconds directly
    const minutes = Math.floor(remaining / 60);
    const seconds = remaining % 60;
    elements.phaseTimer.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

    // Play countdown sounds when current user has 5 seconds or less remaining
    const isCurrentPlayersTurn = state.userRole === currentPlayer;
    
    if (isCurrentPlayersTurn && remaining <= 5 && remaining > 0) {
        playCountdownSound(remaining);
    }
}

// Function to play countdown sounds
function playCountdownSound(secondsRemaining) {
    // Prevent playing the same sound multiple times in the same second
    if (state.lastCountdownSecond === secondsRemaining) {
        return;
    }
    
    state.lastCountdownSecond = secondsRemaining;
    
    try {
        // Create audio context for beep sounds
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Resume audio context if it's suspended (browser policy)
        if (audioContext.state === 'suspended') {
            audioContext.resume().then(() => {
                playBeep(audioContext, secondsRemaining);
            });
        } else {
            playBeep(audioContext, secondsRemaining);
        }
    } catch (error) {
        console.error('Audio context error:', error);
        // Fallback: try HTML5 audio with data URI
        playFallbackBeep(secondsRemaining);
    }
}

function playBeep(audioContext, secondsRemaining) {
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    // Single urgent beep sound - consistent frequency
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
    oscillator.type = 'square';
    
    // Volume and duration settings for a crisp urgent beep
    gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.15);
}

function playFallbackBeep(secondsRemaining) {
    // Generate a simple beep using data URI
    const audioData = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmAbBj2Y2+/XfS4EOIX+/L1mHgU7k9H0wn0uBSGG5P+pYhQKT6jc84ZhNAU7k9H0wn0uBS'; 
    try {
        const audio = new Audio(audioData);
        audio.volume = 0.1;
        audio.play().catch(e => console.log('Fallback audio failed:', e));
    } catch (error) {
        console.error('Fallback audio error:', error);
    }
}

// Function to play turn notification sounds
function playTurnNotificationSound(phase) {
    try {
        // Create audio context for notification sounds
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Resume audio context if it's suspended (browser policy)
        if (audioContext.state === 'suspended') {
            audioContext.resume().then(() => {
                playTurnBeep(audioContext, phase);
            });
        } else {
            playTurnBeep(audioContext, phase);
        }
    } catch (error) {
        console.error('Turn notification audio error:', error);
        // Fallback: try HTML5 audio
        playFallbackTurnBeep(phase);
    }
}

function playTurnBeep(audioContext, phase) {
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    // Different sounds for different phases
    if (phase.includes('ban') || phase === 'egoBan') {
        // Ban phases: Lower, more serious tone (double beep)
        oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
        oscillator.frequency.setValueAtTime(500, audioContext.currentTime + 0.15);
        oscillator.type = 'sine';
        gainNode.gain.setValueAtTime(0.15, audioContext.currentTime);
        gainNode.gain.setValueAtTime(0.05, audioContext.currentTime + 0.1);
        gainNode.gain.setValueAtTime(0.15, audioContext.currentTime + 0.15);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.4);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.4);
    } else {
        // Pick phases: Higher, more pleasant tone (single beep)
        oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
        oscillator.type = 'sine';
        gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.25);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.25);
    }
}

function playFallbackTurnBeep(phase) {
    // Simple fallback beep
    try {
        const audioData = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmAbBj2Y2+/XfS4EOIX+/L1mHgU7k9H0wn0uBSGG5P+pYhQKT6jc84ZhNAU7k9H0wn0uBS'; 
        const audio = new Audio(audioData);
        audio.volume = 0.15;
        audio.play().catch(e => console.log('Turn notification audio failed:', e));
    } catch (error) {
        console.error('Fallback turn notification audio error:', error);
    }
}


function showRoleSelectionModal(lobby) {
    state.joinTarget.lobbyCode = lobby.code;
    elements.roleModalLobbyCode.textContent = lobby.code;
    
    const roleOptionsContainer = elements.modalRoleOptions;
    roleOptionsContainer.innerHTML = '';

    const roles = {
        p1: { icon: 'fa-user', text: 'Player 1' },
        p2: { icon: 'fa-user', text: 'Player 2' },
        ref: { icon: 'fa-star', text: 'Referee' }
    };

    Object.entries(roles).forEach(([role, details]) => {
        const isTaken = lobby.participants[role].status === 'connected';
        const option = document.createElement('div');
        option.className = 'role-option';
        option.dataset.role = role;
        option.innerHTML = `<i class="fas ${details.icon}"></i><div>${details.text}</div>`;
        if (isTaken) {
            option.classList.add('disabled');
        } else {
            option.addEventListener('click', () => {
                roleOptionsContainer.querySelectorAll('.role-option').forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                state.joinTarget.role = role;
                elements.confirmJoinBtn.disabled = false;
            });
        }
        roleOptionsContainer.appendChild(option);
    });

    elements.roleSelectionModal.classList.remove('hidden');
}


// ======================
// CLIENT ACTIONS & EVENT HANDLERS
// ======================
function toggleIDSelection(player, id) {
    sendMessage({ type: 'rosterSelect', lobbyCode: state.lobbyCode, player, id });
}

function setPlayerRoster(player, roster) {
    sendMessage({ type: 'rosterSet', lobbyCode: state.lobbyCode, player, roster });
}

function hoverEgoToBan(egoId) {
    sendMessage({ type: 'draftHover', lobbyCode: state.lobbyCode, payload: { id: egoId, type: 'ego' } });
}

function hoverDraftID(id) {
    sendMessage({ type: 'draftHover', lobbyCode: state.lobbyCode, payload: { id, type: 'id' } });
}

function confirmDraftAction(type) {
     sendMessage({ type: 'draftConfirm', lobbyCode: state.lobbyCode, payload: { type } });
}

function toggleBuilderIdSelection(id) {
    const index = state.builderRoster.indexOf(id);
    if (index > -1) {
        state.builderRoster.splice(index, 1);
    } else {
        if (state.builderRoster.length < state.builderRosterSize) {
            state.builderRoster.push(id);
        } else {
            showNotification(`You can only select ${state.builderRosterSize} IDs.`);
        }
    }
    renderRosterBuilder();
}

// ======================
// STATE HANDLERS
// ======================
function handleLobbyCreated(message) {
    handleLobbyJoined(message);
}

function handleLobbyJoined(message) {
    if (rejoinTimeout) clearTimeout(rejoinTimeout);
    elements.roleSelectionModal.classList.add('hidden');
    elements.rejoinOverlay.style.display = 'none';

    state.lobbyCode = message.lobbyCode || message.code;
    state.userRole = message.role;
    state.rejoinToken = message.rejoinToken;

    if (state.rejoinToken) {
        try {
            localStorage.setItem('limbusDraftSession', JSON.stringify({
                lobbyCode: state.lobbyCode,
                userRole: state.userRole,
                rejoinToken: state.rejoinToken
            }));
        } catch (error) {
            console.error('Failed to save session to localStorage:', error);
            showNotification('Warning: Session could not be saved for auto-rejoin', true);
        }
    }

    // Start keep-alive system when joining a lobby
    startKeepAlive();

    handleStateUpdate(message);
    showNotification(`Joined lobby as ${state.participants[state.userRole].name}`);
}

function handleStateUpdate(message) {
    // Check for role swapping before updating state
    const wasUserRole = state.userRole;
    const newUserRole = message.newRole || state.userRole;
    const rolesSwapped = message.state?.rolesSwapped || false;
    
    Object.assign(state.participants, message.state.participants);
    Object.assign(state.roster, message.state.roster);
    
    // Deep merge the draft state to ensure new properties like banPools are properly copied
    if (message.state.draft) {
        Object.keys(message.state.draft).forEach(key => {
            if (typeof message.state.draft[key] === 'object' && message.state.draft[key] !== null && !Array.isArray(message.state.draft[key])) {
                // For nested objects, ensure the property exists before assigning
                if (!state.draft[key]) state.draft[key] = {};
                Object.assign(state.draft[key], message.state.draft[key]);
            } else {
                // For primitive values and arrays, direct assignment
                state.draft[key] = message.state.draft[key];
            }
        });
    }
    
    // Handle role swapping notification
    if (rolesSwapped && wasUserRole && wasUserRole !== newUserRole) {
        showSideChangeNotification(wasUserRole, newUserRole);
    }
    
    elements.lobbyCodeDisplay.textContent = state.lobbyCode;
    refreshInterfaceBasedOnGameState();
}

// ======================
// INITIALIZATION
// ======================
function setupFilterBar(barId, filterStateObject) {
    const bar = document.getElementById(barId);
    if (!bar) return;

    const update = () => {
        if (state.currentView === 'lobbyView') {
            if (state.draft.phase === 'roster') filterAndRenderRosterSelection();
            else updateDraftInstructions();
        } else if (state.currentView === 'rosterBuilderPage') {
            renderRosterBuilder();
        }
    };
    
    // Create debounced version for search input
    const debouncedUpdate = createDebounceFunction(update, 300);

    bar.addEventListener('input', (e) => {
        if (e.target.classList.contains('roster-search-input')) {
            filterStateObject.rosterSearch = e.target.value;
            debouncedUpdate(); // Use debounced version for search
        }
    });
    bar.addEventListener('change', (e) => {
        const filterType = e.target.dataset.filter;
        if (filterType) {
            filterStateObject[filterType] = e.target.value;
            update();
        }
    });
    bar.addEventListener('click', (e) => {
        if (e.target.closest('.reset-filters-btn')) {
            Object.keys(filterStateObject).forEach(key => filterStateObject[key] = "");
            bar.querySelectorAll('input, select').forEach(el => el.value = "");
            update();
        }
    });
}

function setupEventListeners() {
    // Main Page
    elements.goToBuilder.addEventListener('click', () => {
        state.builderSelectedSinner = "Yi Sang";
        switchView('rosterBuilderPage');
        renderRosterBuilder();
    });
    elements.showRulesBtn.addEventListener('click', () => elements.rulesModal.classList.remove('hidden'));
    elements.closeRulesBtn.addEventListener('click', () => elements.rulesModal.classList.add('hidden'));

    // Lobby code click-to-copy functionality
    elements.lobbyCodeDisplay.addEventListener('click', async () => {
        try {
            await navigator.clipboard.writeText(state.lobbyCode);
            const originalText = elements.lobbyCodeDisplay.textContent;
            elements.lobbyCodeDisplay.textContent = 'COPIED!';
            elements.lobbyCodeDisplay.style.color = '#4CAF50';
            setTimeout(() => {
                elements.lobbyCodeDisplay.textContent = originalText;
                elements.lobbyCodeDisplay.style.color = '';
            }, 800);
        } catch (err) {
            const textArea = document.createElement('textarea');
            textArea.value = state.lobbyCode;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            const originalText = elements.lobbyCodeDisplay.textContent;
            elements.lobbyCodeDisplay.textContent = 'COPIED!';
            elements.lobbyCodeDisplay.style.color = '#4CAF50';
            setTimeout(() => {
                elements.lobbyCodeDisplay.textContent = originalText;
                elements.lobbyCodeDisplay.style.color = '';
            }, 800);
        }
    });

    // NOTE: The original 'createLobbyBtn' and 'enterLobbyByCode' listeners have been removed from here.

    elements.closeRoleModalBtn.addEventListener('click', () => elements.roleSelectionModal.classList.add('hidden'));
    elements.confirmJoinBtn.addEventListener('click', () => {
        const playerName = validateAndTrimInput(elements.playerNameInput.value, 'your name');
        if (!playerName) {
            elements.roleSelectionModal.classList.add('hidden');
            return;
        }
        if (state.joinTarget.lobbyCode && state.joinTarget.role) {
            sendMessage({
                type: 'joinLobby',
                lobbyCode: state.joinTarget.lobbyCode,
                role: state.joinTarget.role,
                name: playerName
            });
        }
    });
    
    const cancelRejoinAction = () => {
        if (rejoinTimeout) clearTimeout(rejoinTimeout);
        try {
            localStorage.removeItem('limbusDraftSession');
        } catch (error) {
            console.error('Failed to clear session storage:', error);
        }
        elements.rejoinOverlay.style.display = 'none';
        if (state.socket && state.socket.readyState !== WebSocket.CLOSED) {
            state.socket.close();
        }
        setTimeout(connectWebSocket, TIMING.WEBSOCKET_RETRY_DELAY);
        showNotification("Rejoin attempt cancelled.");
    };
    elements.cancelRejoinBtn.addEventListener('click', cancelRejoinAction);

    const clearSessionAndReload = () => {
        stopKeepAlive();
        try {
            localStorage.removeItem('limbusDraftSession');
        } catch (error) {
            console.error('Failed to clear session storage:', error);
        }
        window.location.reload();
    };
    elements.restartDraft.addEventListener('click', clearSessionAndReload);
    
    // Lobby Roster Controls
    ['p1', 'p2'].forEach(player => {
        elements[`${player}Random`].addEventListener('click', () => validateUserPermission(state.userRole, player) && sendMessage({ type: 'rosterRandomize', lobbyCode: state.lobbyCode, player }));
        elements[`${player}Clear`].addEventListener('click', () => validateUserPermission(state.userRole, player) && sendMessage({ type: 'rosterClear', lobbyCode: state.lobbyCode, player }));
        elements[`${player}Ready`].addEventListener('click', () => {
            if (validateUserPermission(state.userRole, player)) {
                if (!state.participants[player].ready && !validateRosterSize(state.roster[player], state.draft.rosterSize, 'ready up')) {
                    return;
                }
                sendMessage({ type: 'updateReady', lobbyCode: state.lobbyCode, player });
            }
        });
        elements[`${player}RosterLoad`].addEventListener('click', () => {
            if (validateUserPermission(state.userRole, player)) {
                const code = elements[`${player}RosterCodeInput`].value.trim();
                const roster = validateRosterCodeSize(code, state.draft.rosterSize);
                if (roster) {
                    setPlayerRoster(player, roster);
                    showNotification("Roster loaded successfully!");
                }
            }
        });
    });
    
    // Roster Builder Controls
    elements.builderRosterSizeSelector.addEventListener('click', (e) => {
        const button = e.target.closest('button');
        if (button && button.dataset.size) {
            const newSize = parseInt(button.dataset.size, 10);
            if (newSize !== state.builderRosterSize) {
                state.builderRosterSize = newSize;
                state.builderRoster = [];
                elements.builderRosterSizeSelector.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                renderRosterBuilder();
                setupAdvancedRandomUI();
            }
        }
    });
    elements.builderRandom.addEventListener('click', () => {
        const shuffled = [...state.builderMasterIDList].sort(() => 0.5 - Math.random());
        state.builderRoster = shuffled.slice(0, state.builderRosterSize).map(id => id.id);
        renderRosterBuilder();
    });
    elements.builderClear.addEventListener('click', () => {
        state.builderRoster = [];
        renderRosterBuilder();
    });
    elements.builderCopyCode.addEventListener('click', () => {
        const code = elements.builderRosterCodeDisplay.textContent;
        if (!navigator.clipboard) {
            showNotification("Clipboard not supported. Please copy manually.", true);
            return;
        }
        navigator.clipboard.writeText(code).then(() => {
            showNotification("Roster code copied to clipboard!");
        }).catch((error) => {
            console.error('Clipboard write failed:', error);
            showNotification("Failed to copy code. Please copy manually.", true);
        });
    });
    elements.builderLoadCode.addEventListener('click', () => {
        const code = validateAndTrimInput(elements.builderLoadCodeInput.value, 'roster code');
        if (code) {
            const roster = loadRosterFromCode(code);
            if (roster) {
                state.builderRoster = roster;
                state.builderRosterSize = roster.length;
                elements.builderRosterSizeSelector.querySelectorAll('button').forEach(btn => {
                    btn.classList.toggle('active', parseInt(btn.dataset.size) === state.builderRosterSize);
                });
                renderRosterBuilder();
                setupAdvancedRandomUI();
                showNotification(`Roster for ${roster.length} IDs loaded successfully!`);
            }
        }
    });
    elements.toggleAdvancedRandom.addEventListener('click', () => {
        elements.advancedRandomOptions.classList.toggle('hidden');
    });
    elements.builderAdvancedRandom.addEventListener('click', generateAdvancedRandomRoster);

    // EGO Search with debouncing
    const debouncedRenderEgoBanPhase = createDebounceFunction(renderEgoBanPhase, 300);
    elements.egoSearchInput.addEventListener('input', (e) => {
        state.egoSearch = e.target.value;
        debouncedRenderEgoBanPhase();
    });

    // Korean Language Toggle (Client-side only)
    if (elements.koreanToggle) {
        // Set initial state from localStorage
        elements.koreanToggle.checked = state.koreanMode;
        
        elements.koreanToggle.addEventListener('change', (e) => {
            state.koreanMode = e.target.checked;
            saveKoreanModeToStorage(state.koreanMode);
            
            // Re-render any visible ego lists to update names
            if (state.currentView === 'draftPhase' && state.draft.phase === 'egoBan') {
                renderEgoBanPhase();
            }
            // Re-render banned EGOs display if visible
            renderBannedEgosDisplay();
            // Re-render completed view if visible
            if (state.currentView === 'completedView') {
                renderCompletedView();
            }
            // Re-render draft instructions to update any EGO names there
            if (state.currentView === 'draftPhase') {
                updateDraftInstructions();
            }
            showNotification(`EGO names switched to ${state.koreanMode ? 'Korean' : 'English'}`);
        });
    }

    // Draft controls
    elements.startCoinFlip.addEventListener('click', () => sendMessage({ type: 'startCoinFlip', lobbyCode: state.lobbyCode }));
    elements.goFirstBtn.addEventListener('click', () => sendMessage({ type: 'setTurnOrder', lobbyCode: state.lobbyCode, choice: 'first' }));
    elements.goSecondBtn.addEventListener('click', () => sendMessage({ type: 'setTurnOrder', lobbyCode: state.lobbyCode, choice: 'second' }));
    elements.confirmEgoBans.addEventListener('click', () => sendMessage({ type: 'draftControl', lobbyCode: state.lobbyCode, action: 'confirmEgoBans' }));
    elements.completeDraft.addEventListener('click', () => sendMessage({ type: 'draftControl', lobbyCode: state.lobbyCode, action: 'complete' }));
    elements.confirmSelectionId.addEventListener('click', () => confirmDraftAction('id'));
    elements.confirmSelectionEgo.addEventListener('click', () => confirmDraftAction('ego'));
    elements.refTimerControl.addEventListener('click', () => sendMessage({ type: 'timerControl', lobbyCode: state.lobbyCode, action: 'togglePause' }));
    
    // Hide/show lobby code
    elements.toggleCodeVisibility.addEventListener('click', () => {
        const codeDisplay = elements.lobbyCodeDisplay;
        const icon = elements.toggleCodeVisibility.querySelector('i');
        codeDisplay.classList.toggle('hidden');
        if (codeDisplay.classList.contains('hidden')) {
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    });

    elements.globalBackToMain.addEventListener('click', () => {
        // Re-using the existing function is the cleanest way to reset everything.
        clearSessionAndReload(); 
    });

    // Timeline Toggle
    elements.viewToggleSwitch.addEventListener('change', (e) => {
        const isTimelineView = e.target.checked;
        elements.finalRostersView.classList.toggle('hidden', isTimelineView);
        elements.timelineWrapper.classList.toggle('hidden', !isTimelineView);
        elements.viewToggleLabel.textContent = isTimelineView ? 'View Final Rosters' : 'View Timeline';
    });

    // Universal Tooltip Logic for ID and EGO
    let tooltipTimer = null;
    function getTooltipData(element) {
        const idSlug = element.dataset.id;
        let data = state.masterIDList.find(id => id.id === idSlug);
        if (data) return { name: data.name };
        data = state.masterEGOList && state.masterEGOList.find(ego => ego.id === idSlug);
        if (data) return { name: data.name };
        return { name: element.textContent || '' };
    }
    const showTooltip = (element) => {
        if (getTooltipElement()) return;
        const tooltipData = getTooltipData(element);
        if (!tooltipData || !tooltipData.name) return;
        const tooltip = document.createElement('div');
        tooltip.id = 'id-tooltip';
        tooltip.textContent = tooltipData.name;
        tooltip.style.position = 'fixed';
        tooltip.style.top = '-9999px';
        tooltip.style.left = '-9999px';
        tooltip.style.opacity = '0';
        document.body.appendChild(tooltip);
        elements.idTooltip = tooltip;
        requestAnimationFrame(() => {
            const rect = element.getBoundingClientRect();
            const tooltipRect = tooltip.getBoundingClientRect();
            let top = rect.top - tooltipRect.height - 8;
            let left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);
            const margin = 8;
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            if (top < margin) {
                top = rect.bottom + 8;
            }
            if (top + tooltipRect.height > viewportHeight - margin && rect.top - tooltipRect.height - 8 >= margin) {
                top = rect.top - tooltipRect.height - 8;
            }
            if (left < margin) {
                left = margin;
            } else if (left + tooltipRect.width > viewportWidth - margin) {
                left = viewportWidth - tooltipRect.width - margin;
            }
            left = Math.max(margin, Math.min(left, viewportWidth - tooltipRect.width - margin));
            top = Math.max(margin, Math.min(top, viewportHeight - tooltipRect.height - margin));
            tooltip.style.top = `${top}px`;
            tooltip.style.left = `${left}px`;
            tooltip.style.opacity = '1';
        });
    };
    const hideTooltip = () => {
        clearTimeout(tooltipTimer);
        const tooltip = getTooltipElement();
        if (tooltip) {
            tooltip.remove();
            elements.idTooltip = null;
        }
    };
    document.body.addEventListener('mouseover', (e) => {
        const targetElement = e.target.closest('.id-item, .ego-item');
        if (targetElement) {
            clearTimeout(tooltipTimer);
            tooltipTimer = setTimeout(() => showTooltip(targetElement), TIMING.TOOLTIP_SHOW_DELAY);
        }
    });
    document.body.addEventListener('mouseout', (e) => {
        const targetElement = e.target.closest('.id-item, .ego-item');
        if (targetElement) {
            hideTooltip();
        }
    });
    window.addEventListener('scroll', hideTooltip, true);
    
    // --- START: NEW LISTENERS FOR ANALYZER & MENU ---
    elements.goToAnalyzer.addEventListener('click', () => switchView('analyzerPage'));

    // Handle the new main menu buttons
    elements.createLobbyMainBtn.addEventListener('click', () => {
        const playerName = validateAndTrimInput(elements.playerNameInput.value, 'your name');
        if (!playerName) {
            return; // Stop if name is empty
        }
        const options = {
            name: playerName,
            draftLogic: elements.draftLogicSelect.value,
            matchType: elements.matchTypeSelect.value,
            timerEnabled: elements.timerToggle.value === 'true',
            rosterSize: elements.rosterSizeSelect.value
        };
        sendMessage({ type: 'createLobby', options });
    });
    elements.joinLobbyMainBtn.addEventListener('click', () => {
        const playerName = validateAndTrimInput(elements.playerNameInput.value, 'your name');
        if (!playerName) {
            return; // Stop if name is empty
        }
        const lobbyCode = validateAndTrimInput(elements.lobbyCodeInputMain.value, 'lobby code');
        if (lobbyCode) {
            sendMessage({ type: 'getLobbyInfo', lobbyCode: lobbyCode.toUpperCase() });
        }
    });

    // Event listener for the new EXPORT button
    elements.exportDraftBtn.addEventListener('click', () => {
        try {
            const draftData = {
                participants: {
                    p1: { name: state.participants.p1.name },
                    p2: { name: state.participants.p2.name }
                },
                roster: state.roster,
                draft: state.draft
            };
            const jsonString = JSON.stringify(draftData);
            const exportCode = btoa(jsonString); // Encode to Base64
            
            navigator.clipboard.writeText(exportCode).then(() => {
                showNotification("Draft export code copied to clipboard!");
            }).catch(err => {
                console.error('Failed to copy export code:', err);
                showNotification("Failed to copy. Please copy the code manually from the console.", true);
                console.log("EXPORT CODE:", exportCode);
            });
        } catch (error) {
            console.error("Error exporting draft:", error);
            showNotification("Could not generate export code.", true);
        }
    });

    // Event listener for the new ANALYZE button
    elements.analyzeDraftBtn.addEventListener('click', () => {
        const importCode = elements.draftImportCode.value.trim();
        if (!importCode) {
            showNotification("Please paste an export code.", true);
            return;
        }
        try {
            const jsonString = atob(importCode); // Decode from Base64
            const importedData = JSON.parse(jsonString);

            // Validate the imported data structure
            if (!importedData.participants || !importedData.roster || !importedData.draft) {
                throw new Error("Invalid or corrupted draft data.");
            }

            // Update the global state with the imported data
            state.participants.p1.name = importedData.participants.p1.name;
            state.participants.p2.name = importedData.participants.p2.name;
            state.roster = importedData.roster;
            state.draft = importedData.draft;
            
            // Switch to the completed view and render it with the new data
            switchView('completedView');
            renderCompletedView();
            showNotification("Draft analysis loaded successfully!");

        } catch (error) {
            console.error("Error analyzing draft code:", error);
            showNotification("Invalid or corrupted export code. Could not load draft.", true);
        }
    });
}

function createFilterBarHTML(options = {}) {
    const { showSinnerFilter = true } = options;
    const sinnerFilterHTML = `
        <div class="filter-group">
            <label class="filter-label">Filter by Sinner:</label>
            <select class="sinner-filter" data-filter="sinner">
                <option value="">All Sinners</option>
                <option value="Yi Sang">Yi Sang</option><option value="Faust">Faust</option><option value="Don Quixote">Don Quixote</option>
                <option value="Ryōshū">Ryōshū</option><option value="Meursault">Meursault</option><option value="Hong Lu">Hong Lu</option>
                <option value="Heathcliff">Heathcliff</option><option value="Ishmael">Ishmael</option><option value="Rodion">Rodion</option>
                <option value="Sinclair">Sinclair</option><option value="Outis">Outis</option><option value="Gregor">Gregor</option>
            </select>
        </div>
    `;

    return `
        <div class="filter-group">
            <label class="filter-label">Search by Name:</label>
            <input type="text" class="roster-search-input" placeholder="e.g. LCB Sinner...">
        </div>
        ${showSinnerFilter ? sinnerFilterHTML : ''}
        <div class="filter-group">
            <label class="filter-label">Filter by Sin Affinity:</label>
            <select class="sinAffinity-filter" data-filter="sinAffinity">
                <option value="">All Affinities</option>
                <option value="Gloom">Gloom</option><option value="Lust">Lust</option><option value="Sloth">Sloth</option>
                <option value="Wrath">Wrath</option><option value="Gluttony">Gluttony</option><option value="Envy">Envy</option><option value="Pride">Pride</option>
            </select>
        </div>
        <div class="filter-group">
            <label class="filter-label">Filter by Keyword:</label>
            <select class="keyword-filter" data-filter="keyword">
                <option value="">All Keywords</option>
                <option value="Sinking">Sinking</option><option value="Rupture">Rupture</option><option value="Discard">Discard</option>
                <option value="Tremor">Tremor</option><option value="Bleed">Bleed</option><option value="Poise">Poise</option>
                <option value="Aggro">Aggro</option><option value="Charge">Charge</option><option value="Burn">Burn</option><option value="Ammo">Ammo</option>
            </select>
        </div>
        <div class="filter-buttons">
            <button class="btn reset-filters-btn"><i class="fas fa-sync"></i> Reset</button>
        </div>
    `;
}

function setupAdvancedRandomUI() {
    const container = elements.sinnerSlidersContainer;
    container.innerHTML = '';
    clearDynamicElementCache(); // Clear cached slider elements
    const rosterSize = state.builderRosterSize;

    const updateTotals = () => {
        let totalMin = 0, totalMax = 0;
        SINNER_ORDER.forEach(sinner => {
            const sliders = getSliderElements(sinner);
            totalMin += parseInt(sliders.minSlider?.value || 0, 10);
            totalMax += parseInt(sliders.maxSlider?.value || 0, 10);
        });
        elements.totalMinDisplay.textContent = totalMin;
        elements.totalMaxDisplay.textContent = totalMax;
        elements.advancedRandomRosterSize.forEach(el => el.textContent = rosterSize);
        const possible = totalMin <= rosterSize && totalMax >= rosterSize;
        elements.builderAdvancedRandom.disabled = !possible;
        elements.advancedRandomSummary.style.color = possible ? 'var(--text)' : 'var(--primary)';
    };

    SINNER_ORDER.forEach(sinner => {
        const group = document.createElement('div');
        group.className = 'sinner-slider-group';
        const maxIDs = state.idsBySinner[sinner]?.length || 0;

        group.innerHTML = `
            <label>${sinner}</label>
            <div class="slider-container">
                <div class="slider-row">
                    <span>Min</span>
                    <input type="range" id="slider-${sinner}-min" min="0" max="${maxIDs}" value="0">
                    <span class="slider-value" id="slider-val-${sinner}-min">0</span>
                </div>
                <div class="slider-row">
                    <span>Max</span>
                    <input type="range" id="slider-${sinner}-max" min="0" max="${maxIDs}" value="${maxIDs}">
                    <span class="slider-value" id="slider-val-${sinner}-max">${maxIDs}</span>
                </div>
            </div>
        `;
        container.appendChild(group);

        const sliders = getSliderElements(sinner);
        const { minSlider, maxSlider, minVal, maxVal } = sliders;

        minSlider.addEventListener('input', () => {
            minVal.textContent = minSlider.value;
            if (parseInt(minSlider.value) > parseInt(maxSlider.value)) {
                maxSlider.value = minSlider.value;
                maxVal.textContent = maxSlider.value;
            }
            updateTotals();
        });
        maxSlider.addEventListener('input', () => {
            maxVal.textContent = maxSlider.value;
             if (parseInt(maxSlider.value) < parseInt(minSlider.value)) {
                minSlider.value = maxSlider.value;
                minVal.textContent = minSlider.value;
            }
            updateTotals();
        });
    });
    updateTotals();
}

function generateAdvancedRandomRoster() {
    const constraints = {};
    let totalMin = 0;
    let totalMax = 0;
    const rosterSize = state.builderRosterSize;

    SINNER_ORDER.forEach(sinner => {
        const sliders = getSliderElements(sinner);
        const min = parseInt(sliders.minSlider?.value || 0, 10);
        const max = parseInt(sliders.maxSlider?.value || 0, 10);
        constraints[sinner] = { min, max, available: state.idsBySinner[sinner] || [] };
        totalMin += min;
        totalMax += max;
    });

    if (totalMin > rosterSize || totalMax < rosterSize) {
        showNotification(`Constraints are impossible. Total Min must be <= ${rosterSize} and Total Max must be >= ${rosterSize}.`, true);
        return;
    }

    let roster = [];
    let availableIDs = [...state.builderMasterIDList];
    
    for (const sinner in constraints) {
        const { min, available } = constraints[sinner];
        if (available.length < min) {
            showNotification(`Not enough IDs for ${sinner} to meet the minimum of ${min}.`, true);
            return;
        }
        const shuffled = [...available].sort(() => 0.5 - Math.random());
        const toAdd = shuffled.slice(0, min);
        roster.push(...toAdd);
    }

    const rosterSlugs = new Set(roster.map(id => id.id));
    availableIDs = availableIDs.filter(id => !rosterSlugs.has(id.id));

    let attempts = 0;
    while (roster.length < rosterSize && attempts < GAME_CONFIG.MAX_GENERATION_ATTEMPTS) {
        if (availableIDs.length === 0) break;

        const randomIndex = Math.floor(Math.random() * availableIDs.length);
        const candidate = availableIDs[randomIndex];
        
        const sinnerCount = roster.filter(id => id.sinner === candidate.sinner).length;
        if (sinnerCount < constraints[candidate.sinner].max) {
            roster.push(candidate);
            rosterSlugs.add(candidate.id);
            availableIDs.splice(randomIndex, 1);
        }
        attempts++;
    }

    if (roster.length === rosterSize) {
        state.builderRoster = roster.map(id => id.id);
        renderRosterBuilder();
        showNotification("Advanced random roster generated!");
    } else {
        showNotification("Could not generate a valid roster with the given constraints. Try relaxing them.", true);
    }
}

function cacheDOMElements() {
     elements = {
        // Pages
        mainPage: document.getElementById('main-page'),
        lobbyView: document.getElementById('lobby-view'),
        rosterBuilderPage: document.getElementById('roster-builder-page'),
        completedView: document.getElementById('completed-view'),
        rejoinOverlay: document.getElementById('rejoin-overlay'),
        cancelRejoinBtn: document.getElementById('cancel-rejoin-btn'),

        // Main Page
        createLobbyBtn: document.getElementById('create-lobby'),
        goToBuilder: document.getElementById('go-to-builder'),
        playerNameInput: document.getElementById('player-name'),
        draftLogicSelect: document.getElementById('draft-logic-select'),
        matchTypeSelect: document.getElementById('match-type-select'),
        timerToggle: document.getElementById('timer-toggle'),
        rosterSizeSelect: document.getElementById('roster-size-select'),
        koreanToggle: document.getElementById('korean-display-toggle'),
        showRulesBtn: document.getElementById('show-rules-btn'),
        lobbyCodeInput: document.getElementById('lobby-code-input'),
        enterLobbyByCode: document.getElementById('enter-lobby-by-code'),
        builderRosterDescription: document.getElementById('builder-roster-description'),

        // Modals
        rulesModal: document.getElementById('rules-modal'),
        closeRulesBtn: document.getElementById('close-rules-btn'),
        roleSelectionModal: document.getElementById('role-selection-modal'),
        closeRoleModalBtn: document.getElementById('close-role-modal-btn'),
        roleModalLobbyCode: document.getElementById('role-modal-lobby-code'),
        modalRoleOptions: document.getElementById('modal-role-options'),
        confirmJoinBtn: document.getElementById('confirm-join-btn'),

        // Shared
        globalBackToMain: document.getElementById('global-back-to-main'),
        connectionStatus: document.getElementById('connection-status'),
        notification: document.getElementById('notification'),
        
        // Lobby
        lobbyCodeDisplay: document.getElementById('lobby-code-display'),
        toggleCodeVisibility: document.getElementById('toggle-code-visibility'),
        participantsList: document.getElementById('participants-list'),
        phaseTimer: document.getElementById('phase-timer'),
        refTimerControl: document.getElementById('ref-timer-control'),
        draftStatusPanel: document.getElementById('draft-status-panel'),
        currentPhase: document.getElementById('current-phase'),
        draftActionDescription: document.getElementById('draft-action-description'),
        
        // Roster Phase (Lobby)
        rosterPhase: document.getElementById('roster-phase'),
        rosterPhaseTitle: document.getElementById('roster-phase-title'),
        p1Panel: document.getElementById('p1-panel'), p2Panel: document.getElementById('p2-panel'),
        p1Roster: document.getElementById('p1-roster'), p2Roster: document.getElementById('p2-roster'),
        p1Counter: document.getElementById('p1-counter'), p2Counter: document.getElementById('p2-counter'),
        p1RosterSize: document.getElementById('p1-roster-size'), p2RosterSize: document.getElementById('p2-roster-size'),
        p1Random: document.getElementById('p1-random'), p2Random: document.getElementById('p2-random'),
        p1Clear: document.getElementById('p1-clear'), p2Clear: document.getElementById('p2-clear'),
        p1Ready: document.getElementById('p1-ready'), p2Ready: document.getElementById('p2-ready'),
        p1Status: document.getElementById('p1-status'), p2Status: document.getElementById('p2-status'),
        p1NameDisplay: document.getElementById('p1-name-display'), p2NameDisplay: document.getElementById('p2-name-display'),
        p1RosterCodeInput: document.getElementById('p1-roster-code-input'), p2RosterCodeInput: document.getElementById('p2-roster-code-input'),
        p1RosterLoad: document.getElementById('p1-roster-load'), p2RosterLoad: document.getElementById('p2-roster-load'),
        startCoinFlip: document.getElementById('start-coin-flip'),

        // Roster Builder
        builderSinnerNav: document.getElementById('builder-sinner-nav'),
        builderIdPool: document.getElementById('builder-id-pool'),
        builderSelectedRoster: document.getElementById('builder-selected-roster'),
        builderCounter: document.getElementById('builder-counter'),
        builderRosterSize: document.getElementById('builder-roster-size'),
        builderRosterSizeSelector: document.getElementById('builder-roster-size-selector'),
        builderRandom: document.getElementById('builder-random'),
        builderClear: document.getElementById('builder-clear'),
        builderRosterCodeDisplay: document.getElementById('builder-roster-code-display'),
        builderCopyCode: document.getElementById('builder-copy-code'),
        builderLoadCodeInput: document.getElementById('builder-load-code-input'),
        builderLoadCode: document.getElementById('builder-load-code'),
        toggleAdvancedRandom: document.getElementById('toggle-advanced-random'),
        advancedRandomOptions: document.getElementById('advanced-random-options'),
        sinnerSlidersContainer: document.getElementById('sinner-sliders-container'),
        totalMinDisplay: document.getElementById('total-min-display'),
        totalMaxDisplay: document.getElementById('total-max-display'),
        advancedRandomRosterSize: document.querySelectorAll('.advanced-random-roster-size'),
        builderAdvancedRandom: document.getElementById('builder-advanced-random'),
        advancedRandomSummary: document.getElementById('advanced-random-summary'),

        // EGO Ban Phase
        egoBanPhase: document.getElementById('ego-ban-phase'),
        egoBanTitle: document.getElementById('ego-ban-title'),
        egoSearchInput: document.getElementById('ego-search-input'),
        egoBanContainer: document.getElementById('ego-ban-container'),
        confirmEgoBans: document.getElementById('confirm-ego-bans'),
        confirmSelectionEgo: document.getElementById('confirm-selection-ego'),
        opponentRosterDisplay: document.getElementById('opponent-roster-display'),
        opponentRosterTitle: document.getElementById('opponent-roster-title'),
        opponentRosterList: document.getElementById('opponent-roster-list'),
        currentPlayerEgoBans: document.getElementById('current-player-ego-bans'),
        egoBanPlayerBansSection: document.getElementById('ego-ban-player-bans-section'),
        p1EgoBansPreview: document.getElementById('p1-ego-bans-preview'),

        // ID Draft Phase
        idDraftPhase: document.getElementById('id-draft-phase'),
        draftBannedEgosList: document.getElementById('draft-banned-egos-list'),
        completeDraft: document.getElementById('complete-draft'),
        p1DraftColumn: document.getElementById('p1-draft-column'), 
        p2DraftColumn: document.getElementById('p2-draft-column'),
        draftInteractionHub: document.getElementById('draft-interaction-hub'),
        p1DraftName: document.getElementById('p1-draft-name'), p2DraftName: document.getElementById('p2-draft-name'),
        p1DraftStatus: document.getElementById('p1-draft-status'), p2DraftStatus: document.getElementById('p2-draft-status'),
        draftPoolContainer: document.getElementById('draft-pool-container'),
        confirmSelectionId: document.getElementById('confirm-selection-id'),
        p1IdBans: document.getElementById('p1-id-bans'), p2IdBans: document.getElementById('p2-id-bans'),
        p1Picks: document.getElementById('p1-picks'), p2Picks: document.getElementById('p2-picks'),
        p1S2PicksContainer: document.getElementById('p1-s2-picks-container'), p2S2PicksContainer: document.getElementById('p2-s2-picks-container'),
        p1S2Picks: document.getElementById('p1-s2-picks'), p2S2Picks: document.getElementById('p2-s2-picks'),
        p1ReserveTime: document.getElementById('p1-reserve-time'),
        p2ReserveTime: document.getElementById('p2-reserve-time'),

        // Completed View
        finalBannedEgosList: document.getElementById('final-banned-egos-list'),
        restartDraft: document.getElementById('restart-draft'), 
        finalP1Name: document.getElementById('final-p1-name'), finalP2Name: document.getElementById('final-p2-name'),
        finalP1Picks: document.getElementById('final-p1-picks'),
        finalP2Picks: document.getElementById('final-p2-picks'),
        finalP1Bans: document.getElementById('final-p1-bans'),   
        finalP2Bans: document.getElementById('final-p2-bans'),
        finalP1S2PicksContainer: document.getElementById('final-p1-s2-picks-container'),
        finalP2S2PicksContainer: document.getElementById('final-p2-s2-picks-container'),
        finalP1S2Picks: document.getElementById('final-p1-s2-picks'),
        finalP2S2Picks: document.getElementById('final-p2-s2-picks'),
        viewToggleSwitch: document.getElementById('view-toggle-switch'),
        viewToggleLabel: document.getElementById('view-toggle-label'),
        finalRostersView: document.getElementById('final-rosters-view'),
        timelineView: document.getElementById('timeline-view'),

        // Coin Flip Modal
        coinFlipModal: document.getElementById('coin-flip-modal'),
        coinIcon: document.getElementById('coin-icon'),
        coinFlipStatus: document.getElementById('coin-flip-status'),
        turnChoiceButtons: document.getElementById('turn-choice-buttons'),
        goFirstBtn: document.getElementById('go-first-btn'),
        goSecondBtn: document.getElementById('go-second-btn'),

        // Frequently accessed filter bars
        globalFilterBarRoster: document.getElementById('global-filter-bar-roster'),
        globalFilterBarBuilder: document.getElementById('global-filter-bar-builder'),
        globalFilterBarDraft: document.getElementById('global-filter-bar-draft'),

        //
        timelineWrapper: document.getElementById('timeline-wrapper'),
        timelineRosterP1: document.getElementById('timeline-roster-p1-grid'),
        timelineRosterP2: document.getElementById('timeline-roster-p2-grid'),
        timelineRosterP1Name: document.getElementById('timeline-roster-p1-name'),
        timelineRosterP2Name: document.getElementById('timeline-roster-p2-name'),

         // anaylzer
        analyzerPage: document.getElementById('analyzer-page'),
        goToAnalyzer: document.getElementById('go-to-analyzer'),
        draftImportCode: document.getElementById('draft-import-code'),
        analyzeDraftBtn: document.getElementById('analyze-draft-btn'),
        exportDraftBtn: document.getElementById('export-draft-btn'),
        createLobbyMainBtn: document.getElementById('create-lobby-main'),
        joinLobbyMainBtn: document.getElementById('join-lobby-main'),
        lobbyCodeInputMain: document.getElementById('lobby-code-input-main'),

        // Dynamic tooltip element (will be created/destroyed)
        idTooltip: null
    };
    
    // Elements that are intentionally null or optional
    const optionalElements = ['idTooltip'];
    
    const missingElements = Object.keys(elements)
        .filter(key => !elements[key] && !optionalElements.includes(key));
    
    if (missingElements.length > 0) {
        console.warn('Missing DOM elements:', missingElements);
    }
    console.log('DOM elements cached successfully. Missing count:', missingElements.length);
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM Content Loaded - Starting initialization');
    
    try {
        cacheDOMElements();

        elements.globalFilterBarRoster.innerHTML = createFilterBarHTML({ showSinnerFilter: true });
        elements.globalFilterBarBuilder.innerHTML = createFilterBarHTML({ showSinnerFilter: false });
        elements.globalFilterBarDraft.innerHTML = createFilterBarHTML({ showSinnerFilter: true });
        setupFilterBar('global-filter-bar-roster', state.filters);
        setupFilterBar('global-filter-bar-builder', state.filters);
        setupFilterBar('global-filter-bar-draft', state.draftFilters);

        state.masterIDList = parseIDCSV(idCsvData);
        state.builderMasterIDList = state.masterIDList.filter(id => !id.name.includes('LCB Sinner'));
        state.masterEGOList = parseEGOData(egoData);

        state.idsBySinner = {};
        SINNER_ORDER.forEach(sinnerName => {
            state.idsBySinner[sinnerName] = state.builderMasterIDList.filter(id => id.sinner === sinnerName);
        });
        
        setupAdvancedRandomUI();
        setupEventListeners();
        connectWebSocket();
        switchView('mainPage');
        console.log('Initialization complete');
    } catch (error) {
        console.error('Error during initialization:', error);
        try {
            switchView('mainPage');
        } catch (fallbackError) {
            console.error('Even fallback failed:', fallbackError);
        }
    }
});



================================================
FILE: server.js
================================================
// =================================================================================
// FILE: server.js
// DESCRIPTION: This version adds basic security hardening for public use.
// 1. Input Sanitization: Player names are now sanitized to prevent XSS attacks.
// 2. Rate Limiting: A simple in-memory rate limit is added to the lobby
//    creation process to prevent spam and abuse.
// =================================================================================
const express = require('express');
const http = require('http');
const path =require('path');
const WebSocket = require('ws');
const crypto = require('crypto');

// In-memory storage for lobbies instead of Firestore
const lobbies = {};
const VALID_ROLES = new Set(['p1', 'p2', 'ref']);

// Helper function to validate roster
function validateRoster(roster, rosterSize) {
    if (!Array.isArray(roster)) return false;
    const sizeOk = roster.length === rosterSize;
    const uniqueOk = new Set(roster).size === roster.length;
    const idsOk = roster.every(x => allIds.includes(x));
    return sizeOk && uniqueOk && idsOk;
}

// Helper function to send error responses consistently
function sendError(ws, message) {
    ws.send(JSON.stringify({ type: 'error', message }));
}

// Enhanced logging utility with consistent formatting
function logInfo(category, message, data = null) {
    const timestamp = new Date().toISOString();
    const logMessage = data 
        ? `[${timestamp}] ${category}: ${message} ${JSON.stringify(data)}`
        : `[${timestamp}] ${category}: ${message}`;
    console.log(logMessage);
}

function logError(category, message, error = null) {
    const timestamp = new Date().toISOString();
    const logMessage = error 
        ? `[${timestamp}] ERROR ${category}: ${message} ${error}`
        : `[${timestamp}] ERROR ${category}: ${message}`;
    console.error(logMessage);
}

// Validation helper functions to reduce repetition
function validateLobbyExists(ws, lobbyData, sendErrorOnFail = false) {
    if (!lobbyData) {
        if (sendErrorOnFail && ws) {
            sendError(ws, 'Lobby not found.');
        }
        return false;
    }
    return true;
}

function validatePlayerRole(player) {
    return VALID_ROLES.has(player) && player !== 'ref';
}

function validatePlayerAccess(ws, player, lobbyData) {
    return validateLobbyExists(null, lobbyData) && 
           validatePlayerRole(player) && 
           isAuthorized(ws, player);
}

function validatePlayerNotReady(lobbyData, player) {
    return lobbyData.participants[player] && !lobbyData.participants[player].ready;
}

function validateRefereeAccess(ws, lobbyData) {
    return validateLobbyExists(null, lobbyData) && ws.userRole === 'ref';
}

const app = express();
const server = http.createServer(app);

// Minimal hardening
app.disable('x-powered-by');

app.use(express.static(path.join(__dirname)));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.get('/_ah/health', (req, res) => res.status(200).send('OK'));

const wss = new WebSocket.Server({ server });

const TIMERS = {
    roster: 90,
    egoBan: 20, // 20 seconds for each EGO ban
    pick: 15,
};

// --- DRAFT LOGIC SEQUENCES ---
const DRAFT_LOGIC = {
    '1-2-2': {
        egoBanSteps: 10,
        ban1Steps: 8,
        pick1: [{ p: 'p1', c: 1 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 1 }],
        midBanSteps: 6,
        // Phase 2 (pick2) starts with p2 - the player who goes second during phase 1 goes first during phase 2
        pick2: [{ p: 'p2', c: 1 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 1 }],
        pick_s2: [{ p: 'p1', c: 1 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 1 }]
    },
    '1-2-2-extended': { // For "All Sections" matches
        egoBanSteps: 10,
        ban1Steps: 8,
        pick1: [{ p: 'p1', c: 1 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 1 }],
        midBanSteps: 8, // Increased to 8
        pick2: [ // Starts with p2 now - the player who goes second during phase 1 goes first during phase 2
            { p: 'p2', c: 1 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 1 }
        ],
    },
    '2-3-2': {
        egoBanSteps: 10,
        ban1Steps: 8,
        pick1: [{ p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }],
        midBanSteps: 6,
        pick2: [{ p: 'p2', c: 2 }, { p: 'p1', c: 3 }, { p: 'p2', c: 2 }, { p: 'p1', c: 3 }, { p: 'p2', c: 2 }],
        pick_s2: [{ p: 'p1', c: 1 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 1 }]
    },
    '2-3-2-extended': { // For "All Sections" matches
        egoBanSteps: 10,
        ban1Steps: 8,
        pick1: [{ p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }],
        midBanSteps: 8, // Increased to 8
        pick2: [ // Starts with p2 now - the player who goes second during phase 1 goes first during phase 2
            { p: 'p2', c: 1 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 1 }
        ],
    },
    '2-3-2-less-bans': {
        egoBanSteps: 6,
        ban1Steps: 6,
        pick1: [{ p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }],
        midBanSteps: 6,
        pick2: [{ p: 'p2', c: 2 }, { p: 'p1', c: 3 }, { p: 'p2', c: 2 }, { p: 'p1', c: 3 }, { p: 'p2', c: 2 }],
        pick_s2: [{ p: 'p1', c: 1 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 1 }]
    },
    '2-3-2-less-bans-extended': { // For "All Sections" matches
        egoBanSteps: 6,
        ban1Steps: 6,
        pick1: [{ p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }],
        midBanSteps: 8, // Increased to 8
        pick2: [ // Starts with p2 now - the player who goes second during phase 1 goes first during phase 2
            { p: 'p2', c: 1 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 },
            { p: 'p2', c: 1 }
        ],
    }
};

const lobbyTimers = {}; // Store { lobbyCode: { timeoutId, unpauseFn } }

// --- SECURITY UTILITIES ---
function sanitize(text) {
    if (!text) return "";
    return text.toString()
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}

// Enhanced player name sanitization with length limits and additional validation
function sanitizePlayerName(name) {
    if (!name || typeof name !== 'string') return "";
    
    // Trim whitespace and limit length to 16 characters
    const trimmed = name.trim().slice(0, 16);
    
    // Remove any control characters and excessive whitespace
    const cleaned = trimmed.replace(/[\x00-\x1F\x7F]/g, '').replace(/\s+/g, ' ');
    
    // Apply basic HTML sanitization
    return sanitize(cleaned);
}

const rateLimit = {};
const RATE_LIMIT_WINDOW = 60000; // 1 minute
const RATE_LIMIT_MAX_REQUESTS = 10; // Max 10 lobby creations per minute per IP

function createSlug(name) {
    if (!name) return '';
    return name.toLowerCase()
        .replace(/ryōshū/g, 'ryshu').replace(/öufi/g, 'ufi')
        .replace(/e\.g\.o::/g, 'ego-')
        .replace(/ & /g, ' ').replace(/[.'"]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-').replace(/[^\w-]+/g, '');
}

// Minimal ID catalog: we only need slugs server-side to validate rosters and picks.
// Keep it in sync with client data.js by reusing the same CSV string via build-time copy.
function parseIDCSV(csv) {
    const lines = csv.split('\n').filter(line => line.trim() !== '');
    if (lines.length < 2) return [];
    const regex = /(".*?"|[^",]+)(?=\s*,|\s*$)/g;
    const headers = lines[0].split(',').map(h => h.trim());
    const result = [];
    for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        const values = line.match(regex) || [];
        if (values.length !== headers.length) continue;
        const obj = {};
        headers.forEach((header, idx) => {
            let value = values[idx].trim();
            if (value.startsWith('"') && value.endsWith('"')) value = value.slice(1, -1);
            obj[header] = value;
        });
        const name = obj.Name;
            result.push({ 
                id: createSlug(name), 
                name: name,
                rarity: obj.Rarity,
            });
    }
    return result;
}

    // Keep a single source of truth for ID CSV below.

// Reuse the CSV from client (data.js) by embedding the same content here so the server can validate
// rosters/picks authoritatively. Long-term, consider moving this to a shared file (e.g., ids.csv or ids.json).
const idCsvData = `Name,Keywords,SinAffinities,Rarity
"Seven Association South Section 6 Yi Sang","Rupture","Gloom,Gluttony,Sloth","00"
"Molar Office Fixer Yi Sang","Discard,Tremor","Lust,Sloth,Wrath","00"
"The Pequod First Mate Yi Sang","Bleed,Poise","Pride,Envy,Gluttony","00"
"Dieci Association South Section 4 Yi Sang","Aggro,Discard,Sinking","Gluttony,Lust,Sloth","00"
"LCE E.G.O::Lantern Yi Sang","Aggro,Rupture","Sloth,Envy,Gluttony","00"
"Blade Lineage Salsu Yi Sang","Poise","Pride,Envy,Sloth","000"
"Effloresced E.G.O::Spicebush Yi Sang","Sinking,Tremor","Gluttony,Sloth,Pride","000"
"W Corp. L3 Cleanup Agent Yi Sang","Charge,Rupture","Sloth,Gluttony,Gloom","000"
"The Ring Pointillist Student Yi Sang","Bleed,Random","Gloom,Lust,Sloth","000"
"Lobotomy E.G.O::Solemn Lament Yi Sang","Ammo,Sinking","Pride,Gloom,Sloth","000"
"Liu Association South Section 3 Yi Sang","Burn","Sloth,Wrath,Envy","000"
"N Corp. E.G.O::Fell Bullet Yi Sang","Bleed,Poise","Wrath,Lust,Pride","000"
"Heishou Pack - Wu Branch Adept Yi Sang","Aggro,Rupture,Tremor","Sloth,Envy,Gluttony","000"
"W Corp. L2 Cleanup Agent Faust","Charge","Envy,Gloom,Wrath","00"
"Lobotomy Corp. Remnant Faust","Poise,Rupture","Sloth,Gloom,Envy","000"
"Zwei Association South Section 4 Faust","Aggro","Envy,Gloom,Lust","00"
"Wuthering Heights Butler Faust","Sinking","Gloom,Lust,Wrath","00"
"The One Who Grips Faust","Bleed","Envy,Lust,Pride","000"
"Seven Association South Section 4 Faust","Rupture","Envy,Gloom,Gluttony","000"
"Lobotomy E.G.O::Regret Faust","Tremor","Sloth,Pride,Wrath","000"
"Blade Lineage Salsu Faust","Bleed,Poise","Sloth,Pride,Gloom","000"
"MultiCrack Office Rep Faust","Charge","Lust,Envy,Gluttony","000"
"LCE E.G.O::Ardor Blossom Star Faust","Burn","Sloth,Pride,Wrath","000"
"Heishou Pack - Mao Branch Adept Faust","Rupture","Sloth,Pride,Gluttony","000"
"Shi Association South Section 5 Director Don Quixote","Poise","Wrath,Envy,Lust","00"
"N Corp. Mittelhammer Don Quixote","Bleed,Tremor","Lust,Gluttony,Wrath","00"
"Lobotomy E.G.O::Lantern Don Quixote","Aggro,Rupture","Gluttony,Lust,Gloom","00"
"Blade Lineage Salsu Don Quixote","Poise","Pride,Envy,Sloth","00"
"W Corp. L3 Cleanup Agent Don Quixote","Charge,Rupture","Sloth,Gloom,Envy","000"
"Cinq Association South Section 5 Director Don Quixote","","Lust,Gloom,Pride","000"
"The Middle Little Sister Don Quixote","Bleed","Wrath,Envy,Pride","000"
"T Corp. Class 3 Collection Staff Don Quixote","Aggro,Tremor","Gluttony,Pride,Sloth","000"
"The Manager of La Manchaland Don Quixote","Bleed","Sloth,Wrath,Lust","000"
"Cinq Association East Section 3 Don Quixote","Burn,Poise","Gluttony,Wrath,Pride","000"
"Lobotomy E.G.O::In the Name of Love and Hate Don Quixote","Rupture,Sinking","Wrath,Envy,Envy","000"
"Seven Association South Section 6 Ryōshū","Rupture","Sloth,Pride,Gluttony","00"
"LCCB Assistant Manager Ryōshū","Ammo,Poise,Rupture,Tremor","Lust,Gluttony,Pride","00"
"Liu Association South Section 4 Ryōshū","Burn","Gluttony,Wrath,Lust","00"
"District 20 Yurodivy Ryōshū","Tremor","Lust,Sloth,Gluttony","00"
"Kurokumo Clan Wakashu Ryōshū","Bleed","Gluttony,Pride,Lust","000"
"R.B. Chef de Cuisine Ryōshū","Bleed","Wrath,Envy,Lust","000"
"W Corp. L3 Cleanup Agent Ryōshū","Charge","Lust,Pride,Envy","000"
"Edgar Family Chief Butler Ryōshū","Poise","Lust,Pride,Wrath","000"
"Lobotomy E.G.O::Red Eyes & Penitence Ryōshū","Bleed","Envy,Gloom,Lust","000"
"Heishou Pack - Mao Branch Ryōshū","Rupture","Lust,Gluttony,Pride","00"
"Liu Association South Section 6 Meursault","Burn","Lust,Sloth,Wrath","00"
"Rosespanner Workshop Fixer Meursault","Charge,Tremor","Gloom,Pride,Sloth","00"
"The Middle Little Brother Meursault","Bleed","Sloth,Envy,Wrath","00"
"Dead Rabbits Boss Meursault","Rupture","Lust,Wrath,Gluttony","00"
"W Corp. L2 Cleanup Agent Meursault","Charge,Rupture","Envy,Gluttony,Pride","000"
"N Corp. Großhammer Meursault","Aggro,Bleed","Sloth,Wrath,Pride","000"
"R Corp. 4th Pack Rhino Meursault","Bleed,Charge","Envy,Gloom,Lust","000"
"Blade Lineage Mentor Meursault","Poise","Pride,Pride,Wrath","000"
"Dieci Association South Section 4 Director Meursault","Discard,Sinking","Gluttony,Sloth,Gloom","000"
"Cinq Association West Section 3 Meursault","Poise,Rupture","Pride,Gluttony,Gloom","000"
"The Thumb East Capo IIII Meursault","Ammo,Burn,Tremor","Sloth,Lust,Wrath","000"
"Kurokumo Clan Wakashu Hong Lu","Bleed","Lust,Pride,Sloth","00"
"Liu Association South Section 5 Hong Lu","Burn","Gloom,Lust,Wrath","00"
"W Corp. L2 Cleanup Agent Hong Lu","Charge,Rupture","Pride,Wrath,Gluttony","00"
"Hook Office Fixer Hong Lu","Bleed","Wrath,Lust,Pride","00"
"Fanghunt Office Fixer Hong Lu","Rupture","Gluttony,Pride,Wrath","00"
"Tingtang Gang Gangleader Hong Lu","Bleed","Envy,Lust,Gluttony","000"
"K Corp. Class 3 Excision Staff Hong Lu","Aggro,Rupture","Pride,Gluttony,Sloth","000"
"Dieci Association South Section 4 Hong Lu","Discard,Sinking","Wrath,Gloom,Sloth","000"
"District 20 Yurodivy Hong Lu","Tremor","Gloom,Sloth,Gluttony","000"
"Full-Stop Office Rep Hong Lu","Ammo,Poise","Sloth,Gloom,Pride","000"
"R Corp. 4th Pack Reindeer Hong Lu","Charge,Sinking","Gluttony,Envy,Wrath","000"
"The Lord of Hongyuan Hong Lu","Poise,Rupture","Gloom,Gluttony,Pride","000"
"Shi Association South Section 5 Heathcliff","Poise","Lust,Wrath,Envy","00"
"N Corp. Kleinhammer Heathcliff","Bleed","Envy,Gloom,Lust","00"
"Seven Association South Section 4 Heathcliff","Rupture","Wrath,Envy,Gluttony","00"
"MultiCrack Office Fixer Heathcliff","Charge","Wrath,Envy,Gloom","00"
"R Corp. 4th Pack Rabbit Heathcliff","Ammo,Bleed,Rupture","Wrath,Gluttony,Envy","000"
"Lobotomy E.G.O::Sunshower Heathcliff","Rupture,Sinking,Tremor","Envy,Gloom,Sloth","000"
"The Pequod Harpooneer Heathcliff","Aggro,Bleed,Poise","Pride,Envy,Envy","000"
"Öufi Association South Section 3 Heathcliff","Tremor","Envy,Gloom,Pride","000"
"Wild Hunt Heathcliff","Sinking","Wrath,Envy,Gloom","000"
"Full-Stop Office Fixer Heathcliff","Ammo,Poise","Gloom,Envy,Pride","000"
"Kurokumo Clan Wakashu Heathcliff","Bleed","Wrath,Pride,Lust","000"
"Shi Association South Section 5 Ishmael","Poise","Envy,Lust,Wrath","00"
"LCCB Assistant Manager Ishmael","Aggro,Rupture,Tremor","Gluttony,Gloom,Pride","00"
"Lobotomy E.G.O::Sloshing Ishmael","Aggro,Rupture,Tremor","Gloom,Wrath,Gluttony","00"
"Edgar Family Butler Ishmael","Poise,Sinking","Sloth,Gluttony,Gloom","00"
"R Corp. 4th Pack Reindeer Ishmael","Charge,Sinking","Gloom,Envy,Wrath","000"
"Liu Association South Section 4 Ishmael","Burn","Lust,Wrath,Envy","000"
"Molar Boatworks Fixer Ishmael","Sinking,Tremor","Pride,Sloth,Gloom","000"
"The Pequod Captain Ishmael","Aggro,Bleed,Burn","Envy,Pride,Wrath","000"
"Zwei Association West Section 3 Ishmael","Aggro,Tremor","Pride,Envy,Gluttony","000"
"Kurokumo Clan Captain Ishmael","Bleed","Envy,Pride,Lust","000"
"Family Hierarch Candidate Ishmael","Poise,Rupture","Gloom,Gluttony,Envy","000"
"LCCB Assistant Manager Rodion","","Pride,Gluttony,Envy","00"
"N Corp. Mittelhammer Rodion","Bleed","Pride,Lust,Wrath","00"
"Zwei Association South Section 5 Rodion","Aggro,Poise","Wrath,Sloth,Gloom","00"
"T Corp. Class 2 Collection Staff Rodion","Tremor","Envy,Wrath,Sloth","00"
"Kurokumo Clan Wakashu Rodion","Bleed,Poise","Gluttony,Lust,Pride","000"
"Rosespanner Workshop Rep Rodion","Charge,Tremor","Pride,Gloom,Envy","000"
"Dieci Association South Section 4 Rodion","Aggro,Discard,Sinking","Gloom,Envy,Sloth","000"
"Liu Association South Section 4 Director Rodion","Burn","Pride,Wrath,Lust","000"
"Devyat' Association North Section 3 Rodion","Rupture","Lust,Wrath,Gluttony","000"
"The Princess of La Manchaland Rodion","Bleed,Rupture","Pride,Envy,Lust","000"
"Heishou Pack - Si Branch Rodion","Poise,Rupture","Envy,Gluttony,Gloom","000"
"Lobotomy E.G.O::The Sword Sharpened with Tears Rodion","Sinking","Gloom,Envy,Pride","000"
"Zwei Association South Section 6 Sinclair","Aggro,Tremor","Gloom,Wrath,Sloth","00"
"Los Mariachis Jefe Sinclair","Poise,Sinking","Sloth,Envy,Gloom","00"
"Lobotomy E.G.O::Red Sheet Sinclair","Rupture","Gluttony,Pride,Lust","00"
"Molar Boatworks Fixer Sinclair","Tremor","Gloom,Envy,Gluttony","00"
"Zwei Association West Section 3 Sinclair","Aggro,Tremor","Lust,Gloom,Sloth","00"
"Blade Lineage Salsu Sinclair","Bleed,Poise","Gluttony,Wrath,Pride","000"
"The One Who Shall Grip Sinclair","Bleed,Burn","Gloom,Lust,Wrath","000"
"Cinq Association South Section 4 Director Sinclair","Poise","Gluttony,Pride,Lust","000"
"Dawn Office Fixer Sinclair","Bleed","Gloom,Envy,Wrath","000"
"Devyat' Association North Section 3 Sinclair","Rupture","Lust,Gluttony,Wrath","000"
"The Middle Little Brother Sinclair","Aggro,Bleed","Lust,Gluttony,Wrath","000"
"The Thumb East Soldato II Sinclair","Ammo,Burn,Tremor","Lust,Sloth,Wrath","000"
"Heishou Pack - You Branch Sinclair","Burn,Rupture","Lust,Gluttony,Wrath","000"
"Blade Lineage Salsu Outis","Poise","Wrath,Lust,Pride","00"
"G Corp. Head Manager Outis","Sinking","Sloth,Gluttony,Gloom","00"
"Cinq Association South Section 4 Outis","Aggro,Poise","Pride,Gloom,Lust","00"
"The Ring Pointillist Student Outis","Bleed,Random","Lust,Wrath,Gluttony","00"
"Seven Association South Section 6 Director Outis","Rupture","Gluttony,Sloth,Lust","000"
"Molar Office Fixer Outis","Discard,Tremor","Wrath,Lust,Sloth","000"
"Lobotomy E.G.O::Magic Bullet Outis","Burn","Wrath,Pride,Pride","000"
"Wuthering Heights Chief Butler Outis","Sinking","Pride,Gloom,Lust","000"
"W Corp. L3 Cleanup Captain Outis","Charge,Rupture","Pride,Envy,Gloom","000"
"The Barber of La Manchaland Outis","Bleed","Gluttony,Lust,Wrath","000"
"Heishou Pack - Mao Branch Outis","Rupture","Sloth,Gluttony,Gloom","000"
"T Corp. Class 3 VDCU Staff Outis","Tremor","Pride,Sloth,Gluttony","000"
"Liu Association South Section 6 Gregor","Burn","Wrath,Lust,Sloth","00"
"R.B. Sous-chef Gregor","Bleed","Lust,Gluttony,Envy","00"
"Rosespanner Workshop Fixer Gregor","Rupture,Tremor","Gluttony,Envy,Gloom","00"
"Kurokumo Clan Captain Gregor","Bleed","Sloth,Lust,Gloom","00"
"G Corp. Manager Corporal Gregor","Rupture","Gluttony,Sloth,Lust","000"
"Zwei Association South Section 4 Gregor","Aggro","Sloth,Gluttony,Gloom","000"
"Twinhook Pirates First Mate Gregor","Ammo,Bleed,Poise","Sloth,Pride,Gloom","000"
"Edgar Family Heir Gregor","Sinking","Envy,Pride,Lust","000"
"The Priest of La Manchaland Gregor","Aggro,Bleed,Rupture","Gluttony,Pride,Lust","000"
"Firefist Office Survivor Gregor","Burn","Lust,Wrath,Wrath","000"
"Heishou Pack - Si Branch Gregor","Poise,Rupture","Pride,Gluttony,Envy","000"`;
const masterIDList = parseIDCSV(idCsvData);
const allIds = Object.freeze(masterIDList.map(item => item.id));


function generateUniqueLobbyCode() {
    let code;
    do {
        code = Math.random().toString(36).substring(2, 8).toUpperCase();
    } while (lobbies[code]);
    return code;
}

function createNewLobbyState(options = {}) {
    const { draftLogic = '2-3-2', timerEnabled = false, name = 'Referee', matchType = 'section1', rosterSize = 42 } = options;
    const fullLogicKey = matchType === 'allSections' ? `${draftLogic}-extended` : draftLogic;
    const currentLogic = DRAFT_LOGIC[fullLogicKey] || DRAFT_LOGIC[draftLogic];
    return {
        hostName: sanitizePlayerName(name), // Enhanced sanitization for name on creation
        createdAt: new Date().toISOString(),
        lastActivity: new Date().toISOString(),
        participants: {
            p1: { name: "Player 1", status: "disconnected", ready: false, rejoinToken: null, reserveTime: 120 },
            p2: { name: "Player 2", status: "disconnected", ready: false, rejoinToken: null, reserveTime: 120 },
            ref: { name: sanitizePlayerName(name), status: "disconnected", rejoinToken: null }
        },
        roster: { p1: [], p2: [] },
        draft: {
            phase: "roster",
            step: 0,
            currentPlayer: "",
            action: "",
            actionCount: 0,
            available: { p1: [], p2: [] },
            idBans: { p1: [], p2: [] },
            egoBans: { p1: [], p2: [] },
            picks: { p1: [], p2: [] },
            picks_s2: { p1: [], p2: [] },
            history: [],
            hovered: { p1: null, p2: null },
            // Authoritative server-side view of bannable opponent IDs for each player.
            // banPools.p1: IDs p1 may ban (derived from roster.p2 minus bans & p2 picks)
            // banPools.p2: IDs p2 may ban (derived from roster.p1 minus bans & p1 picks)
            banPools: { p1: [], p2: [] },
            draftLogic,
            matchType,
            rosterSize: parseInt(rosterSize, 10),
            egoBanSteps: currentLogic.egoBanSteps || 10,
            coinFlipWinner: null,
            timer: {
                enabled: timerEnabled,
                running: false,
                paused: false,
                endTime: 0,
                pauseTime: 0,
                isReserve: false,
                reserveStartTime: 0
            }
        }
    };
}

function broadcastState(lobbyCode, rolesSwapped = false) {
    const lobbyData = lobbies[lobbyCode];
    if (!lobbyData) return;

    wss.clients.forEach(client => {
        if (client.lobbyCode === lobbyCode && client.readyState === WebSocket.OPEN) {
            const message = {
                type: 'stateUpdate',
                state: { ...lobbyData, rolesSwapped }
            };

            if (rolesSwapped) {
                if (client.initialUserRole === 'p1') {
                    message.newRole = 'p2';
                } else if (client.initialUserRole === 'p2') {
                    message.newRole = 'p1';
                }
            }
            client.send(JSON.stringify(message));
        }
    });
}

function updateLobbyActivity(lobbyCode) {
    if (lobbies[lobbyCode]) {
        lobbies[lobbyCode].lastActivity = new Date().toISOString();
    }
}

function isAuthorized(ws, targetRole) {
    // Referee can act for anyone; a player can only act for themselves
    return ws && (ws.userRole === 'ref' || ws.userRole === targetRole);
}

function handleTimer(lobbyCode) {
    let lobbyData = lobbies[lobbyCode];
    if (!lobbyData) return;

    const { draft } = lobbyData;
    const { currentPlayer } = draft;
    const participant = lobbyData.participants[currentPlayer];

    if (participant && participant.reserveTime > 0 && !draft.timer.isReserve) {
        logInfo('TIMER', `Main timer expired for ${currentPlayer}. Activating reserve time.`, { lobbyCode, currentPlayer });
        draft.timer.isReserve = true;
        draft.timer.reserveStartTime = Date.now();
        
        const reserveDuration = participant.reserveTime;
        draft.timer.running = true;
        draft.timer.endTime = Date.now() + reserveDuration * 1000;

        const timeoutId = setTimeout(() => handleTimer(lobbyCode), reserveDuration * 1000);
        lobbyTimers[lobbyCode] = { timeoutId };
        
        broadcastState(lobbyCode);
        return;
    }
    
    draft.timer.isReserve = false;
    draft.timer.running = false;
    if (participant) {
        participant.reserveTime = 0;
    }

    const { hovered, phase } = draft;
    const hoveredId = hovered[currentPlayer];

    logInfo('TIMER', `Timer fully expired`, { lobbyCode, currentPlayer, phase, hoveredId });
    
    if (hoveredId) {
        handleDraftConfirm(lobbyCode, lobbyData, null);
        return;
    }

    logInfo('TIMER', 'Timer expired with no hover. Skipping turn by advancing phase.', { lobbyCode, currentPlayer });
    lobbyData = advancePhase(lobbyData);
    setTimerForLobby(lobbyCode, lobbyData);
    broadcastState(lobbyCode);
}


function setTimerForLobby(lobbyCode, lobbyData) {
    if (lobbyTimers[lobbyCode] && lobbyTimers[lobbyCode].timeoutId) {
        clearTimeout(lobbyTimers[lobbyCode].timeoutId);
    }
    
    const { draft } = lobbyData;
    draft.timer.isReserve = false;

    if (!draft.timer.enabled || draft.phase === 'complete' || draft.timer.paused) {
        draft.timer.running = false;
        return;
    }

    let duration = 0;
    if (draft.phase === 'roster') {
        duration = TIMERS.roster;
    } else if (draft.phase === 'egoBan') {
        duration = TIMERS.egoBan;
    } else if (['pick', 'ban', 'midBan', 'pick2'].includes(draft.phase)) {
        duration = TIMERS.pick * draft.actionCount;
    }

    if (duration > 0) {
        draft.timer.running = true;
        draft.timer.endTime = Date.now() + duration * 1000;

        const timeoutId = setTimeout(() => handleTimer(lobbyCode), duration * 1000);
        lobbyTimers[lobbyCode] = { timeoutId };
    } else {
         draft.timer.running = false;
    }
}

function advancePhase(lobbyData) {
    const { draft } = lobbyData;
    draft.timer.isReserve = false;
    
    const logicKey = draft.matchType === 'allSections' ? `${draft.draftLogic}-extended` : draft.draftLogic;
    const logic = DRAFT_LOGIC[logicKey] || DRAFT_LOGIC[draft.draftLogic];


    switch (draft.phase) {
        case "egoBan":
            const totalEgoBans = draft.egoBanSteps || 10;
            // Total bans, so steps are 0 to totalEgoBans - 1
            if (draft.step < totalEgoBans - 1) {
                draft.step++;
                draft.currentPlayer = draft.currentPlayer === 'p1' ? 'p2' : 'p1';
                draft.actionCount = 1; // Each player bans 1 at a time
            } else {
                // EGO ban phase is over, move to ID bans
                draft.phase = "ban";
                draft.action = "ban";
                draft.step = 0;
                draft.currentPlayer = 'p1'; // P1 always starts ID bans
                draft.actionCount = 1;
                draft.available.p1 = [...lobbyData.roster.p1];
                draft.available.p2 = [...lobbyData.roster.p2];
                computeBanPools(lobbyData); // initialize ban pools for initial ban phase
            }
            break;
        case "ban":
            if (draft.step < logic.ban1Steps - 1) {
                draft.step++;
                draft.currentPlayer = draft.currentPlayer === 'p1' ? 'p2' : 'p1';
                draft.actionCount = 1;
            } else {
                draft.phase = "pick";
                draft.action = "pick";
                draft.step = 0;
                const next = logic.pick1[0];
                draft.currentPlayer = next.p;
                draft.actionCount = next.c;
            }
            break;
        case "pick":
            if (draft.step < logic.pick1.length - 1) {
                draft.step++;
                const next = logic.pick1[draft.step];
                draft.currentPlayer = next.p;
                draft.actionCount = next.c;
            } else {
                draft.phase = "midBan";
                draft.action = "midBan";
                draft.step = 0;
                draft.currentPlayer = 'p2';
                draft.actionCount = 1;
                computeBanPools(lobbyData); // refresh ban pools for mid-ban phase
            }
            break;
        case "midBan":
             if (draft.step < logic.midBanSteps - 1) {
                draft.step++;
                draft.currentPlayer = draft.currentPlayer === 'p1' ? 'p2' : 'p1';
                draft.actionCount = 1;
            } else {
                draft.phase = "pick2";
                draft.action = "pick2";
                draft.step = 0;
                const next = logic.pick2[0];
                draft.currentPlayer = next.p;
                draft.actionCount = next.c;
            }
            break;
        case "pick2":
            if (draft.step < logic.pick2.length - 1) {
                draft.step++;
                const next = logic.pick2[draft.step];
                draft.currentPlayer = next.p;
                draft.actionCount = next.c;
            } else {
                draft.phase = "complete";
                draft.action = "complete";
                draft.currentPlayer = "";
            }
            break;
        case "pick_s2":
            if (draft.step < logic.pick_s2.length - 1) {
                draft.step++;
                const next = logic.pick_s2[draft.step];
                draft.currentPlayer = next.p;
                draft.actionCount = next.c;
            } else {
                draft.phase = "complete";
                draft.action = "complete";
                draft.currentPlayer = "";
            }
            break;
    }
    return lobbyData;
}

// Recompute the bannable pools for each player based on current rosters, bans, and ALL picks.
function computeBanPools(lobbyData) {
    if (!lobbyData || !lobbyData.draft) return;
    const { draft, roster } = lobbyData;
    
    // Create a comprehensive set of all IDs that are no longer in play
    const removedIds = new Set([
        ...draft.idBans.p1, ...draft.idBans.p2,
        ...draft.picks.p1, ...draft.picks.p2,
        ...draft.picks_s2.p1, ...draft.picks_s2.p2
    ]);

    const pools = { p1: [], p2: [] };
    
    // Player 1 can ban from Player 2's original roster, minus removed IDs
    pools.p1 = (roster.p2 || []).filter(id => !removedIds.has(id));
    
    // Player 2 can ban from Player 1's original roster, minus removed IDs
    pools.p2 = (roster.p1 || []).filter(id => !removedIds.has(id));

    draft.banPools = pools;
}

function handleDraftConfirm(lobbyCode, lobbyData, ws) {
    const { draft } = lobbyData;
    const { currentPlayer, hovered, phase } = draft;
    const selectedId = hovered[currentPlayer];
    const participant = lobbyData.participants[currentPlayer];

    if (!selectedId) return;
    
    if (ws && ws.userRole !== currentPlayer && ws.userRole !== 'ref') return;

    // For ID phases, ensure the selection is currently available from the right pool
    if (['ban', 'pick', 'midBan', 'pick2', 'pick_s2'].includes(phase)) {
        const isBanAction = (phase === 'ban' || phase === 'midBan');
        if (isBanAction) {
            // Validate against the authoritative ban pool
            const bannableIds = draft.banPools[currentPlayer] || [];
            if (!bannableIds.includes(selectedId)) {
                return; // Invalid ban attempt
            }
        } else {
            const sourceList = draft.available[currentPlayer] || [];
            if (!sourceList.includes(selectedId)) return;
        }
    }

    if (draft.timer.isReserve) {
        if (lobbyTimers[lobbyCode]) clearTimeout(lobbyTimers[lobbyCode].timeoutId);
        const timeUsed = Math.ceil((Date.now() - draft.timer.reserveStartTime) / 1000);
        participant.reserveTime = Math.max(0, participant.reserveTime - timeUsed);
        draft.timer.isReserve = false;
        draft.timer.reserveStartTime = 0;
    }

    if (phase === 'egoBan') {
        const playerBans = draft.egoBans[currentPlayer];
        if (!playerBans.includes(selectedId)) {
            playerBans.push(selectedId);
            draft.history.push({ type: 'EGO_BAN', player: currentPlayer, targetId: selectedId });
        }
        
        draft.hovered[currentPlayer] = null; // Clear hover after successful ban

        // After one ban, advance the phase to the next player's turn
        lobbyData = advancePhase(lobbyData);
        setTimerForLobby(lobbyCode, lobbyData);
        
        updateLobbyActivity(lobbyCode);
        broadcastState(lobbyCode);
        return; // Exit here.
    } 
    
    if (['ban', 'pick', 'midBan', 'pick2', 'pick_s2'].includes(phase)) {
        if (draft.actionCount <= 0) return;

        let listToUpdate;
        const isBanAction = (phase === 'ban' || phase === 'midBan');
        let eventType = '';

        if (isBanAction) {
            listToUpdate = draft.idBans[currentPlayer];
            eventType = 'ID_BAN';
        } else if (phase === 'pick' || phase === 'pick2' || phase === 'pick_s2') {
            listToUpdate = (phase === 'pick_s2') ? draft.picks_s2[currentPlayer] : draft.picks[currentPlayer];
            eventType = 'ID_PICK';
        }

        if (listToUpdate) {
            listToUpdate.push(selectedId);
            draft.history.push({ type: eventType, player: currentPlayer, targetId: selectedId });
        }
        // Always remove the chosen ID from both availability lists (bans deny globally; picks lock globally)
        ['p1','p2'].forEach(p => {
            const idx = draft.available[p].indexOf(selectedId);
            if (idx > -1) draft.available[p].splice(idx, 1);
        });
        
        draft.actionCount--;

        if (draft.actionCount <= 0) {
            lobbyData = advancePhase(lobbyData);
        }
    }

    draft.hovered[currentPlayer] = null;
    updateLobbyActivity(lobbyCode);

    // Set timer for the next phase/turn (this is correct for ID picks/bans which are per-action)
    setTimerForLobby(lobbyCode, lobbyData);
    
    broadcastState(lobbyCode);
}

// --- MAIN WEBSOCKET LOGIC ---
wss.on('connection', (ws, req) => {
    // Use the remote address from the underlying socket for rate limiting
    ws.remoteAddress = req.socket.remoteAddress;
    logInfo('CONNECTION', 'Client connected', { remoteAddress: ws.remoteAddress });

    ws.on('message', (message) => {
        let incomingData;
        try { incomingData = JSON.parse(message); } 
        catch (e) { logError('WEBSOCKET', 'Invalid JSON received', message); return; }

    const { lobbyCode: rawLobbyCode, role, player, id, action, payload, name, roster, options, choice } = incomingData;
        const lobbyCode = rawLobbyCode ? rawLobbyCode.toUpperCase() : null;
        let lobbyData = lobbyCode ? lobbies[lobbyCode] : null;

        switch (incomingData.type) {
            case 'createLobby': {
                const ip = ws.remoteAddress;
                const now = Date.now();
                rateLimit[ip] = (rateLimit[ip] || []).filter(timestamp => now - timestamp < RATE_LIMIT_WINDOW);

                if (rateLimit[ip].length >= RATE_LIMIT_MAX_REQUESTS) {
                    return sendError(ws, 'You are creating lobbies too quickly. Please wait.');
                }
                rateLimit[ip].push(now);

                const newLobbyCode = generateUniqueLobbyCode();
                const newLobbyState = createNewLobbyState(options);
                ws.lobbyCode = newLobbyCode;
                ws.userRole = 'ref';
                ws.initialUserRole = 'ref';
                const rejoinToken = crypto.randomUUID();
                
                newLobbyState.participants.ref.status = "connected";
                newLobbyState.participants.ref.rejoinToken = rejoinToken;
                ws.rejoinToken = rejoinToken;
                
                lobbies[newLobbyCode] = newLobbyState;
                
                ws.send(JSON.stringify({ type: 'lobbyCreated', code: newLobbyCode, role: 'ref', rejoinToken, state: newLobbyState }));
                setTimerForLobby(newLobbyCode, newLobbyState);
                broadcastState(newLobbyCode);
                break;
            }

            
            case 'getLobbyInfo': {
                if (!lobbyData) return sendError(ws, 'Lobby not found.');
                ws.send(JSON.stringify({
                    type: 'lobbyInfo',
                    lobby: {
                        code: lobbyCode,
                        participants: lobbyData.participants,
                    }
                }));
                break;
            }

            case 'joinLobby': {
                if (!lobbyData) return sendError(ws, 'Lobby not found.');
                if (!VALID_ROLES.has(role)) return sendError(ws, 'Invalid role.');
                
                const participant = lobbyData.participants[role];

                if (participant && (participant.status === 'connected' || participant.rejoinToken)) {
                    return sendError(ws, `Role ${role.toUpperCase()} is taken or reserved.`);
                }
                
                ws.lobbyCode = lobbyCode;
                ws.userRole = role;
                ws.initialUserRole = role; // Store the initial role for swapping
                const rejoinToken = crypto.randomUUID();

                lobbyData.participants[role].status = 'connected';
                lobbyData.participants[role].rejoinToken = rejoinToken;
                if (name) lobbyData.participants[role].name = sanitizePlayerName(name); // Enhanced sanitization for name on join
                ws.rejoinToken = rejoinToken;
                
                updateLobbyActivity(lobbyCode);
                
                ws.send(JSON.stringify({ 
                    type: 'lobbyJoined', 
                    lobbyCode: ws.lobbyCode, 
                    role, 
                    rejoinToken,
                    state: lobbyData 
                }));
                broadcastState(ws.lobbyCode);
                break;
            }

            case 'rejoinLobby': {
                if (!lobbyData || !role || !incomingData.rejoinToken) return;
                
                const participant = lobbyData.participants[role];

                if (participant && participant.rejoinToken === incomingData.rejoinToken) {
                    ws.lobbyCode = lobbyCode;
                    ws.userRole = role;
                    ws.initialUserRole = role;
                    ws.rejoinToken = incomingData.rejoinToken;

                    lobbyData.participants[role].status = 'connected';
                    updateLobbyActivity(lobbyCode);
                    
                    ws.send(JSON.stringify({
                        type: 'lobbyJoined',
                        lobbyCode: ws.lobbyCode,
                        role,
                        rejoinToken: incomingData.rejoinToken,
                        state: lobbyData
                    }));
                    broadcastState(lobbyCode);
                } else {
                    sendError(ws, 'Failed to rejoin. Session might be invalid.');
                }
                break;
            }

            case 'rosterSelect': {
                if (!validatePlayerAccess(ws, player, lobbyData)) return;
                if (!validatePlayerNotReady(lobbyData, player)) return;
                const currentRoster = lobbyData.roster[player];
                const index = currentRoster.indexOf(id);
                if (index === -1) { if (currentRoster.length < lobbyData.draft.rosterSize) currentRoster.push(id); } 
                else { currentRoster.splice(index, 1); }
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
                break;
            }
            
            case 'rosterSet': {
                if (!validatePlayerAccess(ws, player, lobbyData)) return;
                if (!validatePlayerNotReady(lobbyData, player)) return;
                // Validate roster using helper function
                if (validateRoster(roster, lobbyData.draft.rosterSize)) {
                    lobbyData.roster[player] = roster;
                    updateLobbyActivity(lobbyCode);
                    broadcastState(lobbyCode);
                }
                break;
            }

            case 'rosterRandomize': {
                if (!validatePlayerAccess(ws, player, lobbyData)) return;
                if (!validatePlayerNotReady(lobbyData, player)) return;
                const shuffled = [...allIds].sort(() => 0.5 - Math.random());
                lobbyData.roster[player] = shuffled.slice(0, lobbyData.draft.rosterSize);
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
                break;
            }

            case 'rosterClear': {
                if (!validatePlayerAccess(ws, player, lobbyData)) return;
                lobbyData.roster[player] = [];
                lobbyData.participants[player].ready = false;
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
                break;
            }

            case 'updateReady': {
                if (!validatePlayerAccess(ws, player, lobbyData)) return;
                const currentReadyState = lobbyData.participants[player].ready;
                if (!currentReadyState && lobbyData.roster[player].length !== lobbyData.draft.rosterSize) return;
                lobbyData.participants[player].ready = !currentReadyState;
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
                break;
            }

            case 'startCoinFlip': {
                if (!validateRefereeAccess(ws, lobbyData)) return;
                lobbyData.draft.phase = 'coinFlip';
                lobbyData.draft.coinFlipWinner = Math.random() < 0.5 ? 'p1' : 'p2';
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
                break;
            }

            case 'setTurnOrder': {
                if (!lobbyData || (ws.userRole !== lobbyData.draft.coinFlipWinner && ws.userRole !== 'ref')) return;
                
                const { draft } = lobbyData;
                let rolesSwapped = false;
                const needsSwap = (draft.coinFlipWinner === 'p2' && choice === 'first') || (draft.coinFlipWinner === 'p1' && choice === 'second');

                if (needsSwap) {
                    logInfo('DRAFT', 'Swapping P1 and P2 roles and data', { lobbyCode, coinFlipWinner: draft.coinFlipWinner, choice });
                    rolesSwapped = true;
                    [lobbyData.participants.p1, lobbyData.participants.p2] = [lobbyData.participants.p2, lobbyData.participants.p1];
                    [lobbyData.roster.p1, lobbyData.roster.p2] = [lobbyData.roster.p2, lobbyData.roster.p1];

                    wss.clients.forEach(client => {
                        if (client.lobbyCode === lobbyCode) {
                            if (client.userRole === 'p1') client.userRole = 'p2';
                            else if (client.userRole === 'p2') client.userRole = 'p1';
                        }
                    });
                }
                
                draft.phase = 'egoBan';
                draft.action = 'egoBan';
                draft.currentPlayer = 'p1';
                draft.step = 0; // Initialize step for egoBan
                draft.actionCount = 1; // Each player bans 1

                updateLobbyActivity(lobbyCode);
                setTimerForLobby(lobbyCode, lobbyData);
                broadcastState(lobbyCode, rolesSwapped);
                break;
            }

            case 'draftHover': {
                if (!lobbyData) return;
                const { id: hoveredId } = payload;
                const { draft } = lobbyData;
                const { currentPlayer } = draft;
                if (ws.userRole !== currentPlayer && ws.userRole !== 'ref') return;

                // Validate hovered ID belongs to the correct pool for ID phases
                if (['ban', 'pick', 'midBan', 'pick2', 'pick_s2'].includes(draft.phase)) {
                    const isBanAction = (draft.phase === 'ban' || draft.phase === 'midBan');
                    
                    if (isBanAction) {
                        // For ban actions: validate against the authoritative ban pool
                        const bannableIds = draft.banPools[currentPlayer] || [];
                        if (!bannableIds.includes(hoveredId)) return;
                    } else {
                        // For pick actions: validate against own available roster
                        const sourceList = draft.available[currentPlayer] || [];
                        if (!sourceList.includes(hoveredId)) return;
                    }
                }

                draft.hovered[currentPlayer] = (draft.hovered[currentPlayer] === hoveredId) ? null : hoveredId;
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
                break;
            }

            case 'draftConfirm': {
                if (!lobbyData) return;
                handleDraftConfirm(lobbyCode, lobbyData, ws);
                // Any confirmation (ban or pick) can change future bannable pools.
                computeBanPools(lobbyData);
                break;
            }

            case 'draftControl': {
                if (!validateRefereeAccess(ws, lobbyData)) return;

                if (action === 'confirmEgoBans') {
                     // This action is now deprecated with alternating bans, but we keep the case to avoid errors.
                     // The logic now relies on single confirmations.
                } else if (action === 'complete') {
                    lobbyData.draft.phase = "complete";
                }
                
                updateLobbyActivity(lobbyCode);
                setTimerForLobby(lobbyCode, lobbyData);
                broadcastState(lobbyCode);
                break;
            }

            case 'timerControl': {
                if (!validateRefereeAccess(ws, lobbyData)) return;
                const { timer } = lobbyData.draft;
                
                if (timer.paused) { // unpausing
                    timer.paused = false;
                    timer.running = true;
                    timer.endTime = Date.now() + timer.pauseTime;
                    
                    const timeoutId = setTimeout(() => handleTimer(lobbyCode), timer.pauseTime);
                    lobbyTimers[lobbyCode] = { timeoutId };

                } else { // pausing
                    if (lobbyTimers[lobbyCode]) clearTimeout(lobbyTimers[lobbyCode].timeoutId);
                    timer.paused = true;
                    timer.running = false;
                    timer.pauseTime = Math.max(0, timer.endTime - Date.now());
                }
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
                break;
            }

            case 'keepAlive': {
                // Keep-alive message to prevent Render sleep during active drafts
                if (!lobbyData) return;
                updateLobbyActivity(lobbyCode);
                // Send a minimal acknowledgment to confirm server is active
                ws.send(JSON.stringify({ type: 'keepAliveAck' }));
                break;
            }
        }
    });

    ws.on('close', () => {
        logInfo('CONNECTION', 'Client disconnected', { remoteAddress: ws.remoteAddress, lobbyCode: ws.lobbyCode, userRole: ws.userRole });
        const { lobbyCode, userRole } = ws;
        if (lobbyCode && userRole && lobbies[lobbyCode]) {
            const lobbyData = lobbies[lobbyCode];
            const currentRole = Object.keys(lobbyData.participants).find(
                r => lobbyData.participants[r].rejoinToken === ws.rejoinToken
            ) || userRole;
            
            if (lobbyData.participants[currentRole]) {
                lobbyData.participants[currentRole].status = 'disconnected';
                lobbyData.participants[currentRole].ready = false;
                updateLobbyActivity(lobbyCode);
                broadcastState(lobbyCode);
            }
        }
    });
});

const LOBBY_TTL = 2 * 60 * 60 * 1000; // 2 hours

function cleanupInactiveLobbies() {
    const now = new Date();
    for (const lobbyCode in lobbies) {
        const lastActivity = new Date(lobbies[lobbyCode].lastActivity);
        if (now - lastActivity > LOBBY_TTL) {
            logInfo('CLEANUP', 'Cleaning up inactive lobby', { lobbyCode, lastActivity: lastActivity.toISOString(), hoursInactive: Math.round((now - lastActivity) / (1000 * 60 * 60) * 10) / 10 });
            if (lobbyTimers[lobbyCode] && lobbyTimers[lobbyCode].timeoutId) {
                clearTimeout(lobbyTimers[lobbyCode].timeoutId);
                delete lobbyTimers[lobbyCode];
            }
            delete lobbies[lobbyCode];
        }
    }
}

setInterval(cleanupInactiveLobbies, 30 * 60 * 1000);


const PORT = process.env.PORT || 8080;
server.listen(PORT, () => logInfo('SERVER', `Server started and listening on port ${PORT}`));




================================================
FILE: style.css
================================================
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Inter', sans-serif;
}

:root {
    --primary: #B31B1B;
    --primary-dark: #800000;
    --secondary: #2a2a2e;
    --accent: #FFD700;
    --text: #F0F0F0;
    --bg: #121212;
    --panel: #1E1E1E;
    --border: #444;
    --rarity-0: #cccccc;
    --rarity-00: #B22222;
    --rarity-000: #FFD700;
    --sin-wrath-bg: rgba(129,44,33,255);
    --sin-lust-bg: rgba(177,97,46,255);
    --sin-sloth-bg: rgba(226,136,3,255);
    --sin-gluttony-bg: rgba(106, 190, 48, 255);
    --sin-gloom-bg: rgba(45,102,116,255);
    --sin-pride-bg: rgba(22,81,131,255);
    --sin-envy-bg: rgba(128, 0, 128, 255);
    --connected: #4caf50;
    --disconnected: #f44336;
    --warning: #ff9800;
    --ready: #4caf50;
    --drafting: #2196F3;
    --hover: #ffeb3b;
}

body {
    background-color: var(--bg);
    background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.05) 1px, transparent 0);
    background-size: 20px 20px;
    color: var(--text);
    min-height: 100vh;
    padding: 20px;
}

.container {
    max-width: 1800px;
    margin: 0 auto;
}
.hidden {
    display: none !important;
}
header {
    text-align: center;
    padding: 20px 0;
    margin-bottom: 20px;
    position: relative;
}

h1 {
    font-size: 3.5rem;
    font-weight: 900;
    margin-bottom: 10px;
    color: var(--text);
    display: flex;
    align-items: center;
    justify-content: center;
}

.header-logo {
    width: 50px;
    height: auto;
    vertical-align: middle;
    margin-right: 15px;
    margin-bottom: 8px;
}

p {
    color: #aaa;
    font-size: 1.1rem;
}

h2 {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 20px 0;
    color: var(--accent);
    border-bottom: 1px solid var(--accent);
    padding-bottom: 10px;
    text-align: center;
}

h3 {
    font-size: 1.5rem;
    color: var(--text);
    margin-bottom: 15px;
}

h4 {
    font-size: 1.2rem;
    color: #ccc;
    margin-top: 20px;
    margin-bottom: 10px;
    font-weight: 700;
    border-bottom: 1px solid var(--border);
    padding-bottom: 5px;
}

.card {
    background: rgba(20, 20, 22, 0.7);
    border-radius: 16px;
    padding: 30px;
    margin-bottom: 30px;
    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.btn {
    padding: 15px 30px;
    border: 2px solid transparent;
    border-radius: 8px;
    background-image: linear-gradient(45deg, var(--primary-dark), var(--primary));
    color: white;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    font-size: 1.1rem;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    text-transform: uppercase;
    letter-spacing: 1px;
}

.btn:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.3);
    background-image: linear-gradient(45deg, var(--primary), #ff4d4d);
}

.btn:disabled {
    background: #444;
    cursor: not-allowed;
    opacity: 0.5;
}

.btn-primary {
    background-image: linear-gradient(45deg, #FFC107, var(--accent));
    color: #000;
}

.btn-primary:hover:not(:disabled) {
    background-image: linear-gradient(45deg, var(--accent), #fff200);
}

.btn-secondary {
    background-image: linear-gradient(45deg, #333, #555);
}
.btn-secondary:hover:not(:disabled) {
    background-image: linear-gradient(45deg, #444, #666);
}

.btn-large {
    padding: 18px 35px;
    font-size: 1.3rem;
}

.btn-small {
    padding: 8px 15px;
    font-size: 0.9rem;
}

#main-page {
    text-align: center;
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
}

.top-left-controls {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 10;
    display: flex;
    flex-direction: column;
    gap: 10px;
    align-items: flex-start;
}

.korean-toggle-container {
    background: rgba(30, 30, 30, 0.8);
    border-radius: 8px;
    padding: 8px 12px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
}

.korean-toggle-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    color: var(--text);
    font-size: 0.9rem;
    margin: 0;
}

.korean-toggle-checkbox {
    width: 16px;
    height: 16px;
    cursor: pointer;
    accent-color: var(--accent);
}

.korean-toggle-text {
    user-select: none;
    white-space: nowrap;
}


.logo {
    width: 150px;
    height: 150px;
    margin: 0 auto 20px;
    background: none;
    border-radius: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: none;
    animation: none;
}

.logo img {
    max-width: 100%;
    height: auto;
    /* Remove glow effect from logo */
    animation: none;
}

.welcome-text {
    font-size: 1.2rem;
    line-height: 1.8;
    margin-bottom: 40px;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
}

.action-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 30px;
    margin: 40px 0;
}

.action-card {
    background: var(--panel);
    border-radius: 15px;
    padding: 30px;
    border: 1px solid var(--border);
    display: flex;
    flex-direction: column;
    gap: 20px;
    transition: transform 0.3s, box-shadow 0.3s;
    position: relative;
    overflow: hidden;
}

.action-card:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--accent);
    transform: scaleX(0);
    transition: transform 0.4s ease-in-out;
    transform-origin: left;
}

.action-card:hover:before {
    transform: scaleX(1);
}

.action-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 30px rgba(0,0,0,0.4);
}

.action-icon {
    font-size: 3rem;
    color: var(--accent);
}

.action-title {
    font-size: 1.6rem;
    color: var(--text);
}

.action-description {
    font-size: 1rem;
    line-height: 1.6;
    flex-grow: 1;
    color: #aaa;
}

.lobby-options {
    background: rgba(0,0,0,0.2);
    border-radius: 15px;
    padding: 20px;
    margin: 20px 0;
    display: flex;
    flex-direction: column;
    gap: 15px;
    justify-content: center;
}

.lobby-access {
    background: rgba(30,30,30,0.8);
    border-radius: 15px;
    padding: 30px;
    margin: 40px auto;
    max-width: 600px;
    border: 1px solid var(--accent);
    box-shadow: 0 0 30px rgba(255, 215, 0, 0.2);
}

.form-group {
    margin-bottom: 20px;
    text-align: left;
}

label {
    display: block;
    margin-bottom: 8px;
    font-size: 1rem;
    color: #ccc;
    text-transform: uppercase;
    letter-spacing: 1px;
}

input, select {
    width: 100%;
    padding: 14px;
    border-radius: 8px;
    background: #111;
    border: 1px solid var(--border);
    color: var(--text);
    font-size: 1.1rem;
    transition: all 0.2s;
}

input:focus, select:focus {
    outline: none;
    border-color: var(--accent);
    box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.2);
}

.role-options {
    display: flex;
    gap: 15px;
    margin-top: 10px;
}

.role-option {
    flex: 1;
    text-align: center;
    padding: 15px;
    background: #222;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s;
    border: 2px solid transparent;
}

.role-option.selected {
    background: var(--primary);
    border-color: var(--accent);
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.3);
}

.role-option.disabled {
    opacity: 0.4;
    cursor: not-allowed;
    background: #111;
}

.btn-ready {
    background-image: linear-gradient(45deg, #1D976C, #93F9B9) !important;
    color: black !important;
}

.btn-ready:disabled {
    opacity: 0.8;
}

.status-ready {
    background: var(--ready) !important;
}
.lobby-info {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    align-items: center;
    gap: 20px;
    background: var(--secondary);
    padding: 20px;
    border-radius: 12px;
    margin-bottom: 30px;
    position: relative;
    border: 1px solid var(--border);
}

.lobby-info > div {
    text-align: center;
}

.timer-display {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--accent);
    padding: 10px;
    background: rgba(0,0,0,0.3);
    border-radius: 8px;
    margin-top: 10px;
    min-width: 140px;
    text-align: center;
    transition: all 0.3s ease;
}

.timer-display.reserve-active {
    color: var(--warning);
    animation: pulse-warning 1.5s infinite;
}

.draft-player-column.draft-active, .draft-interaction-hub.draft-active {
    box-shadow: 0 0 25px var(--accent);
    border: 2px solid var(--accent);
    transform: scale(1.01);
}

/* Red shine for draft-active elements during ban phases */
.draft-ban-phase .draft-player-column.draft-active, 
.draft-ban-phase .draft-interaction-hub.draft-active {
    box-shadow: 0 0 25px var(--primary);
    border: 2px solid var(--primary);
}

/* Your Side Indicator */
.your-side-indicator {
    color: var(--accent);
    font-size: 0.9rem;
    margin-left: 8px;
    animation: gentle-pulse 2s infinite;
}

@keyframes gentle-pulse {
    0%, 100% { 
        opacity: 1; 
        transform: scale(1);
    }
    50% { 
        opacity: 0.7; 
        transform: scale(1.1);
    }
}

@keyframes selection-glow {
    0%, 100% { 
        box-shadow: 0 0 15px rgba(255, 215, 0, 0.6);
    }
    50% { 
        box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
    }
}

@keyframes selection-glow-red {
    0%, 100% { 
        box-shadow: 0 0 15px rgba(179, 27, 27, 0.6);
    }
    50% { 
        box-shadow: 0 0 20px rgba(179, 27, 27, 0.8);
    }
}

/* Enhanced turn indication with stronger glow effect */
.draft-player-column.draft-active {
    animation: active-glow 1.5s ease-in-out infinite alternate;
}

/* Red animated glow for draft-active elements during ban phases */
.draft-ban-phase .draft-player-column.draft-active {
    animation: active-glow-red 1.5s ease-in-out infinite alternate;
}

@keyframes active-glow {
    0% { 
        box-shadow: 0 0 25px var(--accent);
        border: 2px solid var(--accent);
    }
    100% { 
        box-shadow: 0 0 35px var(--accent), 0 0 60px rgba(255, 140, 0, 0.3);
        border: 2px solid var(--accent);
    }
}

@keyframes active-glow-red {
    0% { 
        box-shadow: 0 0 25px var(--primary);
        border: 2px solid var(--primary);
    }
    100% { 
        box-shadow: 0 0 35px var(--primary), 0 0 60px rgba(179, 27, 27, 0.3);
        border: 2px solid var(--primary);
    }
}
.role-option i {
    font-size: 2rem;
    margin-bottom: 10px;
    color: var(--accent);
}

.participant.current-user {
    background: var(--primary-dark);
    border: 2px solid var(--accent);
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
}

#lobby-view, #roster-builder-page {
    display: none;
}

.code-display {
    font-family: monospace;
    font-size: 2rem;
    letter-spacing: 6px;
    padding: 12px 25px;
    background: #000;
    border-radius: 8px;
    color: var(--accent);
    border: 1px solid var(--accent);
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.3);
    transition: filter 0.3s ease;
    user-select: none; /* Make non-selectable */
    cursor: pointer; /* Show it's clickable */
}

.code-display:hover {
    background: #1a1a1a;
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.4);
}

.code-display.hidden {
    filter: blur(6px);
    user-select: none;
}

.code-display-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

#toggle-code-visibility {
    padding: 10px 12px;
}


.participants {
    display: flex;
    gap: 15px;
    font-size: 1.1rem;
    flex-wrap: wrap;
    justify-content: center;
}

.participant {
    background: #333;
    padding: 10px 20px;
    border-radius: 25px;
    display: flex;
    align-items: center;
    gap: 10px;
    transition: transform 0.3s;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
}

.participant:hover {
    transform: translateY(-5px);
}

.back-button {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 10;
}

.phase-section {
    flex: 1;
    min-width: 300px;
}

@keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(255, 215, 0, 0.4); filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.4)); }
    70% { box-shadow: 0 0 0 10px rgba(255, 215, 0, 0); filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.7)); }
    100% { box-shadow: 0 0 0 0 rgba(255, 215, 0, 0); filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.4)); }
}

@keyframes pulse-warning {
    0% { box-shadow: 0 0 5px 0px var(--warning); }
    50% { box-shadow: 0 0 15px 5px var(--warning); }
    100% { box-shadow: 0 0 5px 0px var(--warning); }
}

.player-area {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
}

.player-panel {
    flex: 1;
    min-width: 280px;
    background: var(--secondary);
    border-radius: 10px;
    padding: 15px;
    border: 1px solid var(--border);
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    transition: all 0.3s ease;
    position: relative;
}

.player-panel.locked::after {
    content: 'LOCKED';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    color: var(--accent);
    font-weight: bold;
    z-index: 5;
    border-radius: 10px;
    backdrop-filter: blur(2px);
}


.controls {
    display: flex;
    justify-content: space-around; 
    align-items: center;
    gap: 10px;
    margin-top: 20px;
    position: relative; /* keep buttons above locked overlay */
    z-index: 6;       /* keep buttons above locked overlay */
    flex-wrap: wrap;  /* prevent buttons from overflowing container */
}

.player-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--border);
}

.player-name {
    font-size: 1.4rem;
    font-weight: bold;
    color: var(--accent);
}

.player-status {
    background: var(--primary);
    padding: 3px 10px;
    border-radius: 20px;
    font-size: 0.9rem;
}

/* Compact Pick/Ban List */
.compact-id-list {
    margin: 10px 0;
    padding: 10px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    display: grid;
    grid-template-columns: repeat(auto-fill, 100px);
    gap: 8px;
    min-height: 90px;
    align-content: start;
    max-height: 40vh;
    overflow-y: auto;
    justify-content: center;
}

.compact-id-list.section2-picks {
    border: 2px dashed var(--accent);
    background: rgba(255, 215, 0, 0.05);
}

.compact-id-list .id-item {
    padding: 0;
    background: transparent;
    border: none;
    cursor: default;
    width: 100px; /* Constrain item to grid column size */
    max-width: 100px; /* Prevent expansion */
}
.compact-id-list .id-item .id-name {
    display: none;
}
.compact-id-list .id-item .id-icon {
    width: 100%; /* Fill the container completely */
    height: 100%; /* Fill the container completely */
    aspect-ratio: 1 / 1;
    border-radius: 6px; /* Slightly smaller than container */
    border: none; /* Border handled by container */
    max-width: none; /* Remove constraints to fill container */
    object-fit: cover; /* Ensure image fits properly */
    transition: all 0.2s ease;
}

.id-item {
    position: relative;
    padding: 0; /* Remove padding so image fills container */
    margin: 0;
    background: transparent; /* No background since we're going image-only */
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 0; /* Remove gap for image-only layout */
    cursor: pointer;
    transition: all 0.3s, border-color 0.3s;
    border: 2px solid var(--border); /* Default border for all items */
    width: 100px; /* Match image size */
    height: 100px; /* Match image size */
    overflow: hidden; /* Ensure clean borders */
}

/* Hide ID names by default - show only images */
.id-item .id-name {
    display: none;
}

/* ID icons get consistent sizing */
.id-item .id-icon {
    width: 100%;
    height: 100%;
    border-radius: 6px; /* Slightly smaller radius than container */
    border: none; /* Remove border since container handles it */
    object-fit: cover;
    transition: transform 0.2s ease;
}

.id-item.rarity-0 { border-left-color: var(--rarity-0); }
.id-item.rarity-00 { border-left-color: var(--rarity-00); }
.id-item.rarity-000 { border-left-color: var(--rarity-000); }

.id-item:hover {
    transform: scale(1.05);
}

/* === SIMPLE HOVER SYSTEM === */
/* All ID items now use consistent image-only layout with scale hover */
.id-item:hover,
.id-item.hovered {
    transform: scale(1.05);
}

/* Selected ID items get a prominent gold border by default */
.id-item.selected {
    border: 3px solid var(--accent);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6); /* Gold glow effect */
    animation: selection-glow 2s ease-in-out infinite; /* Animated glow */
    position: relative;
    z-index: 2; /* Ensure glow appears above adjacent items */
}

/* Draft phase specific border colors */
.draft-ban-phase .id-item.selected {
    border: 3px solid var(--primary);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(179, 27, 27, 0.6); /* Red glow effect */
    animation: selection-glow-red 2s ease-in-out infinite; /* Animated red glow */
    position: relative;
    z-index: 2;
}

.draft-pick-phase .id-item.selected {
    border: 3px solid var(--accent);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6); /* Gold glow effect */
    animation: selection-glow 2s ease-in-out infinite; /* Animated glow */
    position: relative;
    z-index: 2;
}

/* Compact contexts - maintain existing scale effect */
.compact-id-list .id-item:hover .id-icon,
.compact-id-list .id-item.hovered .id-icon {
    transform: scale(1.05);
    transition: transform 0.2s ease;
}

/* Final picks/bans - maintain existing scale effect */
.final-picks .id-item:hover .id-icon,
.final-picks .id-item.hovered .id-icon,
.final-bans .id-item:hover .id-icon,
.final-bans .id-item.hovered .id-icon {
    transform: scale(1.05);
    transition: transform 0.2s ease;
}

/* Sinner grouped roster - maintain existing scale effect */
.sinner-grouped-roster .id-item:hover,
.sinner-grouped-roster .id-item.hovered {
    transform: scale(1.05);
    z-index: 2;
    transition: transform 0.2s ease;
}

/* Disable conflicting transforms for compact contexts */
.compact-id-list .id-item:hover,
.final-picks .id-item:hover,
.final-bans .id-item:hover,
.compact-id-list .id-item.hovered,
.final-picks .id-item.hovered,
.final-bans .id-item.hovered {
    transform: none !important;
}

.shared-icon {
    position: absolute;
    top: 4px;
    right: 4px;
    width: 22px;
    height: 22px;
    background-color: rgba(0, 0, 0, 0.7);
    color: #fff;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    opacity: 0.85;
    z-index: 2;
    border: 1px solid #fff;
}

.id-icon {
    width: 100%;
    height: 100%;
    border-radius: 6px;
    object-fit: cover;
    flex-shrink: 0;
    border: none; /* Border handled by container */
    /* Subtle inner/outer shadow to give images a carded feel */
    box-shadow: inset 0 0 0 1px rgba(255,255,255,0.05), 0 0 6px rgba(0,0,0,0.45);
}

.id-name {
    flex-grow: 1;
    font-size: 0.95rem;
    font-weight: 500;
    min-height: 2.5em; 
    display: flex;
    align-items: center;
    line-height: 1.25;
    /* Keep single-line with ellipsis to avoid height jumps */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.roster-selection {
    display: grid;
    grid-template-columns: repeat(auto-fill, 100px); /* Fixed width for image-only layout */
    gap: 8px;
    margin-top: 15px;
    max-height: 500px;
    overflow-y: auto;
    padding: 10px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    justify-content: center; /* Center the grid */
}

.counter {
    text-align: center;
    margin: 10px 0;
    font-size: 1.1rem;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
}

.counter strong {
    color: var(--accent);
    font-size: 1.3rem;
}

.roster-complete {
    background: rgba(0, 100, 0, 0.3);
    padding: 10px;
    border-radius: 5px;
    text-align: center;
    margin-top: 10px;
    font-weight: bold;
    border: 1px solid rgba(0, 200, 0, 0.3);
}

.status-ready { background: var(--ready) !important; color: #fff !important; }
.status-drafting { background: var(--drafting) !important; color: #fff !important; }
.status-waiting { background: #a0a0a0 !important; color: #fff !important; }

.connection-status {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 8px 15px;
    border-radius: 20px;
    font-weight: bold;
    color: #000;
    display: flex;
    align-items: center;
    gap: 8px;
    z-index: 100;
    background: var(--disconnected);
    transition: background-color 0.3s;
}
.connection-status.connecting { background: var(--warning); }
.connection-status.connected { background: var(--connected); }


.notification {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 15px 25px;
    background: var(--primary);
    border-radius: 8px;
    color: white;
    font-weight: bold;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s, transform 0.3s;
    max-width: 90%;
    text-align: center;
}

.notification.show {
    opacity: 1;
    transform: translateX(-50%) translateY(10px);
}

#completed-view { text-align: center; display: none; }

.final-rosters-container {
    display: flex;
    gap: 30px;
    margin: 30px 0;
    flex-wrap: wrap;
    justify-content: center;
}

.final-player-panel {
    flex: 1;
    min-width: 400px;
    max-width: 500px;
    background: var(--panel);
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.7);
    border: 1px solid var(--border);
    border-top: 4px solid var(--primary);
}

.final-player-panel h2 { font-size: 1.8rem; }
.final-player-panel h3 {
    font-size: 1.2rem;
    margin-top: 20px;
    color: #ccc;
    border-top: 1px solid var(--border);
    padding-top: 15px;
}
.final-player-panel h4 {
    font-size: 1.1rem;
    color: var(--accent);
    margin-top: 15px;
    margin-bottom: 5px;
    border-bottom: none;
    padding-bottom: 0;
}

.final-picks, .final-bans {
    display: grid;
    grid-template-columns: repeat(auto-fill, 100px); /* Fixed 100px columns to match ID size */
    gap: 8px;
    margin-top: 15px;
    background: rgba(0,0,0,0.2);
    padding: 10px;
    border-radius: 8px;
    justify-content: center; /* Center the grid when not completely filled */
}
.final-picks .id-item, .final-bans .id-item {
    padding: 0;
    background: transparent;
    border: none;
    width: 100px; /* Match grid column width */
    height: 100px; /* Square aspect ratio */
    display: flex;
    align-items: center;
    justify-content: center;
}
.final-picks .id-item .id-name, .final-bans .id-item .id-name {
    display: none;
}
.final-picks .id-item .id-icon, .final-bans .id-item .id-icon {
    width: 100px; /* Fixed size to match container */
    height: 100px; /* Fixed size to match container */
    aspect-ratio: 1 / 1;
    border-radius: 6px;
    border: none; /* Border handled by container */
    object-fit: cover;
    transition: all 0.2s ease;
}

.final-bans .id-item .id-icon {
    filter: grayscale(80%);
    opacity: 0.7;
}

#restart-draft { margin: 20px auto; }

.filter-bar {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    align-items: flex-end;
    padding: 15px;
    background: rgba(0,0,0,0.2);
    border-radius: 8px;
    margin-bottom: 20px;
}
.filter-group { flex: 1; min-width: 150px; }
.filter-label { display: block; margin-bottom: 5px; font-size: 0.9rem; color: #ccc; }

/* --- NEW EGO BAN STYLES --- */
.ego-ban-layout {
    display: flex;
    flex-direction: column; /* Mobile first */
    gap: 20px;
}

#ego-ban-main-panel {
    flex: 3;
    background: var(--panel);
    padding: 20px;
    border-radius: 10px;
    border: 1px solid var(--border);
}

#ego-ban-side-panel {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

#ego-ban-player-bans-section, #opponent-roster-display {
    background: var(--secondary);
    padding: 20px;
    border-radius: 10px;
    border-top: 4px solid var(--accent);
}

/* Optimize opponent roster layout in EGO ban phase */
#opponent-roster-display .sinner-grouped-roster {
    max-height: 400px; /* Increased height for better visibility */
}

#opponent-roster-display .sinner-id-container {
    /* Use fixed 100px grid columns, left-aligned */
    grid-template-columns: repeat(auto-fill, 100px);
    gap: 8px;
    justify-content: start; /* Stack to the left instead of stretching */
}

#opponent-roster-display .id-item {
    /* Fixed 100px sizing, no expansion */
    width: 100px;
    height: 100px;
    min-width: 100px;
    max-width: 100px;
}

#opponent-roster-display .id-item .id-icon {
    /* Consistent 100px sizing for all contexts */
    width: 100px;
    height: 100px;
    object-fit: cover;
}

#current-player-ego-bans {
    margin-top: 15px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    min-height: 240px;
}

#current-player-ego-bans .banned-ego-item {
    text-decoration: none;
    background: var(--primary-dark);
    border: 1px solid var(--border);
}

.ego-ban-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr)); /* more compact */
    gap: 10px; /* more compact */
    max-height: 70vh; 
    overflow-y: auto;
    padding: 10px;
}

.ego-item {
    background: var(--panel);
    border-radius: 8px;
    padding: 8px; /* more compact */
    display: flex;
    flex-direction: column;
    gap: 5px;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    border: 1px solid var(--border);
    border-left-width: 5px;
    position: relative;
}

.ego-item:hover {
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 4px 15px rgba(0,0,0,0.5);
    border-color: var(--primary); /* Always red since EGO is only interactive during ban phase */
}

.ego-item.hovered {
    border-color: var(--primary) !important; /* Always red since EGO is only interactive during ban phase */
    box-shadow: 0 0 10px var(--primary);
}

.ego-item.banned {
    opacity: 0.5;
    cursor: not-allowed;
    background: #222;
}

.ego-item.banned::after {
    content: '\f05e'; /* ban icon */
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    color: var(--primary);
    background: rgba(0,0,0,0.4);
    border-radius: 8px;
}

.ego-header {
    display: flex;
    justify-content: flex-end;
    font-weight: bold;
    margin-bottom: 5px;
}

.ego-rarity {
    padding: 2px 6px;
    border-radius: 4px;
    background-color: rgba(0,0,0,0.2);
    color: #fff;
}

.ego-name {
    color: var(--text);
    font-size: 1.0rem; /* more compact */
    font-weight: bold;
    flex-grow: 1;
    min-height: 2.5em;
    display: flex;
    align-items: center;
    line-height: 1.25;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 100%;
}

.banned-egos-display {
    background: var(--panel);
    padding: 15px;
    border-radius: 10px;
    margin: 20px 0;
    border: 1px solid var(--border);
}

.banned-egos-list {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: center;
}

.banned-ego-item {
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 0.9rem;
    text-align: center;
    color: var(--text);
    border: 1px solid transparent;
}
.banned-ego-item .rarity {
    font-weight: bold;
    margin-right: 5px;
    background: rgba(0,0,0,0.2);
    padding: 2px 4px;
    border-radius: 3px;
    color: #fff;
}
.banned-ego-item .name { text-decoration: line-through; }
/* --- END NEW EGO BAN STYLES --- */


/* Roster Builder Styles */
#roster-builder-page .card {
    display: flex;
    flex-direction: column; /* Default to stacked layout */
    gap: 20px;
}

.builder-content-wrapper {
    display: flex;
    flex-direction: column; /* Stack panels by default */
    gap: 20px;
}

.builder-sinner-nav {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 8px;
}

.sinner-nav-btn {
    padding: 6px 10px; /* Reduced vertical padding */
    font-size: 0.9rem; /* Reduced font size */
    flex-grow: 1; /* Allow buttons to grow and fill space */
    text-align: center;
    background: var(--secondary);
    border: 1px solid var(--border);
}

.sinner-nav-btn.selected {
    background: var(--primary);
    color: var(--accent);
    border-bottom: 4px solid var(--accent);
    border-left: 1px solid var(--border);
}

.builder-main-panel { 
    background: rgba(0,0,0,0.2);
    padding: 15px;
    border-radius: 10px;
}
.builder-side-panel { 
    background: var(--secondary); 
    padding: 20px; 
    border-radius: 10px; 
    align-self: stretch;
}

.builder-id-pool {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 10px;
    max-height: 70vh;
    overflow-y: auto;
    padding: 10px;
}

#builder-roster-code {
    word-wrap: break-word;
    background: #111;
    padding: 10px;
    border-radius: 5px;
    font-family: monospace;
    min-height: 50px;
    margin-top: 10px;
}
.roster-code-actions {
    display: flex;
    gap: 10px;
    margin-top: 10px;
}
.roster-code-actions input { flex-grow: 1; }
.roster-code-actions .btn { padding: 14px; }

.roster-load-form {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-top: 10px;
}

/* NEW: Universal Grouped Roster View Styles */
.sinner-grouped-roster {
    display: flex;
    flex-direction: column;
    gap: 5px; /* Tighter space between sinner rows */
    max-height: 500px;
    overflow-y: auto;
    padding: 10px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
}

.sinner-grouped-roster .sinner-header {
    height: 0;
    border-bottom: 1px solid var(--border);
    margin: 4px 0; /* Reduced margin */
    padding: 0;
}
.sinner-grouped-roster .sinner-id-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, 100px);
    gap: 5px;
    justify-content: center;
}
/* Style the id-item when it's inside the new container */
.sinner-grouped-roster .id-item {
    padding: 0; /* Remove padding so image fills container */
    background: transparent;
    border: 2px solid var(--border); /* Default border */
    border-radius: 8px;
    gap: 0;
    width: 100px;
    height: 100px;
    overflow: hidden;
    transition: all 0.2s ease;
}
.sinner-grouped-roster .id-item .id-name {
    display: none; /* Hide the name */
}
.sinner-grouped-roster .id-item .id-icon {
    width: 100%; /* Fill container completely */
    height: 100%; /* Fill container completely */
    max-width: none; /* Remove size constraints */
    max-height: none; /* Remove size constraints */
    border-radius: 6px; /* Slightly smaller than container */
    object-fit: cover; /* Ensure image fits properly */
}

/* Selected items in sinner grouped roster get prominent gold border */
.sinner-grouped-roster .id-item.selected {
    border: 3px solid var(--accent);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6); /* Gold glow effect */
    animation: selection-glow 2s ease-in-out infinite; /* Animated glow */
    position: relative;
    z-index: 2;
}

/* Draft phase specific border colors for sinner grouped roster */
.draft-ban-phase .sinner-grouped-roster .id-item.selected {
    border: 3px solid var(--primary);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(179, 27, 27, 0.6); /* Red glow effect */
    animation: selection-glow-red 2s ease-in-out infinite; /* Animated red glow */
    position: relative;
    z-index: 2;
}

.draft-pick-phase .sinner-grouped-roster .id-item.selected {
    border: 3px solid var(--accent);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6); /* Gold glow effect */
    animation: selection-glow 2s ease-in-out infinite; /* Animated glow */
    position: relative;
    z-index: 2;
}

/* Draft phase specific border colors for final picks/bans sections */
.draft-ban-phase .final-picks .id-item.selected,
.draft-ban-phase .final-bans .id-item.selected {
    border: 3px solid var(--primary);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(179, 27, 27, 0.6); /* Red glow effect */
    animation: selection-glow-red 2s ease-in-out infinite; /* Animated red glow */
    position: relative;
    z-index: 2;
}

/* Red border around banned IDs windows during draft */
.draft-ban-phase #p1-id-bans,
.draft-ban-phase #p2-id-bans {
    border: 2px solid var(--primary);
    border-radius: 8px;
}

/* Red border around banned IDs in completed view and draft - persistent styling */
.final-bans,
#p1-id-bans,
#p2-id-bans {
    border: 2px solid var(--primary) !important;
    border-radius: 8px !important;
}

.draft-pick-phase .final-picks .id-item.selected,
.draft-pick-phase .final-bans .id-item.selected {
    border: 3px solid var(--accent);
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6); /* Gold glow effect */
    animation: selection-glow 2s ease-in-out infinite; /* Animated glow */
    position: relative;
    z-index: 2;
}

/* --- Triptych Layout --- */
.triptych-layout {
    display: flex;
    gap: 20px;
    align-items: flex-start;
}

.draft-player-column {
    flex: 1;
    min-width: 250px;
    background: var(--secondary);
    padding: 15px;
    border-radius: 10px;
    border: 1px solid var(--border);
    height: 100%;
    transition: all 0.3s ease;
}

.reserve-timer-display {
    background: rgba(0,0,0,0.2);
    color: var(--warning);
    padding: 5px 10px;
    border-radius: 5px;
    text-align: center;
    font-weight: bold;
    margin: 10px 0;
    font-size: 1rem;
}

.draft-interaction-hub {
    flex: 2;
    min-width: 400px;
    background: var(--panel);
    padding: 20px;
    border-radius: 10px;
    border: 1px solid var(--border);
    transition: all 0.3s ease;
}

.draft-pool-container {
    margin-bottom: 20px;
}

.draft-controls {
    display: flex;
    gap: 15px;
    justify-content: center;
    flex-wrap: wrap;
}

/* --- Modals --- */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.85);
    z-index: 9998;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(5px);
}
/* Responsive tweaks */
@media (max-width: 1200px) {
    #main-page { max-width: 100%; padding: 0 10px; }
    .action-container { grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); }
    .draft-interaction-hub { min-width: 320px; }
}

@media (max-width: 992px) {
    .player-area { flex-direction: column; }
    .draft-interaction-hub, .draft-player-column { min-width: unset; width: 100%; }
    .triptych-layout { flex-direction: column; }
    .ego-ban-layout { flex-direction: column; }
    .builder-content-wrapper { flex-direction: column; }
    .filter-bar { gap: 10px; padding: 10px; }
    .controls { gap: 8px; }
}

@media (max-width: 768px) {
    h1 { font-size: clamp(1.8rem, 5vw, 2.6rem); }
    h2 { font-size: clamp(1.4rem, 3.5vw, 1.8rem); }
    .btn { padding: 12px 18px; font-size: 1rem; }
    .controls .btn { min-width: 120px; }
    .id-icon { width: 100px; height: 100px; }
    .id-name { font-size: 0.9rem; }
    .roster-selection { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); }
    .builder-id-pool { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); }
    .draft-interaction-hub { padding: 15px; }
    
    /* Adjust compact ID list for smaller screens */
    .compact-id-list {
        grid-template-columns: repeat(auto-fill, 90px);
    }
}

@media (max-width: 576px) {
    body { padding: 12px; }
    .top-left-controls { top: 10px; left: 10px; }
    .btn-small { padding: 6px 10px; font-size: 0.85rem; }
    .roster-load-form { flex-direction: column; align-items: stretch; }
    .roster-load-form input { width: 100%; }
    .filter-group { min-width: 120px; }
    .slider-row { grid-template-columns: 26px 1fr 22px; }
    
    /* Further adjust for very small screens */
    .compact-id-list {
        grid-template-columns: repeat(auto-fill, 70px);
    }
}
.modal-content {
    background: var(--panel);
    padding: 40px;
    border-radius: 15px;
    text-align: center;
    border: 1px solid var(--accent);
    box-shadow: 0 0 40px rgba(255, 215, 0, 0.2);
    width: 90%;
    max-width: 600px;
    position: relative;
}

.modal-content .close-modal-btn {
    position: absolute;
    top: 10px;
    right: 15px;
    background: none;
    border: none;
    font-size: 2.5rem;
    color: #fff;
    cursor: pointer;
    line-height: 1;
}

.rules-content {
    text-align: left;
    max-height: 60vh;
    overflow-y: auto;
    padding-right: 15px;
}
.rules-content p {
    margin-bottom: 1em;
}

.coin {
    width: 100px;
    height: 100px;
    margin: 20px auto;
    perspective: 1000px;
}
.coin-inner {
    width: 100%;
    height: 100%;
    position: relative;
    transform-style: preserve-3d;
    background-image: linear-gradient(45deg, #FFC107, var(--accent));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    color: #000;
    box-shadow: 0 0 20px var(--accent);
}
.coin-inner::before {
    content: '\f51e'; /* coins icon */
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}
.coin.flipping .coin-inner {
    animation: spin 1.5s cubic-bezier(0.5, 0, 0.5, 1) infinite;
}
@keyframes spin {
    0% { transform: rotateY(0deg); }
    100% { transform: rotateY(1080deg); }
}
#coin-flip-status {
    font-size: 1.5rem;
    margin-bottom: 20px;
    min-height: 50px;
}
#turn-choice-buttons {
    display: flex;
    gap: 20px;
    justify-content: center;
}

/* --- Join Lobby Area --- */
#join-lobby-card .action-title {
    text-align: center;
    border-bottom: none;
    margin-bottom: 0;
}
#join-lobby-card .join-tabs {
    margin-top: 15px;
}

.join-tabs {
    display: flex;
    border-bottom: 1px solid var(--border);
    margin-bottom: 20px;
}
.join-tab-btn {
    padding: 10px 20px;
    cursor: pointer;
    background: none;
    border: none;
    color: #aaa;
    font-size: 1.1rem;
    border-bottom: 3px solid transparent;
    transition: all 0.3s;
    flex-grow: 1;
}
.join-tab-btn:hover {
    color: #fff;
}
.join-tab-btn.active {
    color: var(--accent);
    border-bottom-color: var(--accent);
}

.join-tab-content {
    display: none;
    flex-grow: 1;
}
.join-tab-content.active {
    display: block;
}

.public-lobbies-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}
.public-lobbies-header h4 {
    margin: 0;
    border: none;
    padding: 0;
    text-align: left;
}

#public-lobbies-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-height: 250px;
    overflow-y: auto;
    text-align: left;
    padding: 5px;
}

.public-lobby-item {
    display: grid;
    grid-template-columns: 2fr 1.5fr 1.5fr auto;
    gap: 15px;
    align-items: center;
    padding: 15px;
    background: var(--secondary);
    border-radius: 8px;
    border-left: 4px solid var(--accent);
    transition: background-color 0.2s;
}
.public-lobby-item:hover {
    background: #3a3a3e;
}

.lobby-item-name {
    font-weight: bold;
    font-size: 1.1rem;
}
.lobby-item-players {
    color: #ccc;
}
.lobby-item-players i {
    margin-right: 5px;
}
.lobby-item-mode {
    font-style: italic;
    color: #ddd;
}


#draft-status-panel {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 99;
    background: rgba(30, 30, 30, 0.95);
    backdrop-filter: blur(8px);
    border: 1px solid var(--border);
    border-top: 3px solid var(--accent);
    border-radius: 12px;
    padding: 20px;
    width: auto;
    min-width: 380px;
    max-width: 450px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.5);
    text-align: left;
    transition: all 0.3s ease;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
}

.status-text {
    flex-grow: 1;
}

#draft-status-panel #current-phase {
    font-size: 1.4rem;
    margin: 0 0 8px 0;
    padding: 0;
    border: none;
    color: var(--accent);
    font-weight: 700;
}

#draft-status-panel #draft-action-description {
    font-size: 1.0rem;
    color: #ddd;
    min-height: 0;
    margin: 0;
    line-height: 1.4;
}

.status-timer {
    text-align: center;
}

#draft-status-panel .timer-display {
    margin: 0;
    font-size: 2.2rem;
}

#draft-status-panel #ref-timer-control {
    padding: 8px 10px;
    font-size: 0.9rem;
}


.advanced-random-container {
    margin-top: 20px;
    border-top: 1px solid var(--border);
    padding-top: 20px;
}

#advanced-random-options {
    margin-top: 15px;
    padding: 15px;
    background: rgba(0,0,0,0.2);
    border-radius: 8px;
}

#advanced-random-options h4 {
    margin-top: 0;
    text-align: center;
}

#advanced-random-options p {
    font-size: 0.9rem;
    text-align: center;
    margin-bottom: 15px;
}

#sinner-sliders-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-height: 300px;
    overflow-y: auto;
    padding-right: 10px;
}

.sinner-slider-group {
    display: grid;
    grid-template-columns: 70px 1fr; /* Sinner name, then sliders */
    gap: 10px;
    align-items: center;
}
.sinner-slider-group label {
    font-size: 1rem;
    font-weight: bold;
}
.slider-container {
    display: flex;
    flex-direction: column;
    gap: 5px;
}
.slider-row {
    display: grid;
    grid-template-columns: 30px 1fr 25px;
    gap: 8px;
    align-items: center;
    font-size: 0.9rem;
}
.slider-value {
    font-weight: bold;
    color: var(--accent);
    text-align: right;
}

.advanced-random-summary {
    margin-top: 15px;
    padding-top: 10px;
    border-top: 1px solid var(--border);
    text-align: center;
    font-weight: bold;
}

/* Dark scrollbars (right side) to match theme */
*::-webkit-scrollbar {
    width: 10px;
    height: 10px;
}
*::-webkit-scrollbar-track {
    background: #1a1a1a;
}
*::-webkit-scrollbar-thumb {
    background: #333;
    border-radius: 8px;
    border: 2px solid #1a1a1a;
}
*::-webkit-scrollbar-thumb:hover {
    background: #444;
}

/* Firefox scrollbar */
* {
    scrollbar-color: #333 #1a1a1a;
    scrollbar-width: thin;
}

/* Improve keyboard focus visibility without white outlines */
.btn:focus-visible,
input:focus-visible,
select:focus-visible {
    outline: 2px solid rgba(255, 215, 0, 0.6);
    outline-offset: 2px;
}

/* Dark themed sliders */
.slider-row input[type="range"] {
    appearance: none;
    -webkit-appearance: none;
    width: 100%;
    height: 6px;
    background: #333;
    border-radius: 4px;
    outline: none;
}
.slider-row input[type="range"]::-ms-fill-lower,
.slider-row input[type="range"]::-ms-fill-upper {
    background: #333;
    border: none;
}
.slider-row input[type="range"]::-webkit-slider-thumb {
    appearance: none;
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: var(--accent);
    border: 2px solid #000;
    cursor: pointer;
    box-shadow: 0 0 6px rgba(255, 215, 0, 0.4);
}
.slider-row input[type="range"]::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: var(--accent);
    border: 2px solid #000;
    cursor: pointer;
    box-shadow: 0 0 6px rgba(255, 215, 0, 0.4);
}
.slider-row input[type="range"]::-ms-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: var(--accent);
    border: 2px solid #000;
    cursor: pointer;
}
.slider-row input[type="range"]::-webkit-slider-runnable-track {
    height: 6px;
    background: #333;
    border-radius: 4px;
}
.slider-row input[type="range"]::-moz-range-track {
    height: 6px;
    background: #333;
    border-radius: 4px;
}
.slider-row input[type="range"]::-ms-track {
    height: 6px;
    background: #333;
    border-radius: 4px;
    border-color: transparent;
    color: transparent;
}

/* Tooltip Style */
#id-tooltip {
    position: fixed;
    background-color: rgba(0, 0, 0, 0.95);
    color: var(--accent);
    padding: 8px 12px;
    border-radius: 6px;
    border: 1px solid var(--accent);
    font-size: 0.95rem;
    font-weight: bold;
    z-index: 10001;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.2s ease-in-out;
    max-width: 300px;
    overflow-wrap: anywhere;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
}


/* Medium screens and up */
@media (min-width: 992px) {
    .ego-ban-layout {
        flex-direction: row;
        align-items: flex-start;
    }
    
    /* Optimize EGO ban layout proportions */
    #ego-ban-main-panel {
        flex: 2; /* Reduced from 3 to give more space to side panel */
    }
    
    #ego-ban-side-panel {
        flex: 1.2; /* Increased from 1 to give more room for roster display */
        min-width: 350px; /* Ensure minimum width for roster visibility */
    }
    
    #roster-builder-page .card {
        flex-direction: row;
    }
    .builder-sinner-nav {
        flex-direction: column;
        flex-wrap: nowrap;
        flex: 0 0 130px; /* Fixed width for the sinner nav */
        gap: 4px; /* Reduced gap */
    }
    .sinner-nav-btn {
        text-align: left;
    }
    .sinner-nav-btn.selected {
         border-bottom: 1px solid var(--border);
         border-left: 4px solid var(--accent);
    }
    .builder-content-wrapper {
        flex: 1;
        display: flex;
        flex-direction: row;
    }
    .builder-main-panel { 
        flex: 2; 
        min-width: 350px; 
    }
    .builder-side-panel { 
        flex: 1;
        min-width: 280px; 
    }
}

/* Large screens */
@media (min-width: 1400px) {
    .builder-side-panel {
        flex: 1.2;
    }
    .draft-player-column {
        flex: 1;
    }
    .draft-interaction-hub {
        flex: 2.5;
    }
}

@media (max-width: 991px) {
    .triptych-layout {
        flex-direction: column;
    }
    .draft-player-column, .draft-interaction-hub {
        width: 100%;
    }
}


@media (max-width: 768px) {
    .container { max-width: 100%; }
    .action-container {
        grid-template-columns: 1fr;
    }
    .final-player-panel { min-width: 100%; }
    .lobby-info { flex-direction: column; gap: 20px; }
    h1 { font-size: 2.5rem; }
    .code-display { font-size: 1.5rem; letter-spacing: 4px; }
    .role-options { flex-direction: column; }
    .phase-container, .player-area { flex-direction: column; }
    .connection-status { top: 5px; right: 5px; font-size: 0.8rem; padding: 5px 10px; }
    #draft-status-panel { bottom: 10px; right: 10px; left: 10px; width: auto; max-width: none; }
    .public-lobby-item { grid-template-columns: 1fr auto; grid-template-rows: auto auto; }
    .public-lobby-item .btn { grid-column: 2 / 3; grid-row: 1 / 3; }
    .top-left-controls { top: 10px; left: 10px; }
}

/* Large screens - even more space optimization for EGO bans */
@media (min-width: 1400px) {
    #ego-ban-side-panel {
        flex: 1.4; /* Even more space for roster on large screens */
        min-width: 400px;
    }
    
    #opponent-roster-display .sinner-id-container {
        grid-template-columns: repeat(auto-fill, 100px); /* Fixed columns, no stretching */
        gap: 12px;
        justify-content: start; /* Stack to the left */
    }
    
    #opponent-roster-display .id-item .id-icon {
        width: 100px;
        height: 100px;
    }
}

/* --- TIMELINE STYLES --- */
.view-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 15px;
    margin-top: 10px;
}
.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}
.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}
.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
}
.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
}
input:checked + .slider {
    background-color: var(--primary);
}
input:focus + .slider {
    box-shadow: 0 0 1px var(--primary);
}
input:checked + .slider:before {
    transform: translateX(26px);
}
.slider.round {
    border-radius: 34px;
}
.slider.round:before {
    border-radius: 50%;
}

#timeline-view {
    padding: 20px 0;
}

.timeline-container {
    width: 100%;
    max-width: 950px;
    margin: 0 auto;
    position: relative;
    padding: 20px 0;
}

.timeline-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 3px;
    height: 100%;
    background-image: linear-gradient(to bottom, var(--accent), var(--primary), var(--accent));
    border-radius: 2px;
}

.timeline-event {
    padding: 5px 30px;
    position: relative;
    width: 50%;
    box-sizing: border-box;
    margin-top: -35px;
}

.timeline-container > .timeline-event:first-child {
    margin-top: 0;
}

.timeline-event.p1 { left: 0; }
.timeline-event.p2 { left: 50%; }

.timeline-event::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: var(--panel);
    border: 3px solid var(--accent);
    top: 25px;
    z-index: 1;
}

.timeline-event.p1::after { 
    right: -8px;
}
.timeline-event.p2::after { 
    left: -8px;
}

.event-group-container {
    display: flex;
    flex-direction: column;
    gap: 10px; /* Adds a little space between items in a group */
    margin-top: 10px;
}

.event-card {
    padding: 15px;
    background: var(--panel);
    border: 1px solid var(--border);
    border-radius: 8px;
    position: relative;
}

.event-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.player-name {
    font-weight: 700;
    font-size: 1rem;
}

.action-type {
    font-weight: 700;
    font-size: 0.8rem;
    text-transform: uppercase;
    padding: 3px 8px;
    border-radius: 15px;
}

.event-body {
    display: flex;
    align-items: center;
    gap: 10px;
}

.event-body img {
    width: 60px;
    height: 60px;
    border-radius: 6px;
    object-fit: cover;
    flex-shrink: 0;
}

.target-name {
    font-size: 0.9rem;
    font-weight: 500;
}

.event-card.pick {
    border-left: 4px solid var(--accent);
}
.event-card.pick .action-type {
    color: #000;
    background: var(--accent);
}
.event-card.pick img {
    border: 2px solid var(--accent);
}

.event-card.ban {
    border-left: 4px solid var(--primary);
}
.event-card.ban .action-type {
    color: var(--text);
    background: var(--primary);
}
.event-card.ban .event-body {
    position: relative;
}
.event-card.ban img {
    border: 2px solid var(--primary);
    filter: grayscale(80%);
}
.event-card.ban .event-body::before {
    content: '\f05e';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
    position: absolute;
    top: 50%;
    left: 30px;
    transform: translate(-50%, -50%);
    font-size: 2.5rem;
    color: rgba(179, 27, 27, 0.8);
    text-shadow: 0 0 5px black;
    pointer-events: none;
}

@media screen and (max-width: 768px) {
    .timeline-container::before { left: 10px; }
    .timeline-event {
        width: 100%;
        padding-left: 45px;
        padding-right: 0;
    }
    .timeline-event.p1, .timeline-event.p2 { left: 0; }
    .timeline-event::after { left: 2px; }
}

/* --- New Timeline Layout Styles --- */

#timeline-wrapper {
    display: flex;
    gap: 20px;
    align-items: flex-start; /* Align items to the top */
}

.timeline-roster-panel {
    flex: 1; /* Each roster takes up 1 part of the space */
    min-width: 280px;
    background: var(--panel);
    border-radius: 15px;
    padding: 15px;
    border: 1px solid var(--border);
    
    /* The magic for the sticky effect! */
    position: sticky;
    top: 20px; /* Distance from the top of the viewport when scrolling */
}

.timeline-roster-panel h4 {
    margin-top: 0;
    text-align: center;
    border-bottom: 1px solid var(--accent);
    padding-bottom: 10px;
    color: var(--text);
}

#timeline-view {
    flex: 2; /* The timeline takes up 2 parts, making it the focus */
    width: 100%;
}

.roster-grid-timeline {
    display: grid;
    grid-template-columns: repeat(auto-fill, 70px);
    gap: 8px;
    justify-content: center;
    margin-top: 15px;
    max-height: 80vh; /* Set a max height to allow scrolling within the panel if needed */
    overflow-y: auto;
}


/* --- Responsive Handling for Smaller Screens --- */
@media (max-width: 1200px) {
    #timeline-wrapper {
        flex-direction: column; /* Stack the columns vertically */
    }

    .timeline-roster-panel {
        position: static; /* Disable the sticky effect on small screens */
        width: 100%;
        max-height: 400px; /* Give a reasonable height when stacked */
    }
}
/* --- New Main Menu Styles --- */
.lobby-access-card {
    max-width: 600px;
    margin: 0 auto 40px auto;
}
.lobby-controls {
    display: flex;
    gap: 10px;
    align-items: center;
}
.lobby-controls input {
    flex-grow: 1;
    text-align: center;
}
.advanced-lobby-options {
    margin-top: 20px;
}
.advanced-lobby-options summary {
    cursor: pointer;
    font-weight: bold;
    color: var(--accent);
}
.main-menu-split {
    display: grid;
    grid-template-columns: 1fr;
    gap: 30px;
}
@media (min-width: 992px) {
    .main-menu-split {
        grid-template-columns: 1fr 1fr;
    }
}

/* --- New Analyzer Page Styles --- */
#analyzer-page .card {
    max-width: 800px;
    margin: 20px auto;
}
.analyzer-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}
#draft-import-code {
    width: 100%;
    min-height: 200px;
    padding: 15px;
    font-family: monospace;
    font-size: 1rem;
    resize: vertical;
    background: #111;
    border: 1px solid var(--border);
    color: var(--text);
    border-radius: 8px;
}



================================================
FILE: TECHNICAL_DOCUMENTATION.md
================================================
# Limbus Company Draft Hub - Technical Documentation

## Overview

This is a real-time multiplayer drafting application for Limbus Company tournaments. It supports multiple draft formats, timer management, EGO/ID banning and picking phases, and includes comprehensive roster management features.

**Key Technologies:**
- **Backend**: Node.js with Express and WebSocket (ws library)
- **Frontend**: Vanilla JavaScript with HTML/CSS
- **Data Storage**: In-memory (no database)
- **Real-time Communication**: WebSocket connections

---

## Architecture Overview

### File Structure
```
├── server.js          # Main backend server with WebSocket handling
├── script.js          # Frontend JavaScript logic
├── index.html         # Main HTML structure
├── style.css          # Styling
├── data.js            # ID and EGO data definitions
├── package.json       # Node.js dependencies
└── uploads/           # Image assets for IDs
```

### Core Components

1. **Server (server.js)**: WebSocket server handling lobbies, draft logic, and timer management
2. **Client (script.js)**: Frontend state management and UI interactions
3. **Data Layer (data.js)**: CSV-based ID and EGO definitions
4. **Assets (uploads/)**: Character portraits for visual representation

---

## Data Models

### Lobby State Structure
```javascript
{
  hostName: string,                    // Lobby creator's name
  createdAt: string,                   // ISO timestamp
  lastActivity: string,                // ISO timestamp for cleanup
  participants: {
    p1: { name, status, ready, rejoinToken, reserveTime },
    p2: { name, status, ready, rejoinToken, reserveTime },
    ref: { name, status, rejoinToken }
  },
  roster: { p1: [], p2: [] },         // Selected IDs for each player
  draft: {
    phase: string,                     // Current draft phase
    step: number,                      // Step within current phase
    currentPlayer: string,             // "p1", "p2", or ""
    action: string,                    // Current action type
    actionCount: number,               // Remaining actions for current player
    available: { p1: [], p2: [] },     // Available IDs for picking
    idBans: { p1: [], p2: [] },        // Banned IDs
    egoBans: { p1: [], p2: [] },       // Banned EGOs
    picks: { p1: [], p2: [] },         // Phase 1 picks
    picks_s2: { p1: [], p2: [] },      // Phase 2 picks (for multi-section)
    hovered: { p1: null, p2: null },   // Currently hovered selections
    banPools: { p1: [], p2: [] },      // Computed bannable IDs
    draftLogic: string,                // "1-2-2" or "2-3-2"
    matchType: string,                 // "section1" or "allSections"
    rosterSize: number,                // 42 for section1, 72 for allSections
    coinFlipWinner: string,            // Result of coin flip
    timer: {
      enabled: boolean,
      running: boolean,
      paused: boolean,
      endTime: number,                 // Unix timestamp
      pauseTime: number,               // Remaining time when paused
      isReserve: boolean,              // Using reserve time?
      reserveStartTime: number         // When reserve time started
    }
  }
}
```

### ID Data Structure
```javascript
{
  id: string,              // Slug version of name for file references
  name: string,            // Full display name
  keywords: string[],      // Gameplay keywords (Bleed, Burn, etc.)
  sinAffinities: string[], // Sin types (Pride, Wrath, etc.)
  rarity: string,          // "00" or "000"
  imageFile: string,       // Filename in uploads/ directory
  sinner: string           // Character name
}
```

---

## Draft Logic System

### Draft Formats

The application supports two main draft formats with variations:

#### 1-2-2 Format (Standard)
```javascript
{
  ban1Steps: 8,           // Initial ID ban phase (4 bans each, alternating)
  pick1: [                // First pick phase (6 IDs each)
    { p: 'p1', c: 1 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, 
    { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, 
    { p: 'p1', c: 1 }
  ],
  midBanSteps: 6,         // Mid-draft ban phase (3 bans each, alternating)
  pick2: [                // Second pick phase (6 IDs each, p2 starts)
    { p: 'p2', c: 1 }, { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, 
    { p: 'p1', c: 2 }, { p: 'p2', c: 2 }, { p: 'p1', c: 2 }, 
    { p: 'p2', c: 1 }
  ]
}
```

#### 2-3-2 Format (Alternative)
```javascript
{
  ban1Steps: 8,           // Same initial ban phase
  pick1: [                // Different pick pattern (5 picks each)
    { p: 'p1', c: 2 }, { p: 'p2', c: 3 }, { p: 'p1', c: 2 }, 
    { p: 'p2', c: 3 }, { p: 'p1', c: 2 }
  ],
  midBanSteps: 6,         // Same mid-ban phase
  pick2: [                // Second pick phase (5 picks each)
    { p: 'p2', c: 2 }, { p: 'p1', c: 3 }, { p: 'p2', c: 2 }, 
    { p: 'p1', c: 3 }, { p: 'p2', c: 2 }
  ]
}
```

#### Extended Formats (All Sections)
For "All Sections" matches, both formats have `-extended` variants with:
- Increased `midBanSteps` to 8 (4 bans each instead of 3)
- Extended `pick2` phase with 12 additional picks each (totaling 18 per player)

### Draft Phase Flow

1. **Roster Selection**: Players build rosters of 42 or 72 IDs
2. **Coin Flip**: Determines turn order
3. **EGO Ban Phase**: Each player bans 5 EGOs (90s timer each)
4. **ID Ban Phase**: Alternating bans following `ban1Steps` pattern
5. **Pick Phase 1**: First set of ID picks following `pick1` pattern
6. **Mid-Ban Phase**: Additional bans following `midBanSteps` pattern
7. **Pick Phase 2**: Final ID picks following `pick2` pattern
8. **Complete**: Draft finished

### Phase Advancement Logic

The `advancePhase()` function handles transitions:

```javascript
function advancePhase(lobbyData) {
  const { draft } = lobbyData;
  const logicKey = draft.matchType === 'allSections' 
    ? `${draft.draftLogic}-extended` 
    : draft.draftLogic;
  const logic = DRAFT_LOGIC[logicKey];

  switch (draft.phase) {
    case "egoBan":
      // Switch between p1 and p2, then move to ban phase
    case "ban":
      // Follow ban1Steps pattern, then move to pick1
    case "pick":
      // Follow pick1 pattern, then move to midBan
    case "midBan":
      // Follow midBanSteps pattern, then move to pick2
    case "pick2":
      // Follow pick2 pattern, then complete
  }
}
```

---

## Timer System

### Timer Types

1. **Roster Timer**: 90 seconds for roster building
2. **EGO Ban Timer**: 90 seconds per player for EGO bans
3. **Draft Timer**: 15 seconds per action count during picks/bans

### Reserve Time System

Each player starts with 120 seconds of reserve time:
- When main timer expires, reserve time activates automatically
- Reserve time countdown is precise to the second
- Once reserve time is exhausted, turns are auto-skipped
- Reserve time is consumed only when actually used

### Timer Implementation

```javascript
function handleTimer(lobbyCode) {
  // Check if reserve time should activate
  if (participant.reserveTime > 0 && !draft.timer.isReserve) {
    draft.timer.isReserve = true;
    draft.timer.reserveStartTime = Date.now();
    // Set new timeout for reserve duration
  }
  
  // If timer fully expires
  if (hovered[currentPlayer]) {
    // Auto-confirm hovered selection
    handleDraftConfirm(lobbyCode, lobbyData, null);
  } else {
    // Skip turn by advancing phase
    advancePhase(lobbyData);
  }
}
```

### Timer Control (Referee Only)

Referees can pause/unpause timers:
- Pausing saves remaining time
- Unpausing restores saved time and resumes countdown
- Pause state is synchronized across all clients

---

## WebSocket Communication

### Message Types

#### Client → Server
```javascript
// Lobby Management
{ type: 'createLobby', options: { draftLogic, timerEnabled, matchType, rosterSize } }
{ type: 'joinLobby', lobbyCode, role, name }
{ type: 'rejoinLobby', lobbyCode, role, rejoinToken }

// Roster Management
{ type: 'rosterSelect', lobbyCode, player, id }
{ type: 'rosterSet', lobbyCode, player, roster }
{ type: 'rosterRandomize', lobbyCode, player }
{ type: 'updateReady', lobbyCode, player }

// Draft Actions
{ type: 'startCoinFlip', lobbyCode }
{ type: 'setTurnOrder', lobbyCode, choice }
{ type: 'draftHover', lobbyCode, payload: { id } }
{ type: 'draftConfirm', lobbyCode }

// Referee Controls
{ type: 'draftControl', lobbyCode, action, payload }
{ type: 'timerControl', lobbyCode }

// Keep-Alive (prevents hosting service sleep)
{ type: 'keepAlive', lobbyCode }
```

#### Server → Client
```javascript
// State Updates
{ type: 'stateUpdate', state: lobbyData, newRole?: string }

// Responses
{ type: 'lobbyCreated', code, role, rejoinToken, state }
{ type: 'lobbyJoined', lobbyCode, role, rejoinToken, state }
{ type: 'error', message }

// Keep-Alive Acknowledgment
{ type: 'keepAliveAck' }
```

### Connection Management

- **Rejoin Tokens**: UUIDs for session persistence
- **Connection Status**: Tracked per participant
- **Role Swapping**: Handled during coin flip resolution
- **Cleanup**: Automatic lobby cleanup after 2 hours of inactivity

---

## Security & Hardening

### Input Sanitization
```javascript
function sanitize(text) {
  return text.toString()
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}
```

### Rate Limiting
- 10 lobby creations per minute per IP
- Sliding window implementation
- Memory-based tracking

### Authorization Checks
```javascript
function isAuthorized(ws, targetRole) {
  return ws && (ws.userRole === 'ref' || ws.userRole === targetRole);
}
```

### Data Validation
- Roster size validation
- ID existence validation
- Action count verification
- Phase-appropriate action validation

---

## Frontend State Management

### Global State Object
```javascript
const state = {
  currentView: string,        // UI view state
  lobbyCode: string,          // Current lobby
  userId: string,             // Generated client ID
  userRole: string,           // "p1", "p2", or "ref"
  rejoinToken: string,        // Session persistence
  participants: object,       // Participant info
  roster: object,             // Roster data
  draft: object,              // Draft state mirror
  filters: object,            // UI filter states
  socket: WebSocket           // Connection
}
```

### View Management
- **Main Page**: Lobby creation/joining
- **Builder**: Roster construction tool
- **Lobby**: Pre-draft lobby view
- **Draft**: Active draft interface
- **Summary**: Post-draft results

### UI Updates
- Real-time state synchronization via WebSocket
- Optimistic updates for user actions
- Error handling and rollback capabilities

---

## Roster System

### Roster Builder
- CSV-based ID database with ~170 identities
- Filter by Sinner, Sin Affinity, Keywords
- Visual grid with character portraits
- Drag-and-drop roster management
- Import/export via base64-encoded roster codes

### Roster Validation
```javascript
function validateRoster(roster, rosterSize) {
  const sizeOk = roster.length === rosterSize;
  const uniqueOk = new Set(roster).size === roster.length;
  const idsOk = roster.every(id => allIds.includes(id));
  return sizeOk && uniqueOk && idsOk;
}
```

### Dynamic Roster Management
- Real-time roster updates
- Ready state tracking
- Random roster generation
- Clear/reset functionality

---

## Ban Pool System

### Dynamic Ban Pool Computation
```javascript
function computeBanPools(lobbyData) {
  const banned = new Set([...draft.idBans.p1, ...draft.idBans.p2]);
  const pools = { p1: [], p2: [] };
  
  ['p1','p2'].forEach(player => {
    const opponent = player === 'p1' ? 'p2' : 'p1';
    const blocked = new Set([
      ...banned,                    // Already banned IDs
      ...draft.picks[opponent],     // Opponent's picks
      ...draft.picks_s2[opponent]   // Opponent's section 2 picks
    ]);
    pools[player] = (roster[opponent] || [])
      .filter(id => !blocked.has(id));
  });
  
  draft.banPools = pools;
}
```

### Ban Validation
- Bans target opponent's roster only
- Can't ban already-picked IDs
- Can't ban already-banned IDs
- Real-time pool updates after each action

---

## Error Handling & Edge Cases

### Connection Issues
- Automatic reconnection attempts
- Session restoration via rejoin tokens
- Graceful degradation during disconnects
- Connection status indicators

### Timer Edge Cases
- Timer expiration during network issues
- Reserve time precision handling
- Pause/unpause synchronization
- Background process cleanup

### Draft Validation
- Phase-appropriate actions only
- Turn order enforcement
- Action count validation
- ID availability checking

### Data Integrity
- Roster size enforcement
- Unique ID validation
- State consistency checks
- Rollback capabilities

---

## Performance Considerations

### Memory Management
- In-memory lobby storage with TTL cleanup
- Periodic inactive lobby removal (30-minute intervals)
- WebSocket connection pooling
- Timer cleanup on lobby destruction

### Network Optimization
- Minimal message payloads
- State diff broadcasting
- Connection keep-alive
- Efficient JSON serialization
- **Keep-alive system**: Prevents hosting service sleep during active drafts

### Client-Side Optimization
- Virtual scrolling for large ID lists
- Debounced filter updates
- Lazy image loading
- DOM reuse patterns

---

## Keep-Alive System

### Purpose
Prevents hosting services (like Render's free tier) from going to sleep during active drafts by sending periodic activity signals.

### Implementation

**Client-Side (script.js)**:
```javascript
function startKeepAlive() {
  // Sends keep-alive every 4 minutes during active draft phases
  state.keepAliveInterval = setInterval(() => {
    if (shouldSendKeepAlive()) {
      sendMessage({ type: 'keepAlive', lobbyCode: state.lobbyCode });
    }
  }, 4 * 60 * 1000);
}

function shouldSendKeepAlive() {
  const activeDraftPhases = ['coinFlip', 'egoBan', 'ban', 'pick', 'midBan', 'pick2', 'pick_s2'];
  return activeDraftPhases.includes(state.draft.phase);
}
```

**Server-Side (server.js)**:
```javascript
case 'keepAlive': {
  if (!lobbyData) return;
  updateLobbyActivity(lobbyCode);
  ws.send(JSON.stringify({ type: 'keepAliveAck' }));
  break;
}
```

### Lifecycle
- **Started**: When joining a lobby (`handleLobbyJoined`)
- **Active**: Only during draft phases (not during roster building)
- **Stopped**: When leaving lobby, disconnecting, or connection lost
- **Frequency**: Every 4 minutes (well under typical 15-minute sleep thresholds)

### Message Flow
1. Client checks if in active draft phase
2. If active, sends `keepAlive` message with lobby code
3. Server updates lobby activity timestamp
4. Server responds with `keepAliveAck` confirmation
5. Process repeats every 4 minutes

---

## Deployment Notes

### Environment Requirements
- Node.js 18.x or 20.x
- WebSocket support
- Static file serving capability
- Process.env.PORT support for hosting platforms

### Configuration
```javascript
const TIMERS = {
  roster: 90,        // Roster selection timer
  egoBan: 90,        // EGO ban timer per player
  pick: 15           // Pick/ban timer per action
};

const EGO_BAN_COUNT = 5;           // EGOs banned per player
const LOBBY_TTL = 2 * 60 * 60 * 1000;  // 2 hours lobby cleanup
```

### Monitoring
- Console logging for major events
- Error tracking for failed operations
- Performance metrics for timer accuracy
- Connection status monitoring

---

## Future Maintenance

### Adding New IDs
1. Update the CSV data in `data.js` 
2. Add corresponding image files to `uploads/`
3. Ensure slug generation consistency
4. Update server-side validation list

### Modifying Draft Logic
1. Update `DRAFT_LOGIC` object in `server.js`
2. Test phase advancement logic
3. Verify timer integration
4. Update client-side display logic

### Adding New Features
1. Consider WebSocket message impact
2. Maintain backward compatibility
3. Test with multiple concurrent lobbies
4. Document new configuration options

---

## Troubleshooting Guide

### Common Issues

**Lobbies disappearing**: Check TTL settings and activity tracking
**Timer desync**: Verify system time accuracy and network latency
**Draft stuck**: Check phase advancement logic and action counts
**Memory leaks**: Monitor lobby cleanup and timer management
**Connection drops**: Review WebSocket reconnection logic

### Debug Information
- Server logs include lobby codes and player actions
- Client state is accessible via browser console
- WebSocket messages can be monitored in network tab
- Timer precision can be verified with console timestamps

---

## Recent Code Improvements (August 2025)

### Server-Side Enhancements

#### 1. Roster Validation Consolidation
- **Added**: `validateRoster(roster, rosterSize)` helper function
- **Improvement**: Eliminates duplicate roster validation logic across endpoints
- **Location**: Used in `rosterSet` handler
- **Benefit**: Single source of truth for roster validation rules

#### 2. Error Response Consistency
- **Added**: `sendError(ws, message)` helper function
- **Improvement**: Standardizes all WebSocket error responses to `{ type: 'error', message }`
- **Location**: Applied to all error cases in WebSocket handlers
- **Benefit**: Consistent error handling and reduced code duplication

#### 3. Enhanced Player Name Sanitization
- **Added**: `sanitizePlayerName(name)` function with advanced validation
- **Features**:
  - 16-character length limit (reduced from 50)
  - Control character removal (`[\x00-\x1F\x7F]`)
  - Whitespace normalization
  - HTML entity encoding for XSS prevention
- **Location**: Applied to lobby creation and player join
- **Benefit**: Better security and UI consistency

#### 4. Improved Logging System
- **Added**: `logInfo(category, message, data)` and `logError(category, message, error)` functions
- **Features**:
  - ISO timestamps on all log entries
  - Structured data logging with JSON objects
  - Categorized logs (TIMER, CONNECTION, DRAFT, CLEANUP, SERVER, WEBSOCKET)
  - Consistent formatting across all server operations
- **Benefit**: Better monitoring, debugging, and operational visibility

#### 5. Validation Helper Functions
- **Added**: Multiple validation helpers to reduce code duplication:
  - `validateLobbyExists(ws, lobbyData, sendErrorOnFail)` - Lobby existence check
  - `validatePlayerRole(player)` - Player role validation (p1/p2, not ref)
  - `validatePlayerAccess(ws, player, lobbyData)` - Combined player access validation
  - `validatePlayerNotReady(lobbyData, player)` - Ready state validation
  - `validateRefereeAccess(ws, lobbyData)` - Referee access validation
- **Improvement**: Consolidated 15+ repeated validation patterns
- **Benefit**: Easier maintenance, consistent validation logic, cleaner handler code

### Code Quality Improvements
- **Reduced**: Code duplication by ~30% in validation patterns
- **Improved**: Error handling consistency across all WebSocket endpoints
- **Enhanced**: Security through better input sanitization
- **Added**: Comprehensive logging for operational monitoring
- **Maintained**: All existing draft logic and business rules (no breaking changes)

### Testing Notes
All improvements preserve the existing meticulously crafted draft logic. The changes are focused on:
- Code organization and maintainability
- Error handling and logging
- Input validation and security
- Development and debugging experience

**No changes were made to:**
- Draft logic sequences or phase advancement
- Timer calculations or reserve time handling
- Ban pool computation or ID availability
- WebSocket message protocols or data structures

---

## Pending Code Improvements Checklist

### Client-Side (script.js) Improvements
- [x] **Extract magic numbers to constants** - Replace hardcoded values like `150` for max character count
- [x] **Consolidate duplicate DOM queries** - Cache frequently accessed DOM elements
- [x] **Improve error handling in async functions** - Add proper try-catch blocks where missing
- [x] **Extract repeated validation logic** - The character validation is repeated in multiple places
- [x] **Improve function naming** - Some functions like `updateCharacterCount` could be more descriptive
- [x] **Add debouncing to search functionality** - Prevent excessive API calls during typing

### Code Organization Improvements
- [ ] **Move validation functions to separate module** - Extract roster validation logic to a utility file
- [ ] **Create constants file** - Move all magic numbers and strings to a shared constants file
- [ ] **Improve comment documentation** - Add JSDoc comments to functions
- [ ] **Standardize variable naming** - Some variables use different naming conventions

### Security & Performance Improvements
- [ ] **Add rate limiting** - Prevent spam requests to endpoints
- [ ] **Improve file upload validation** - Add more robust file type and size validation
- [ ] **Add CORS configuration** - Properly configure CORS instead of allowing all origins
- [ ] **Optimize image serving** - Add proper cache headers for static files

### Error Handling Improvements
- [ ] **Standardize error response format** - All endpoints should return consistent error objects
- [ ] **Add global error handler** - Catch unhandled errors gracefully
- [ ] **Improve client-side error feedback** - Better user feedback for various error states

### Code Quality Improvements
- [ ] **Remove unused variables** - Clean up any unused declarations
- [ ] **Improve code formatting consistency** - Standardize indentation and spacing
- [ ] **Add input validation helpers** - Create reusable validation functions

### Implementation Priority
1. **High Priority**: Client-side improvements (magic numbers, DOM caching, error handling)
2. **Medium Priority**: Security & performance (rate limiting, CORS, file validation)
3. **Low Priority**: Code organization (constants file, JSDoc comments, formatting)

### Notes for Implementation
- Each improvement should be implemented and tested individually
- Preserve all existing functionality and user experience
- Focus on maintainability and developer experience
- Consider backward compatibility for any API changes
- Test thoroughly after each change to ensure no regressions

### TODO: ID Image Asset Management (August 17, 2025)
**Priority: High** - Fix missing or broken ID image assets in the `/uploads` directory
- **Issue**: Several ID character portraits are missing or have broken file paths
- **Impact**: IDs display as broken images in the unified image-only interface
- **Required Actions**:
  - Audit all ID slugs in `data.js` against actual files in `/uploads` directory
  - Identify missing image files and obtain correct character portraits
  - Verify image file naming conventions match slug generation patterns
  - Test image loading across all ID contexts (roster builder, draft interface, ban pools)
  - Ensure consistent image dimensions and quality standards
- **Testing**: Verify all ~170 ID images load properly in the interface
- **Notes**: Critical for the new unified image-only interface where character portraits are the primary visual identification method

---

## Testing Scenarios

### Core Functionality
1. Complete draft with both formats (1-2-2, 2-3-2)
2. Extended format testing (All Sections)
3. Timer expiration handling (main and reserve)
4. Connection drop and rejoin scenarios
5. Multiple concurrent lobbies

### Edge Cases
1. Rapid clicking during picks/bans
2. Network interruption during critical phases
3. Browser refresh during active draft
4. Multiple referee actions simultaneously
5. Invalid roster configurations

### Performance Testing
1. Large number of concurrent connections
2. Extended session duration (approaching TTL)
3. Rapid lobby creation/destruction
4. Heavy filtering and search operations
5. Memory usage over time

This documentation should serve as a comprehensive reference for understanding, maintaining, and extending the Limbus Company Draft Hub application.



================================================
FILE: uploads/blade-lineage-mentor-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/blade-lineage-salsu-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/blade-lineage-salsu-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/blade-lineage-salsu-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/blade-lineage-salsu-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/blade-lineage-salsu-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/cinq-association-east-section-3-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/cinq-association-south-section-4-director-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/cinq-association-south-section-4-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/cinq-association-south-section-5-director-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/cinq-association-west-section-3-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/cropped-limbus_logo_feather.webp
================================================
[Binary file]


================================================
FILE: uploads/dawn-office-fixer-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/dead-rabbits-boss-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/devyat-association-north-section-3-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/devyat-association-north-section-3-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/dieci-association-south-section-4-director-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/dieci-association-south-section-4-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/dieci-association-south-section-4-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/dieci-association-south-section-4-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/district-20-yurodivy-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/district-20-yurodivy-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/edgar-family-butler-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/edgar-family-chief-butler-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/edgar-family-heir-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/effloresced-ego-spicebush-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/family-hierarch-candidate-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/fanghunt-office-fixer-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/firefist-office-survivor-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/full-stop-office-fixer-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/full-stop-office-rep-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/g-corp-head-manager-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/g-corp-manager-corporal-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/heishou-pack-mao-branch-adept-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/heishou-pack-mao-branch-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/heishou-pack-mao-branch-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/heishou-pack-si-branch-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/heishou-pack-si-branch-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/heishou-pack-wu-branch-adept-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/heishou-pack-you-branch-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/hook-office-fixer-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/k-corp-class-3-excision-staff-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/kurokumo-clan-captain-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/kurokumo-clan-captain-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/kurokumo-clan-wakashu-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/kurokumo-clan-wakashu-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/kurokumo-clan-wakashu-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/kurokumo-clan-wakashu-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/lcb-sinner-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/lccb-assistant-manager-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/lccb-assistant-manager-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/lccb-assistant-manager-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/lce-ego-ardor-blossom-star-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/lce-ego-lantern-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/liu-association-south-section-3-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/liu-association-south-section-4-director-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/liu-association-south-section-4-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/liu-association-south-section-4-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/liu-association-south-section-5-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/liu-association-south-section-6-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/liu-association-south-section-6-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-corp-remnant-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-in-the-name-of-love-and-hate-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-lantern-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-magic-bullet-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-red-eyes-penitence-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-red-sheet-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-regret-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-sloshing-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-solemn-lament-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-sunshower-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/lobotomy-ego-the-sword-sharpened-with-tears-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/los-mariachis-jefe-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/molar-boatworks-fixer-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/molar-boatworks-fixer-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/molar-office-fixer-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/molar-office-fixer-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/multicrack-office-fixer-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/multicrack-office-rep-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/n-corp-ego-fell-bullet-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/n-corp-grohammer-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/n-corp-kleinhammer-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/n-corp-mittelhammer-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/n-corp-mittelhammer-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/r-corp-4th-pack-rabbit-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/r-corp-4th-pack-reindeer-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/r-corp-4th-pack-reindeer-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/r-corp-4th-pack-rhino-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/rb-chef-de-cuisine-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/rb-sous-chef-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/rosespanner-workshop-fixer-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/rosespanner-workshop-fixer-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/rosespanner-workshop-rep-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/seven-association-south-section-4-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/seven-association-south-section-4-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/seven-association-south-section-6-director-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/seven-association-south-section-6-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/seven-association-south-section-6-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/shi-association-south-section-5-director-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/shi-association-south-section-5-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/shi-association-south-section-5-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/t-corp-class-2-collection-staff-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/t-corp-class-3-collection-staff-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/t-corp-class-3-vdcu-staff-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/the-barber-of-la-manchaland-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/the-lord-of-hongyuan-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/the-manager-of-la-manchaland-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/the-middle-little-brother-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/the-middle-little-brother-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/the-middle-little-sister-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/the-one-who-grips-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/the-one-who-shall-grip-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/the-pequod-captain-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/the-pequod-first-mate-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/the-pequod-harpooneer-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/the-priest-of-la-manchaland-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/the-princess-of-la-manchaland-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/the-ring-pointillist-student-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/the-ring-pointillist-student-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/the-thumb-east-capo-iiii-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/the-thumb-east-soldato-ii-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/tingtang-gang-gangleader-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/twinhook-pirates-first-mate-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/ufi-association-south-section-3-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/w-corp-l2-cleanup-agent-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/w-corp-l2-cleanup-agent-hong-lu.webp
================================================
[Binary file]


================================================
FILE: uploads/w-corp-l2-cleanup-agent-meursault.webp
================================================
[Binary file]


================================================
FILE: uploads/w-corp-l3-cleanup-agent-don-quixote.webp
================================================
[Binary file]


================================================
FILE: uploads/w-corp-l3-cleanup-agent-ryshu.webp
================================================
[Binary file]


================================================
FILE: uploads/w-corp-l3-cleanup-agent-yi-sang.webp
================================================
[Binary file]


================================================
FILE: uploads/w-corp-l3-cleanup-captain-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/wild-hunt-heathcliff.webp
================================================
[Binary file]


================================================
FILE: uploads/wuthering-heights-butler-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/wuthering-heights-chief-butler-outis.webp
================================================
[Binary file]


================================================
FILE: uploads/zwei-association-south-section-4-faust.webp
================================================
[Binary file]


================================================
FILE: uploads/zwei-association-south-section-4-gregor.webp
================================================
[Binary file]


================================================
FILE: uploads/zwei-association-south-section-5-rodion.webp
================================================
[Binary file]


================================================
FILE: uploads/zwei-association-south-section-6-sinclair.webp
================================================
[Binary file]


================================================
FILE: uploads/zwei-association-west-section-3-ishmael.webp
================================================
[Binary file]


================================================
FILE: uploads/zwei-association-west-section-3-sinclair.webp
================================================
[Binary file]

